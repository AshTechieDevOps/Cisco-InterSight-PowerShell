#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'hyperflex.HxapEvent', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER FirstTime
First timestamp of the event occurrence.
.PARAMETER Identity
Internally generated identity (UUID) of this event.
.PARAMETER LastTime
Last timestamp of the event occurrence.
.PARAMETER Message
Full description of the event.
.PARAMETER OwnerName
Name of the owner with which event is associated.
.PARAMETER OwnerType
Type of the object with which event is associated (Host, Cluster, VM). * `Unknown` - Value is Unknown if the target type is unidentified. * `Cluster` - Cluster refers to HyperFlex AP Cluster. * `Host` - Host refers to server node which is part of HyperFlex AP Cluster. * `VM` - VM refers to Virtual machine available on a HyperFlex AP Node. * `Disk` - Disk refers to Virtual Disk available on a HyperFlex AP Cluster.
.PARAMETER OwnerUuid
UUID of the owner with which event is associated.
.PARAMETER Severity
Severity level of the event (Info/Warning/Critical). * `None` - The Enum value None represents that there is no severity. * `Info` - The Enum value Info represents the Informational level of severity. * `Critical` - The Enum value Critical represents the Critical level of severity. * `Warning` - The Enum value Warning represents the Warning level of severity. * `Cleared` - The Enum value Cleared represents that the alarm severity has been cleared.
.PARAMETER Cluster
No description available.
.OUTPUTS

HyperflexHxapEventAllOf<PSCustomObject>
#>

function Initialize-IntersightHyperflexHxapEventAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("hyperflex.HxapEvent")]
        [String]
        ${ClassId} = "hyperflex.HxapEvent",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("hyperflex.HxapEvent")]
        [String]
        ${ObjectType} = "hyperflex.HxapEvent",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstTime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Identity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastTime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OwnerName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Unknown", "Cluster", "Host", "VM", "Disk")]
        [String]
        ${OwnerType} = "Unknown",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OwnerUuid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("None", "Info", "Critical", "Warning", "Cleared")]
        [String]
        ${Severity} = "None",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cluster}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightHyperflexHxapEventAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "FirstTime" = ${FirstTime}
            "Identity" = ${Identity}
            "LastTime" = ${LastTime}
            "Message" = ${Message}
            "OwnerName" = ${OwnerName}
            "OwnerType" = ${OwnerType}
            "OwnerUuid" = ${OwnerUuid}
            "Severity" = ${Severity}
            "Cluster" = ${Cluster}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HyperflexHxapEventAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to HyperflexHxapEventAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HyperflexHxapEventAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToHyperflexHxapEventAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightHyperflexHxapEventAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightHyperflexHxapEventAllOf
        $AllProperties = ("ClassId", "ObjectType", "FirstTime", "Identity", "LastTime", "Message", "OwnerName", "OwnerType", "OwnerUuid", "Severity", "Cluster")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FirstTime"))) { #optional property not found
            $FirstTime = $null
        } else {
            $FirstTime = $JsonParameters.PSobject.Properties["FirstTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Identity"))) { #optional property not found
            $Identity = $null
        } else {
            $Identity = $JsonParameters.PSobject.Properties["Identity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LastTime"))) { #optional property not found
            $LastTime = $null
        } else {
            $LastTime = $JsonParameters.PSobject.Properties["LastTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["Message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OwnerName"))) { #optional property not found
            $OwnerName = $null
        } else {
            $OwnerName = $JsonParameters.PSobject.Properties["OwnerName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OwnerType"))) { #optional property not found
            $OwnerType = $null
        } else {
            $OwnerType = $JsonParameters.PSobject.Properties["OwnerType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OwnerUuid"))) { #optional property not found
            $OwnerUuid = $null
        } else {
            $OwnerUuid = $JsonParameters.PSobject.Properties["OwnerUuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Severity"))) { #optional property not found
            $Severity = $null
        } else {
            $Severity = $JsonParameters.PSobject.Properties["Severity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Cluster"))) { #optional property not found
            $Cluster = $null
        } else {
            $Cluster = $JsonParameters.PSobject.Properties["Cluster"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "FirstTime" = ${FirstTime}
            "Identity" = ${Identity}
            "LastTime" = ${LastTime}
            "Message" = ${Message}
            "OwnerName" = ${OwnerName}
            "OwnerType" = ${OwnerType}
            "OwnerUuid" = ${OwnerUuid}
            "Severity" = ${Severity}
            "Cluster" = ${Cluster}
        }

        return $PSO
    }

}

