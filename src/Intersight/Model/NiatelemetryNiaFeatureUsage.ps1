#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Object available at Device connector scope for feature and fabric information. This applies to APIC environment currently.

.PARAMETER Moid
The unique identifier of this Managed Object instance.
.PARAMETER Owners
No description available.
.PARAMETER Tags
No description available.
.PARAMETER VersionContext
No description available.
.PARAMETER Parent
No description available.
.PARAMETER ApicCount
Number of APIC controllers. This determines the value of controllers for the fabric.
.PARAMETER AppCenterCount
ACI APPs feature usage. This determines the total number of apps installed on the fabric.
.PARAMETER Ave
AVE feature usage. This determines if ACI virtual edge feature is enabled or disabled.
.PARAMETER BdCount
Number of BDs. This determines the total number of Broadcast Domains across the fabric.
.PARAMETER ConsistencyCheckerApp
Consistency checker application usage. This determines if the fabric has Consistency checker application installed.
.PARAMETER ContractCount
Number of contracts. This determines the total number of Contracts configured across the fabric.
.PARAMETER DnsCount
DNS feature usage. This determines the total number of DNS configurations across the fabric.
.PARAMETER EigrpCount
Eigrp feature usage. This determines the total number of EIGRP sessions across the fabric.
.PARAMETER EpgCount
Number of EPGs. This determines the total number of End Point Groups across the fabric.
.PARAMETER HsrpCount
Hsrp feature usage. This determines the total number of HSRP sessions across the fabric.
.PARAMETER IbgpCount
Ibgp feature usage. This determines the total number of BGP sessions across the fabric.
.PARAMETER IgmpAccessListCount
IGMP Access List feature usage. This determines the total number of IGMP access lists configured across the fabric.
.PARAMETER IgmpSnoop
IGMP Snooping feature usage. This determines if this feature is enabled or disabled.
.PARAMETER IpEpgCount
Number of IP based EPGs. This determines the total number of IP End Point Groups across the fabric.
.PARAMETER IsisCount
Isis feature usage. TThis determines the total number of ISIS sessions across the fabric.
.PARAMETER L2Multicast
L2Multicast feature usage. This determines if this Layer 2 Multicast feature is being enabled / disabled on the fabric.
.PARAMETER LeafCount
Number of Leafs. This determines the total number of Leaf switches in the fabric.
.PARAMETER MaintenanceModeCount
Maintenance Mode feature usage. This determines the number of switches that are currently in maintenance mode.
.PARAMETER ManagementOverV6Count
Management over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
.PARAMETER Nir
NIR application usage. This determines if the fabric has NIR application installed.
.PARAMETER OpflexKubernetesCount
Opflex for Kubernetes feature usage. This determines the total number of VMM sessions of type kubernetes.
.PARAMETER OspfCount
Ospf feature usage. This determines the total number of OSPF sessions across the fabric.
.PARAMETER PoeCount
POE feature usage. This determines the total number of POE configurations across the fabric.
.PARAMETER QinVniTunnelCount
QinVniTunnel feature usage. This determines if the qinVniTunnel feature is being used on the fabric and the scale of it.
.PARAMETER RemoteLeafCount
Number of remote Leafs. This determines the total number of remote leaf switches in the fabric.
.PARAMETER ScvmmCount
SCVMM feature usage. This determines the total number of SCVMM configurations in the fabric.
.PARAMETER SharedL3OutCount
SharedL3Out feature usage. This determines the total number of Shared L3 out configured across the fabric.
.PARAMETER SiteName
The Site name represents an APIC cluster. Service Engine can onboard multiple APIC clusters / sites. There will be a feature usage object per site in Multi site scenario. In multi-site scenario the site name is available in all the requests being made.
.PARAMETER SmartCallHome
Smart callhome feature usage. This determines if this feature is being enabled or disabled.
.PARAMETER Snmp
SNMP feature usage. This determines if this feature is enabled or disabled.
.PARAMETER SpineCount
Number of Spines. This determines the total number of spine switches in the fabric.
.PARAMETER SshOverV6Count
Ssh over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
.PARAMETER SyslogOverV6Count
Syslog over IPv6 feature usage. This determines the total number of IPv6 configurtaions in the fabric.
.PARAMETER TenantCount
Number of tenants. This determines the total number of tenants configured across the fabric.
.PARAMETER TierTwoLeafCount
Number of tier 2 Leafs. This determines the total number of tier 2 Leaf switches in the fabric.
.PARAMETER Twamp
TWAMP feature usage. This determines if this feature is enabled or disabled.
.PARAMETER Useg
VMM uSegmentation feature usage. This determines if microsegmentation feature is enabled or disabled.
.PARAMETER VpodCount
Virtual pod feature usage. This determines the total number of virtual POD configurations in the fabrics.
.PARAMETER RegisteredDevice
No description available.
.OUTPUTS

NiatelemetryNiaFeatureUsage<PSCustomObject>
#>

function Initialize-IntersightNiatelemetryNiaFeatureUsage {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Moid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Owners},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VersionContext},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ApicCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AppCenterCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ave},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BdCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConsistencyCheckerApp},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ContractCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DnsCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EigrpCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${EpgCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${HsrpCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IbgpCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IgmpAccessListCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IgmpSnoop},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IpEpgCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IsisCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${L2Multicast},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LeafCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MaintenanceModeCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ManagementOverV6Count},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nir},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${OpflexKubernetesCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${OspfCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PoeCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${QinVniTunnelCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RemoteLeafCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ScvmmCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SharedL3OutCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SmartCallHome},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Snmp},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SpineCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SshOverV6Count},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SyslogOverV6Count},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TenantCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TierTwoLeafCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Twamp},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Useg},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VpodCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RegisteredDevice}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightNiatelemetryNiaFeatureUsage' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        
        $PSO = [PSCustomObject]@{
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Parent" = ${Parent}
            "ApicCount" = ${ApicCount}
            "AppCenterCount" = ${AppCenterCount}
            "Ave" = ${Ave}
            "BdCount" = ${BdCount}
            "ConsistencyCheckerApp" = ${ConsistencyCheckerApp}
            "ContractCount" = ${ContractCount}
            "DnsCount" = ${DnsCount}
            "EigrpCount" = ${EigrpCount}
            "EpgCount" = ${EpgCount}
            "HsrpCount" = ${HsrpCount}
            "IbgpCount" = ${IbgpCount}
            "IgmpAccessListCount" = ${IgmpAccessListCount}
            "IgmpSnoop" = ${IgmpSnoop}
            "IpEpgCount" = ${IpEpgCount}
            "IsisCount" = ${IsisCount}
            "L2Multicast" = ${L2Multicast}
            "LeafCount" = ${LeafCount}
            "MaintenanceModeCount" = ${MaintenanceModeCount}
            "ManagementOverV6Count" = ${ManagementOverV6Count}
            "Nir" = ${Nir}
            "OpflexKubernetesCount" = ${OpflexKubernetesCount}
            "OspfCount" = ${OspfCount}
            "PoeCount" = ${PoeCount}
            "QinVniTunnelCount" = ${QinVniTunnelCount}
            "RemoteLeafCount" = ${RemoteLeafCount}
            "ScvmmCount" = ${ScvmmCount}
            "SharedL3OutCount" = ${SharedL3OutCount}
            "SiteName" = ${SiteName}
            "SmartCallHome" = ${SmartCallHome}
            "Snmp" = ${Snmp}
            "SpineCount" = ${SpineCount}
            "SshOverV6Count" = ${SshOverV6Count}
            "SyslogOverV6Count" = ${SyslogOverV6Count}
            "TenantCount" = ${TenantCount}
            "TierTwoLeafCount" = ${TierTwoLeafCount}
            "Twamp" = ${Twamp}
            "Useg" = ${Useg}
            "VpodCount" = ${VpodCount}
            "RegisteredDevice" = ${RegisteredDevice}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NiatelemetryNiaFeatureUsage<PSCustomObject>

.DESCRIPTION

Convert from JSON to NiatelemetryNiaFeatureUsage<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NiatelemetryNiaFeatureUsage<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToNiatelemetryNiaFeatureUsage {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightNiatelemetryNiaFeatureUsage' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightNiatelemetryNiaFeatureUsage
        $AllProperties = ("AccountMoid", "ClassId", "CreateTime", "DomainGroupMoid", "ModTime", "Moid", "ObjectType", "Owners", "SharedScope", "Tags", "VersionContext", "Ancestors", "Parent", "PermissionResources", "DisplayNames", "ApicCount", "AppCenterCount", "Ave", "BdCount", "ConsistencyCheckerApp", "ContractCount", "DnsCount", "EigrpCount", "EpgCount", "HsrpCount", "IbgpCount", "IgmpAccessListCount", "IgmpSnoop", "IpEpgCount", "IsisCount", "L2Multicast", "LeafCount", "MaintenanceModeCount", "ManagementOverV6Count", "Nir", "OpflexKubernetesCount", "OspfCount", "PoeCount", "QinVniTunnelCount", "RemoteLeafCount", "ScvmmCount", "SharedL3OutCount", "SiteName", "SmartCallHome", "Snmp", "SpineCount", "SshOverV6Count", "SyslogOverV6Count", "TenantCount", "TierTwoLeafCount", "Twamp", "Useg", "VpodCount", "RegisteredDevice")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AccountMoid"))) { #optional property not found
            $AccountMoid = $null
        } else {
            $AccountMoid = $JsonParameters.PSobject.Properties["AccountMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CreateTime"))) { #optional property not found
            $CreateTime = $null
        } else {
            $CreateTime = $JsonParameters.PSobject.Properties["CreateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DomainGroupMoid"))) { #optional property not found
            $DomainGroupMoid = $null
        } else {
            $DomainGroupMoid = $JsonParameters.PSobject.Properties["DomainGroupMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ModTime"))) { #optional property not found
            $ModTime = $null
        } else {
            $ModTime = $JsonParameters.PSobject.Properties["ModTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Moid"))) { #optional property not found
            $Moid = $null
        } else {
            $Moid = $JsonParameters.PSobject.Properties["Moid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Owners"))) { #optional property not found
            $Owners = $null
        } else {
            $Owners = $JsonParameters.PSobject.Properties["Owners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SharedScope"))) { #optional property not found
            $SharedScope = $null
        } else {
            $SharedScope = $JsonParameters.PSobject.Properties["SharedScope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["Tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VersionContext"))) { #optional property not found
            $VersionContext = $null
        } else {
            $VersionContext = $JsonParameters.PSobject.Properties["VersionContext"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ancestors"))) { #optional property not found
            $Ancestors = $null
        } else {
            $Ancestors = $JsonParameters.PSobject.Properties["Ancestors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["Parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PermissionResources"))) { #optional property not found
            $PermissionResources = $null
        } else {
            $PermissionResources = $JsonParameters.PSobject.Properties["PermissionResources"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DisplayNames"))) { #optional property not found
            $DisplayNames = $null
        } else {
            $DisplayNames = $JsonParameters.PSobject.Properties["DisplayNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ApicCount"))) { #optional property not found
            $ApicCount = $null
        } else {
            $ApicCount = $JsonParameters.PSobject.Properties["ApicCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AppCenterCount"))) { #optional property not found
            $AppCenterCount = $null
        } else {
            $AppCenterCount = $JsonParameters.PSobject.Properties["AppCenterCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ave"))) { #optional property not found
            $Ave = $null
        } else {
            $Ave = $JsonParameters.PSobject.Properties["Ave"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BdCount"))) { #optional property not found
            $BdCount = $null
        } else {
            $BdCount = $JsonParameters.PSobject.Properties["BdCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ConsistencyCheckerApp"))) { #optional property not found
            $ConsistencyCheckerApp = $null
        } else {
            $ConsistencyCheckerApp = $JsonParameters.PSobject.Properties["ConsistencyCheckerApp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ContractCount"))) { #optional property not found
            $ContractCount = $null
        } else {
            $ContractCount = $JsonParameters.PSobject.Properties["ContractCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DnsCount"))) { #optional property not found
            $DnsCount = $null
        } else {
            $DnsCount = $JsonParameters.PSobject.Properties["DnsCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EigrpCount"))) { #optional property not found
            $EigrpCount = $null
        } else {
            $EigrpCount = $JsonParameters.PSobject.Properties["EigrpCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EpgCount"))) { #optional property not found
            $EpgCount = $null
        } else {
            $EpgCount = $JsonParameters.PSobject.Properties["EpgCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HsrpCount"))) { #optional property not found
            $HsrpCount = $null
        } else {
            $HsrpCount = $JsonParameters.PSobject.Properties["HsrpCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IbgpCount"))) { #optional property not found
            $IbgpCount = $null
        } else {
            $IbgpCount = $JsonParameters.PSobject.Properties["IbgpCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IgmpAccessListCount"))) { #optional property not found
            $IgmpAccessListCount = $null
        } else {
            $IgmpAccessListCount = $JsonParameters.PSobject.Properties["IgmpAccessListCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IgmpSnoop"))) { #optional property not found
            $IgmpSnoop = $null
        } else {
            $IgmpSnoop = $JsonParameters.PSobject.Properties["IgmpSnoop"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IpEpgCount"))) { #optional property not found
            $IpEpgCount = $null
        } else {
            $IpEpgCount = $JsonParameters.PSobject.Properties["IpEpgCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IsisCount"))) { #optional property not found
            $IsisCount = $null
        } else {
            $IsisCount = $JsonParameters.PSobject.Properties["IsisCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "L2Multicast"))) { #optional property not found
            $L2Multicast = $null
        } else {
            $L2Multicast = $JsonParameters.PSobject.Properties["L2Multicast"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LeafCount"))) { #optional property not found
            $LeafCount = $null
        } else {
            $LeafCount = $JsonParameters.PSobject.Properties["LeafCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MaintenanceModeCount"))) { #optional property not found
            $MaintenanceModeCount = $null
        } else {
            $MaintenanceModeCount = $JsonParameters.PSobject.Properties["MaintenanceModeCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ManagementOverV6Count"))) { #optional property not found
            $ManagementOverV6Count = $null
        } else {
            $ManagementOverV6Count = $JsonParameters.PSobject.Properties["ManagementOverV6Count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Nir"))) { #optional property not found
            $Nir = $null
        } else {
            $Nir = $JsonParameters.PSobject.Properties["Nir"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OpflexKubernetesCount"))) { #optional property not found
            $OpflexKubernetesCount = $null
        } else {
            $OpflexKubernetesCount = $JsonParameters.PSobject.Properties["OpflexKubernetesCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OspfCount"))) { #optional property not found
            $OspfCount = $null
        } else {
            $OspfCount = $JsonParameters.PSobject.Properties["OspfCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PoeCount"))) { #optional property not found
            $PoeCount = $null
        } else {
            $PoeCount = $JsonParameters.PSobject.Properties["PoeCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QinVniTunnelCount"))) { #optional property not found
            $QinVniTunnelCount = $null
        } else {
            $QinVniTunnelCount = $JsonParameters.PSobject.Properties["QinVniTunnelCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RemoteLeafCount"))) { #optional property not found
            $RemoteLeafCount = $null
        } else {
            $RemoteLeafCount = $JsonParameters.PSobject.Properties["RemoteLeafCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ScvmmCount"))) { #optional property not found
            $ScvmmCount = $null
        } else {
            $ScvmmCount = $JsonParameters.PSobject.Properties["ScvmmCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SharedL3OutCount"))) { #optional property not found
            $SharedL3OutCount = $null
        } else {
            $SharedL3OutCount = $JsonParameters.PSobject.Properties["SharedL3OutCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SiteName"))) { #optional property not found
            $SiteName = $null
        } else {
            $SiteName = $JsonParameters.PSobject.Properties["SiteName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SmartCallHome"))) { #optional property not found
            $SmartCallHome = $null
        } else {
            $SmartCallHome = $JsonParameters.PSobject.Properties["SmartCallHome"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Snmp"))) { #optional property not found
            $Snmp = $null
        } else {
            $Snmp = $JsonParameters.PSobject.Properties["Snmp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SpineCount"))) { #optional property not found
            $SpineCount = $null
        } else {
            $SpineCount = $JsonParameters.PSobject.Properties["SpineCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SshOverV6Count"))) { #optional property not found
            $SshOverV6Count = $null
        } else {
            $SshOverV6Count = $JsonParameters.PSobject.Properties["SshOverV6Count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SyslogOverV6Count"))) { #optional property not found
            $SyslogOverV6Count = $null
        } else {
            $SyslogOverV6Count = $JsonParameters.PSobject.Properties["SyslogOverV6Count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TenantCount"))) { #optional property not found
            $TenantCount = $null
        } else {
            $TenantCount = $JsonParameters.PSobject.Properties["TenantCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TierTwoLeafCount"))) { #optional property not found
            $TierTwoLeafCount = $null
        } else {
            $TierTwoLeafCount = $JsonParameters.PSobject.Properties["TierTwoLeafCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Twamp"))) { #optional property not found
            $Twamp = $null
        } else {
            $Twamp = $JsonParameters.PSobject.Properties["Twamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Useg"))) { #optional property not found
            $Useg = $null
        } else {
            $Useg = $JsonParameters.PSobject.Properties["Useg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VpodCount"))) { #optional property not found
            $VpodCount = $null
        } else {
            $VpodCount = $JsonParameters.PSobject.Properties["VpodCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RegisteredDevice"))) { #optional property not found
            $RegisteredDevice = $null
        } else {
            $RegisteredDevice = $JsonParameters.PSobject.Properties["RegisteredDevice"].value
        }

        $PSO = [PSCustomObject]@{
            "AccountMoid" = ${AccountMoid}
            "ClassId" = ${ClassId}
            "CreateTime" = ${CreateTime}
            "DomainGroupMoid" = ${DomainGroupMoid}
            "ModTime" = ${ModTime}
            "Moid" = ${Moid}
            "ObjectType" = ${ObjectType}
            "Owners" = ${Owners}
            "SharedScope" = ${SharedScope}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Ancestors" = ${Ancestors}
            "Parent" = ${Parent}
            "PermissionResources" = ${PermissionResources}
            "DisplayNames" = ${DisplayNames}
            "ApicCount" = ${ApicCount}
            "AppCenterCount" = ${AppCenterCount}
            "Ave" = ${Ave}
            "BdCount" = ${BdCount}
            "ConsistencyCheckerApp" = ${ConsistencyCheckerApp}
            "ContractCount" = ${ContractCount}
            "DnsCount" = ${DnsCount}
            "EigrpCount" = ${EigrpCount}
            "EpgCount" = ${EpgCount}
            "HsrpCount" = ${HsrpCount}
            "IbgpCount" = ${IbgpCount}
            "IgmpAccessListCount" = ${IgmpAccessListCount}
            "IgmpSnoop" = ${IgmpSnoop}
            "IpEpgCount" = ${IpEpgCount}
            "IsisCount" = ${IsisCount}
            "L2Multicast" = ${L2Multicast}
            "LeafCount" = ${LeafCount}
            "MaintenanceModeCount" = ${MaintenanceModeCount}
            "ManagementOverV6Count" = ${ManagementOverV6Count}
            "Nir" = ${Nir}
            "OpflexKubernetesCount" = ${OpflexKubernetesCount}
            "OspfCount" = ${OspfCount}
            "PoeCount" = ${PoeCount}
            "QinVniTunnelCount" = ${QinVniTunnelCount}
            "RemoteLeafCount" = ${RemoteLeafCount}
            "ScvmmCount" = ${ScvmmCount}
            "SharedL3OutCount" = ${SharedL3OutCount}
            "SiteName" = ${SiteName}
            "SmartCallHome" = ${SmartCallHome}
            "Snmp" = ${Snmp}
            "SpineCount" = ${SpineCount}
            "SshOverV6Count" = ${SshOverV6Count}
            "SyslogOverV6Count" = ${SyslogOverV6Count}
            "TenantCount" = ${TenantCount}
            "TierTwoLeafCount" = ${TierTwoLeafCount}
            "Twamp" = ${Twamp}
            "Useg" = ${Useg}
            "VpodCount" = ${VpodCount}
            "RegisteredDevice" = ${RegisteredDevice}
        }

        return $PSO
    }

}

