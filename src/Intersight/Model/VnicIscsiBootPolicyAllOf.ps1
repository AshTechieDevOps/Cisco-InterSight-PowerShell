#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'vnic.IscsiBootPolicy', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER AutoTargetvendorName
Auto target interface that is represented via the Initiator name or the DHCP vendor ID. The vendor ID can be up to 32 alphanumeric characters.
.PARAMETER Chap
No description available.
.PARAMETER InitiatorIpSource
Source Type of Initiator IP Address - Auto/Static/Pool. * `None` - Type defines that property is not applicable for an interface. * `Auto` - The system selects an interface automatically - DHCP. * `Static` - Type represents that static information or properties are associated to an interface. * `Pool` - Type defines that property value will be fetched from an associated pool.
.PARAMETER InitiatorStaticIpV4Address
Static IP address provided for iSCSI Initiator.
.PARAMETER InitiatorStaticIpV4Config
No description available.
.PARAMETER MutualChap
No description available.
.PARAMETER TargetSourceType
Source Type of Targets - Auto/Static. * `None` - Type defines that property is not applicable for an interface. * `Auto` - The system selects an interface automatically - DHCP. * `Static` - Type represents that static information or properties are associated to an interface. * `Pool` - Type defines that property value will be fetched from an associated pool.
.PARAMETER InitiatorIpPool
No description available.
.PARAMETER IscsiAdapterPolicy
No description available.
.PARAMETER Organization
No description available.
.PARAMETER PrimaryTargetPolicy
No description available.
.PARAMETER SecondaryTargetPolicy
No description available.
.OUTPUTS

VnicIscsiBootPolicyAllOf<PSCustomObject>
#>

function Initialize-IntersightVnicIscsiBootPolicyAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("vnic.IscsiBootPolicy")]
        [String]
        ${ClassId} = "vnic.IscsiBootPolicy",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("vnic.IscsiBootPolicy")]
        [String]
        ${ObjectType} = "vnic.IscsiBootPolicy",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AutoTargetvendorName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Chap},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("None", "Auto", "Static", "Pool")]
        [String]
        ${InitiatorIpSource} = "None",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$")]
        [String]
        ${InitiatorStaticIpV4Address},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InitiatorStaticIpV4Config},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MutualChap},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("None", "Auto", "Static", "Pool")]
        [String]
        ${TargetSourceType} = "None",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InitiatorIpPool},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IscsiAdapterPolicy},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Organization},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrimaryTargetPolicy},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SecondaryTargetPolicy}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightVnicIscsiBootPolicyAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AutoTargetvendorName" = ${AutoTargetvendorName}
            "Chap" = ${Chap}
            "InitiatorIpSource" = ${InitiatorIpSource}
            "InitiatorStaticIpV4Address" = ${InitiatorStaticIpV4Address}
            "InitiatorStaticIpV4Config" = ${InitiatorStaticIpV4Config}
            "MutualChap" = ${MutualChap}
            "TargetSourceType" = ${TargetSourceType}
            "InitiatorIpPool" = ${InitiatorIpPool}
            "IscsiAdapterPolicy" = ${IscsiAdapterPolicy}
            "Organization" = ${Organization}
            "PrimaryTargetPolicy" = ${PrimaryTargetPolicy}
            "SecondaryTargetPolicy" = ${SecondaryTargetPolicy}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VnicIscsiBootPolicyAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to VnicIscsiBootPolicyAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VnicIscsiBootPolicyAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToVnicIscsiBootPolicyAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightVnicIscsiBootPolicyAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightVnicIscsiBootPolicyAllOf
        $AllProperties = ("ClassId", "ObjectType", "AutoTargetvendorName", "Chap", "InitiatorIpSource", "InitiatorStaticIpV4Address", "InitiatorStaticIpV4Config", "MutualChap", "TargetSourceType", "InitiatorIpPool", "IscsiAdapterPolicy", "Organization", "PrimaryTargetPolicy", "SecondaryTargetPolicy")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AutoTargetvendorName"))) { #optional property not found
            $AutoTargetvendorName = $null
        } else {
            $AutoTargetvendorName = $JsonParameters.PSobject.Properties["AutoTargetvendorName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Chap"))) { #optional property not found
            $Chap = $null
        } else {
            $Chap = $JsonParameters.PSobject.Properties["Chap"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InitiatorIpSource"))) { #optional property not found
            $InitiatorIpSource = $null
        } else {
            $InitiatorIpSource = $JsonParameters.PSobject.Properties["InitiatorIpSource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InitiatorStaticIpV4Address"))) { #optional property not found
            $InitiatorStaticIpV4Address = $null
        } else {
            $InitiatorStaticIpV4Address = $JsonParameters.PSobject.Properties["InitiatorStaticIpV4Address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InitiatorStaticIpV4Config"))) { #optional property not found
            $InitiatorStaticIpV4Config = $null
        } else {
            $InitiatorStaticIpV4Config = $JsonParameters.PSobject.Properties["InitiatorStaticIpV4Config"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MutualChap"))) { #optional property not found
            $MutualChap = $null
        } else {
            $MutualChap = $JsonParameters.PSobject.Properties["MutualChap"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TargetSourceType"))) { #optional property not found
            $TargetSourceType = $null
        } else {
            $TargetSourceType = $JsonParameters.PSobject.Properties["TargetSourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InitiatorIpPool"))) { #optional property not found
            $InitiatorIpPool = $null
        } else {
            $InitiatorIpPool = $JsonParameters.PSobject.Properties["InitiatorIpPool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IscsiAdapterPolicy"))) { #optional property not found
            $IscsiAdapterPolicy = $null
        } else {
            $IscsiAdapterPolicy = $JsonParameters.PSobject.Properties["IscsiAdapterPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Organization"))) { #optional property not found
            $Organization = $null
        } else {
            $Organization = $JsonParameters.PSobject.Properties["Organization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PrimaryTargetPolicy"))) { #optional property not found
            $PrimaryTargetPolicy = $null
        } else {
            $PrimaryTargetPolicy = $JsonParameters.PSobject.Properties["PrimaryTargetPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SecondaryTargetPolicy"))) { #optional property not found
            $SecondaryTargetPolicy = $null
        } else {
            $SecondaryTargetPolicy = $JsonParameters.PSobject.Properties["SecondaryTargetPolicy"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AutoTargetvendorName" = ${AutoTargetvendorName}
            "Chap" = ${Chap}
            "InitiatorIpSource" = ${InitiatorIpSource}
            "InitiatorStaticIpV4Address" = ${InitiatorStaticIpV4Address}
            "InitiatorStaticIpV4Config" = ${InitiatorStaticIpV4Config}
            "MutualChap" = ${MutualChap}
            "TargetSourceType" = ${TargetSourceType}
            "InitiatorIpPool" = ${InitiatorIpPool}
            "IscsiAdapterPolicy" = ${IscsiAdapterPolicy}
            "Organization" = ${Organization}
            "PrimaryTargetPolicy" = ${PrimaryTargetPolicy}
            "SecondaryTargetPolicy" = ${SecondaryTargetPolicy}
        }

        return $PSO
    }

}

