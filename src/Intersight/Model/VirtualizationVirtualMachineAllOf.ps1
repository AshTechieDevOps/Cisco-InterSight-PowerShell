#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'virtualization.VirtualMachine', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER Action
Action to be performed on a virtual machine (Create, PowerState, Migrate, Clone etc). * `None` - A place holder for the default value. * `PowerState` - Power action is performed on the virtual machine. * `Migrate` - The virtual machine will be migrated from existing node to a different node in cluster. The behavior depends on the underlying hypervisor. * `Create` - The virtual machine will be created on the specified hypervisor. This action is also useful if the virtual machine creation failed during first POST operation on VirtualMachine managed object. User can set this action to retry the virtual machine creation. * `Delete` - The virtual machine will be deleted from the specified hypervisor. User can either set this action or can do a DELETE operation on the VirtualMachine managed object.
.PARAMETER ActionInfo
No description available.
.PARAMETER AffinitySelectors
No description available.
.PARAMETER AntiAffinitySelectors
No description available.
.PARAMETER CloudInitConfig
No description available.
.PARAMETER ClusterEsxi
Cluster where virtual machine is deployed.
.PARAMETER Cpu
Number of vCPUs allocated to virtual machine.
.PARAMETER Disk
No description available.
.PARAMETER GuestOs
Guest operating system running on virtual machine. * `linux` - A Linux operating system. * `windows` - A Windows operating system.
.PARAMETER HostEsxi
Host where virtual machine is deployed.
.PARAMETER Interfaces
No description available.
.PARAMETER Labels
No description available.
.PARAMETER Memory
Virtual machine memory defined in mega bytes.
.PARAMETER Name
Virtual machine name contains only letters, numbers, allowed special character and must be unique.
.PARAMETER PowerState
Expected power state of virtual machine (PowerOn, PowerOff, Restart). * `PowerOff` - The virtual machine will be powered off if it is already not in powered off state. If it is already powered off, no side-effects are expected. * `PowerOn` - The virtual machine will be powered on if it is already not in powered on state. If it is already powered on, no side-effects are expected. * `Suspend` - The virtual machine will be put into  a suspended state. * `ShutDownGuestOS` - The guest operating system is shut down gracefully. * `RestartGuestOS` - It can either act as a reset switch and abruptly reset the guest operating system, or it can send a restart signal to the guest operating system so that it shuts down gracefully and restarts. * `Reset` - Resets the virtual machine abruptly, with no consideration for work in progress. * `Restart` - The virtual machine will be restarted only if it is in powered on state. If it is powered off, it will not be started up. * `Unknown` - Power state of the entity is unknown.
.PARAMETER ProvisionType
Identifies the provision type to create a new virtual machine. * `OVA` - Deploy virtual machine using OVA/F file. * `Template` - Provision virtual machine using a template file.
.PARAMETER VmConfig
No description available.
.PARAMETER Var0VirtualMachineNodeProfile
No description available.
.PARAMETER Cluster
No description available.
.PARAMETER VarHost
No description available.
.PARAMETER Inventory
No description available.
.PARAMETER RegisteredDevice
No description available.
.PARAMETER WorkflowInfo
No description available.
.OUTPUTS

VirtualizationVirtualMachineAllOf<PSCustomObject>
#>

function Initialize-IntersightVirtualizationVirtualMachineAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("virtualization.VirtualMachine")]
        [String]
        ${ClassId} = "virtualization.VirtualMachine",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("virtualization.VirtualMachine")]
        [String]
        ${ObjectType} = "virtualization.VirtualMachine",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("None", "PowerState", "Migrate", "Create", "Delete")]
        [String]
        ${Action} = "None",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ActionInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AffinitySelectors},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AntiAffinitySelectors},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CloudInitConfig},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClusterEsxi},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Cpu},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Disk},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("linux", "windows")]
        [String]
        ${GuestOs} = "linux",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostEsxi},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Interfaces},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Labels},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Memory},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9-]{3,48}$")]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PowerOff", "PowerOn", "Suspend", "ShutDownGuestOS", "RestartGuestOS", "Reset", "Restart", "Unknown")]
        [String]
        ${PowerState} = "PowerOff",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("OVA", "Template")]
        [String]
        ${ProvisionType} = "OVA",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VmConfig},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Var0VirtualMachineNodeProfile},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cluster},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarHost},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Inventory},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RegisteredDevice},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WorkflowInfo}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightVirtualizationVirtualMachineAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        if ($Cpu -and $Cpu -gt 40) {
          throw "invalid value for 'Cpu', must be smaller than or equal to 40."
        }

        if ($Cpu -and $Cpu -lt 1) {
          throw "invalid value for 'Cpu', must be greater than or equal to 1."
        }

        if ($Memory -and $Memory -gt 4177920) {
          throw "invalid value for 'Memory', must be smaller than or equal to 4177920."
        }

        if ($Memory -and $Memory -lt 1) {
          throw "invalid value for 'Memory', must be greater than or equal to 1."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Action" = ${Action}
            "ActionInfo" = ${ActionInfo}
            "AffinitySelectors" = ${AffinitySelectors}
            "AntiAffinitySelectors" = ${AntiAffinitySelectors}
            "CloudInitConfig" = ${CloudInitConfig}
            "ClusterEsxi" = ${ClusterEsxi}
            "Cpu" = ${Cpu}
            "Disk" = ${Disk}
            "GuestOs" = ${GuestOs}
            "HostEsxi" = ${HostEsxi}
            "Interfaces" = ${Interfaces}
            "Labels" = ${Labels}
            "Memory" = ${Memory}
            "Name" = ${Name}
            "PowerState" = ${PowerState}
            "ProvisionType" = ${ProvisionType}
            "VmConfig" = ${VmConfig}
            "_0_VirtualMachineNodeProfile" = ${Var0VirtualMachineNodeProfile}
            "Cluster" = ${Cluster}
            "Host" = ${VarHost}
            "Inventory" = ${Inventory}
            "RegisteredDevice" = ${RegisteredDevice}
            "WorkflowInfo" = ${WorkflowInfo}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VirtualizationVirtualMachineAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to VirtualizationVirtualMachineAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VirtualizationVirtualMachineAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToVirtualizationVirtualMachineAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightVirtualizationVirtualMachineAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightVirtualizationVirtualMachineAllOf
        $AllProperties = ("ClassId", "ObjectType", "Action", "ActionInfo", "AffinitySelectors", "AntiAffinitySelectors", "CloudInitConfig", "ClusterEsxi", "Cpu", "Discovered", "Disk", "GuestOs", "HostEsxi", "HypervisorType", "Interfaces", "Labels", "Memory", "Name", "PowerState", "ProvisionType", "VmConfig", "_0_VirtualMachineNodeProfile", "Cluster", "Host", "Inventory", "RegisteredDevice", "WorkflowInfo")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Action"))) { #optional property not found
            $Action = $null
        } else {
            $Action = $JsonParameters.PSobject.Properties["Action"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ActionInfo"))) { #optional property not found
            $ActionInfo = $null
        } else {
            $ActionInfo = $JsonParameters.PSobject.Properties["ActionInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AffinitySelectors"))) { #optional property not found
            $AffinitySelectors = $null
        } else {
            $AffinitySelectors = $JsonParameters.PSobject.Properties["AffinitySelectors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AntiAffinitySelectors"))) { #optional property not found
            $AntiAffinitySelectors = $null
        } else {
            $AntiAffinitySelectors = $JsonParameters.PSobject.Properties["AntiAffinitySelectors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CloudInitConfig"))) { #optional property not found
            $CloudInitConfig = $null
        } else {
            $CloudInitConfig = $JsonParameters.PSobject.Properties["CloudInitConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClusterEsxi"))) { #optional property not found
            $ClusterEsxi = $null
        } else {
            $ClusterEsxi = $JsonParameters.PSobject.Properties["ClusterEsxi"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Cpu"))) { #optional property not found
            $Cpu = $null
        } else {
            $Cpu = $JsonParameters.PSobject.Properties["Cpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Discovered"))) { #optional property not found
            $Discovered = $null
        } else {
            $Discovered = $JsonParameters.PSobject.Properties["Discovered"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Disk"))) { #optional property not found
            $Disk = $null
        } else {
            $Disk = $JsonParameters.PSobject.Properties["Disk"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "GuestOs"))) { #optional property not found
            $GuestOs = $null
        } else {
            $GuestOs = $JsonParameters.PSobject.Properties["GuestOs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HostEsxi"))) { #optional property not found
            $HostEsxi = $null
        } else {
            $HostEsxi = $JsonParameters.PSobject.Properties["HostEsxi"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HypervisorType"))) { #optional property not found
            $HypervisorType = $null
        } else {
            $HypervisorType = $JsonParameters.PSobject.Properties["HypervisorType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Interfaces"))) { #optional property not found
            $Interfaces = $null
        } else {
            $Interfaces = $JsonParameters.PSobject.Properties["Interfaces"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["Labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Memory"))) { #optional property not found
            $Memory = $null
        } else {
            $Memory = $JsonParameters.PSobject.Properties["Memory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PowerState"))) { #optional property not found
            $PowerState = $null
        } else {
            $PowerState = $JsonParameters.PSobject.Properties["PowerState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProvisionType"))) { #optional property not found
            $ProvisionType = $null
        } else {
            $ProvisionType = $JsonParameters.PSobject.Properties["ProvisionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VmConfig"))) { #optional property not found
            $VmConfig = $null
        } else {
            $VmConfig = $JsonParameters.PSobject.Properties["VmConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_0_VirtualMachineNodeProfile"))) { #optional property not found
            $Var0VirtualMachineNodeProfile = $null
        } else {
            $Var0VirtualMachineNodeProfile = $JsonParameters.PSobject.Properties["_0_VirtualMachineNodeProfile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Cluster"))) { #optional property not found
            $Cluster = $null
        } else {
            $Cluster = $JsonParameters.PSobject.Properties["Cluster"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Host"))) { #optional property not found
            $VarHost = $null
        } else {
            $VarHost = $JsonParameters.PSobject.Properties["Host"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Inventory"))) { #optional property not found
            $Inventory = $null
        } else {
            $Inventory = $JsonParameters.PSobject.Properties["Inventory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RegisteredDevice"))) { #optional property not found
            $RegisteredDevice = $null
        } else {
            $RegisteredDevice = $JsonParameters.PSobject.Properties["RegisteredDevice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "WorkflowInfo"))) { #optional property not found
            $WorkflowInfo = $null
        } else {
            $WorkflowInfo = $JsonParameters.PSobject.Properties["WorkflowInfo"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Action" = ${Action}
            "ActionInfo" = ${ActionInfo}
            "AffinitySelectors" = ${AffinitySelectors}
            "AntiAffinitySelectors" = ${AntiAffinitySelectors}
            "CloudInitConfig" = ${CloudInitConfig}
            "ClusterEsxi" = ${ClusterEsxi}
            "Cpu" = ${Cpu}
            "Discovered" = ${Discovered}
            "Disk" = ${Disk}
            "GuestOs" = ${GuestOs}
            "HostEsxi" = ${HostEsxi}
            "HypervisorType" = ${HypervisorType}
            "Interfaces" = ${Interfaces}
            "Labels" = ${Labels}
            "Memory" = ${Memory}
            "Name" = ${Name}
            "PowerState" = ${PowerState}
            "ProvisionType" = ${ProvisionType}
            "VmConfig" = ${VmConfig}
            "_0_VirtualMachineNodeProfile" = ${Var0VirtualMachineNodeProfile}
            "Cluster" = ${Cluster}
            "Host" = ${VarHost}
            "Inventory" = ${Inventory}
            "RegisteredDevice" = ${RegisteredDevice}
            "WorkflowInfo" = ${WorkflowInfo}
        }

        return $PSO
    }

}

