#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'kubernetes.AciCniProfile', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER AaepName
Name of ACI AAEP (Attachable Access Entity Profile) to be used for all Kubernetes clusters using this policy.
.PARAMETER ExtSvcDynSubnetStart
Start of range of IP subnets for external services with dynamic IP allocation for use by Kubernetes clusters using this ACI CNI policy.
.PARAMETER ExtSvcStaticSubnetStart
Start of range of IP subnets for external services with static IP allocation for use by Kubernetes clusters using this ACI CNI policy.
.PARAMETER L3OutNetworkName
Name of ACI L3Out network to be used for all Kubernetes clusters using this policy.
.PARAMETER L3OutPolicyName
Name of ACI L3Out policy to be used for all Kubernetes clusters using this policy.
.PARAMETER L3OutTenant
Tenant in ACI used by this L3Out and Common VRF.
.PARAMETER NestedVmmDomain
VMM domain within which Kubernetes clusters using this policy are nested.
.PARAMETER NodeSvcSubnetStart
Start of range of ACI Node Service IP subnets to use by Kubernetes clusters using this ACI CNI policy This is used for the service graph which is used for ACI PBR based load balancing.
.PARAMETER NodeVlanRangeEnd
Ending value of VLAN range used to assign Node VLAN Ids for each Kubernetes cluster using this policy.
.PARAMETER NodeVlanRangeStart
Starting value of VLAN range used to assign Node VLAN Ids for each Kubernetes cluster using this policy.
.PARAMETER OpflexMulticastAddressRange
Range of IP Multicast addresses to be used by the Opflex protocol for Kubernetes clusters using this policy.
.PARAMETER PodSubnetStart
Start of range of Kubernetes pod IP subnets to use by Kubernetes clusters using this ACI CNI policy This should be a /8 IP subnet so that multiple /16 subnets can be assigned for pod subnets of Kubernetes clusters using this profile.
.PARAMETER Vrf
VRF (Virtual Routing and Forwarding) domain to be used within ACI fabric by all k8s clusters using this policy.
.PARAMETER Organization
No description available.
.PARAMETER RegisteredDevice
No description available.
.OUTPUTS

KubernetesAciCniProfileAllOf<PSCustomObject>
#>

function Initialize-IntersightKubernetesAciCniProfileAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("kubernetes.AciCniProfile")]
        [String]
        ${ClassId} = "kubernetes.AciCniProfile",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("kubernetes.AciCniProfile")]
        [String]
        ${ObjectType} = "kubernetes.AciCniProfile",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$")]
        [String]
        ${AaepName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[1-2][0-9]|3[0-2])$")]
        [String]
        ${ExtSvcDynSubnetStart},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[1-2][0-9]|3[0-2])$")]
        [String]
        ${ExtSvcStaticSubnetStart},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$")]
        [String]
        ${L3OutNetworkName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$")]
        [String]
        ${L3OutPolicyName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$")]
        [String]
        ${L3OutTenant},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$")]
        [String]
        ${NestedVmmDomain},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[1-2][0-9]|3[0-2])$")]
        [String]
        ${NodeSvcSubnetStart},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NodeVlanRangeEnd},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NodeVlanRangeStart},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[1-2][0-9]|3[0-2])$")]
        [String]
        ${OpflexMulticastAddressRange},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([0-9]|[1-2][0-9]|3[0-2])$")]
        [String]
        ${PodSubnetStart},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$")]
        [String]
        ${Vrf},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Organization},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RegisteredDevice}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightKubernetesAciCniProfileAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AaepName" = ${AaepName}
            "ExtSvcDynSubnetStart" = ${ExtSvcDynSubnetStart}
            "ExtSvcStaticSubnetStart" = ${ExtSvcStaticSubnetStart}
            "L3OutNetworkName" = ${L3OutNetworkName}
            "L3OutPolicyName" = ${L3OutPolicyName}
            "L3OutTenant" = ${L3OutTenant}
            "NestedVmmDomain" = ${NestedVmmDomain}
            "NodeSvcSubnetStart" = ${NodeSvcSubnetStart}
            "NodeVlanRangeEnd" = ${NodeVlanRangeEnd}
            "NodeVlanRangeStart" = ${NodeVlanRangeStart}
            "OpflexMulticastAddressRange" = ${OpflexMulticastAddressRange}
            "PodSubnetStart" = ${PodSubnetStart}
            "Vrf" = ${Vrf}
            "Organization" = ${Organization}
            "RegisteredDevice" = ${RegisteredDevice}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to KubernetesAciCniProfileAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to KubernetesAciCniProfileAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

KubernetesAciCniProfileAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToKubernetesAciCniProfileAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightKubernetesAciCniProfileAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightKubernetesAciCniProfileAllOf
        $AllProperties = ("ClassId", "ObjectType", "AaepName", "ExtSvcDynSubnetStart", "ExtSvcStaticSubnetStart", "InfraVlanId", "L3OutNetworkName", "L3OutPolicyName", "L3OutTenant", "NestedVmmDomain", "NodeSvcSubnetStart", "NodeVlanRangeEnd", "NodeVlanRangeStart", "NumberOfKubernetesClusters", "OpflexMulticastAddressRange", "PodSubnetStart", "SvcSubnetStart", "Vrf", "ClusterAciAllocations", "ClusterProfiles", "Organization", "RegisteredDevice")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AaepName"))) { #optional property not found
            $AaepName = $null
        } else {
            $AaepName = $JsonParameters.PSobject.Properties["AaepName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExtSvcDynSubnetStart"))) { #optional property not found
            $ExtSvcDynSubnetStart = $null
        } else {
            $ExtSvcDynSubnetStart = $JsonParameters.PSobject.Properties["ExtSvcDynSubnetStart"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExtSvcStaticSubnetStart"))) { #optional property not found
            $ExtSvcStaticSubnetStart = $null
        } else {
            $ExtSvcStaticSubnetStart = $JsonParameters.PSobject.Properties["ExtSvcStaticSubnetStart"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InfraVlanId"))) { #optional property not found
            $InfraVlanId = $null
        } else {
            $InfraVlanId = $JsonParameters.PSobject.Properties["InfraVlanId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "L3OutNetworkName"))) { #optional property not found
            $L3OutNetworkName = $null
        } else {
            $L3OutNetworkName = $JsonParameters.PSobject.Properties["L3OutNetworkName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "L3OutPolicyName"))) { #optional property not found
            $L3OutPolicyName = $null
        } else {
            $L3OutPolicyName = $JsonParameters.PSobject.Properties["L3OutPolicyName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "L3OutTenant"))) { #optional property not found
            $L3OutTenant = $null
        } else {
            $L3OutTenant = $JsonParameters.PSobject.Properties["L3OutTenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NestedVmmDomain"))) { #optional property not found
            $NestedVmmDomain = $null
        } else {
            $NestedVmmDomain = $JsonParameters.PSobject.Properties["NestedVmmDomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NodeSvcSubnetStart"))) { #optional property not found
            $NodeSvcSubnetStart = $null
        } else {
            $NodeSvcSubnetStart = $JsonParameters.PSobject.Properties["NodeSvcSubnetStart"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NodeVlanRangeEnd"))) { #optional property not found
            $NodeVlanRangeEnd = $null
        } else {
            $NodeVlanRangeEnd = $JsonParameters.PSobject.Properties["NodeVlanRangeEnd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NodeVlanRangeStart"))) { #optional property not found
            $NodeVlanRangeStart = $null
        } else {
            $NodeVlanRangeStart = $JsonParameters.PSobject.Properties["NodeVlanRangeStart"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NumberOfKubernetesClusters"))) { #optional property not found
            $NumberOfKubernetesClusters = $null
        } else {
            $NumberOfKubernetesClusters = $JsonParameters.PSobject.Properties["NumberOfKubernetesClusters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OpflexMulticastAddressRange"))) { #optional property not found
            $OpflexMulticastAddressRange = $null
        } else {
            $OpflexMulticastAddressRange = $JsonParameters.PSobject.Properties["OpflexMulticastAddressRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PodSubnetStart"))) { #optional property not found
            $PodSubnetStart = $null
        } else {
            $PodSubnetStart = $JsonParameters.PSobject.Properties["PodSubnetStart"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SvcSubnetStart"))) { #optional property not found
            $SvcSubnetStart = $null
        } else {
            $SvcSubnetStart = $JsonParameters.PSobject.Properties["SvcSubnetStart"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Vrf"))) { #optional property not found
            $Vrf = $null
        } else {
            $Vrf = $JsonParameters.PSobject.Properties["Vrf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClusterAciAllocations"))) { #optional property not found
            $ClusterAciAllocations = $null
        } else {
            $ClusterAciAllocations = $JsonParameters.PSobject.Properties["ClusterAciAllocations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClusterProfiles"))) { #optional property not found
            $ClusterProfiles = $null
        } else {
            $ClusterProfiles = $JsonParameters.PSobject.Properties["ClusterProfiles"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Organization"))) { #optional property not found
            $Organization = $null
        } else {
            $Organization = $JsonParameters.PSobject.Properties["Organization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RegisteredDevice"))) { #optional property not found
            $RegisteredDevice = $null
        } else {
            $RegisteredDevice = $JsonParameters.PSobject.Properties["RegisteredDevice"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AaepName" = ${AaepName}
            "ExtSvcDynSubnetStart" = ${ExtSvcDynSubnetStart}
            "ExtSvcStaticSubnetStart" = ${ExtSvcStaticSubnetStart}
            "InfraVlanId" = ${InfraVlanId}
            "L3OutNetworkName" = ${L3OutNetworkName}
            "L3OutPolicyName" = ${L3OutPolicyName}
            "L3OutTenant" = ${L3OutTenant}
            "NestedVmmDomain" = ${NestedVmmDomain}
            "NodeSvcSubnetStart" = ${NodeSvcSubnetStart}
            "NodeVlanRangeEnd" = ${NodeVlanRangeEnd}
            "NodeVlanRangeStart" = ${NodeVlanRangeStart}
            "NumberOfKubernetesClusters" = ${NumberOfKubernetesClusters}
            "OpflexMulticastAddressRange" = ${OpflexMulticastAddressRange}
            "PodSubnetStart" = ${PodSubnetStart}
            "SvcSubnetStart" = ${SvcSubnetStart}
            "Vrf" = ${Vrf}
            "ClusterAciAllocations" = ${ClusterAciAllocations}
            "ClusterProfiles" = ${ClusterProfiles}
            "Organization" = ${Organization}
            "RegisteredDevice" = ${RegisteredDevice}
        }

        return $PSO
    }

}

