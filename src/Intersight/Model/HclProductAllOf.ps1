#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'hcl.Product', excluding properties defined in parent classes.

.PARAMETER DriverNames
No description available.
.PARAMETER Firmwares
No description available.
.PARAMETER Id
Identifier of the product.
.PARAMETER Model
Model/PID of the product/adapter.
.PARAMETER Revision
Revision of the adapter model.
.PARAMETER Type
Type of the product/adapter say OCP, PT, GPU.
.PARAMETER Vendor
Vendor of the product or adapter.
.OUTPUTS

HclProductAllOf<PSCustomObject>
#>

function Initialize-IntersightHclProductAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DriverNames},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Firmwares},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Revision},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vendor}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightHclProductAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        
        $PSO = [PSCustomObject]@{
            "DriverNames" = ${DriverNames}
            "Firmwares" = ${Firmwares}
            "Id" = ${Id}
            "Model" = ${Model}
            "Revision" = ${Revision}
            "Type" = ${Type}
            "Vendor" = ${Vendor}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HclProductAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to HclProductAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HclProductAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToHclProductAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightHclProductAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightHclProductAllOf
        $AllProperties = ("DriverNames", "ErrorCode", "Firmwares", "Id", "Model", "Revision", "Type", "Vendor")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DriverNames"))) { #optional property not found
            $DriverNames = $null
        } else {
            $DriverNames = $JsonParameters.PSobject.Properties["DriverNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ErrorCode"))) { #optional property not found
            $ErrorCode = $null
        } else {
            $ErrorCode = $JsonParameters.PSobject.Properties["ErrorCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Firmwares"))) { #optional property not found
            $Firmwares = $null
        } else {
            $Firmwares = $JsonParameters.PSobject.Properties["Firmwares"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["Id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["Model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Revision"))) { #optional property not found
            $Revision = $null
        } else {
            $Revision = $JsonParameters.PSobject.Properties["Revision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["Type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Vendor"))) { #optional property not found
            $Vendor = $null
        } else {
            $Vendor = $JsonParameters.PSobject.Properties["Vendor"].value
        }

        $PSO = [PSCustomObject]@{
            "DriverNames" = ${DriverNames}
            "ErrorCode" = ${ErrorCode}
            "Firmwares" = ${Firmwares}
            "Id" = ${Id}
            "Model" = ${Model}
            "Revision" = ${Revision}
            "Type" = ${Type}
            "Vendor" = ${Vendor}
        }

        return $PSO
    }

}

