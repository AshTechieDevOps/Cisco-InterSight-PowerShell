#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Describes a standalone or FI-attached Rack-mounted server.

.PARAMETER Moid
The unique identifier of this Managed Object instance.
.PARAMETER Owners
No description available.
.PARAMETER Tags
No description available.
.PARAMETER VersionContext
No description available.
.PARAMETER Parent
No description available.
.PARAMETER BiosPostComplete
The BIOS POST completion status of the server.
.PARAMETER FaultSummary
The fault summary for the server.
.PARAMETER KvmIpAddresses
No description available.
.PARAMETER ManagementMode
The management mode of the server.
.PARAMETER MgmtIpAddress
Management address of the server.
.PARAMETER PlatformType
The platform type of the registered device - whether managed by UCSM or operating in standalone mode.
.PARAMETER MgmtIdentity
No description available.
.PARAMETER TopologyScanStatus
To maintain the Topology workflow run status.
.PARAMETER BiosBootmode
No description available.
.PARAMETER Bmc
No description available.
.PARAMETER Board
No description available.
.PARAMETER BootDeviceBootmode
No description available.
.PARAMETER GraphicsCards
An array of relationships to graphicsCard resources.
.PARAMETER InventoryDeviceInfo
No description available.
.PARAMETER LocatorLed
No description available.
.PARAMETER MemoryArrays
An array of relationships to memoryArray resources.
.PARAMETER Processors
An array of relationships to processorUnit resources.
.PARAMETER RackEnclosureSlot
No description available.
.PARAMETER RegisteredDevice
No description available.
.PARAMETER SasExpanders
An array of relationships to storageSasExpander resources.
.PARAMETER StorageControllers
An array of relationships to storageController resources.
.PARAMETER TopSystem
No description available.
.PARAMETER UemConnection
No description available.
.OUTPUTS

ComputeRackUnit<PSCustomObject>
#>

function Initialize-IntersightComputeRackUnit {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Moid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Owners},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VersionContext},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${BiosPostComplete},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FaultSummary},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${KvmIpAddresses},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("IntersightStandalone", "UCSM", "Intersight")]
        [String]
        ${ManagementMode} = "IntersightStandalone",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MgmtIpAddress},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PlatformType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MgmtIdentity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TopologyScanStatus},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BiosBootmode},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Bmc},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Board},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BootDeviceBootmode},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${GraphicsCards},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InventoryDeviceInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LocatorLed},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${MemoryArrays},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Processors},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RackEnclosureSlot},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RegisteredDevice},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SasExpanders},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${StorageControllers},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TopSystem},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UemConnection}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightComputeRackUnit' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        
        $PSO = [PSCustomObject]@{
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Parent" = ${Parent}
            "BiosPostComplete" = ${BiosPostComplete}
            "FaultSummary" = ${FaultSummary}
            "KvmIpAddresses" = ${KvmIpAddresses}
            "ManagementMode" = ${ManagementMode}
            "MgmtIpAddress" = ${MgmtIpAddress}
            "PlatformType" = ${PlatformType}
            "MgmtIdentity" = ${MgmtIdentity}
            "TopologyScanStatus" = ${TopologyScanStatus}
            "BiosBootmode" = ${BiosBootmode}
            "Bmc" = ${Bmc}
            "Board" = ${Board}
            "BootDeviceBootmode" = ${BootDeviceBootmode}
            "GraphicsCards" = ${GraphicsCards}
            "InventoryDeviceInfo" = ${InventoryDeviceInfo}
            "LocatorLed" = ${LocatorLed}
            "MemoryArrays" = ${MemoryArrays}
            "Processors" = ${Processors}
            "RackEnclosureSlot" = ${RackEnclosureSlot}
            "RegisteredDevice" = ${RegisteredDevice}
            "SasExpanders" = ${SasExpanders}
            "StorageControllers" = ${StorageControllers}
            "TopSystem" = ${TopSystem}
            "UemConnection" = ${UemConnection}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ComputeRackUnit<PSCustomObject>

.DESCRIPTION

Convert from JSON to ComputeRackUnit<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ComputeRackUnit<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToComputeRackUnit {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightComputeRackUnit' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightComputeRackUnit
        $AllProperties = ("AccountMoid", "ClassId", "CreateTime", "DomainGroupMoid", "ModTime", "Moid", "ObjectType", "Owners", "SharedScope", "Tags", "VersionContext", "Ancestors", "Parent", "PermissionResources", "DisplayNames", "DeviceMoId", "Dn", "Rn", "Model", "Revision", "Serial", "Vendor", "AdminPowerState", "AssetTag", "AvailableMemory", "BiosPostComplete", "FaultSummary", "KvmIpAddresses", "ManagementMode", "MemorySpeed", "MgmtIpAddress", "NumAdaptors", "NumCpuCores", "NumCpuCoresEnabled", "NumCpus", "NumEthHostInterfaces", "NumFcHostInterfaces", "NumThreads", "OperPowerState", "OperState", "Operability", "PlatformType", "Presence", "ServiceProfile", "TotalMemory", "UserLabel", "Uuid", "MgmtIdentity", "ConnectionStatus", "ServerId", "TopologyScanStatus", "Adapters", "BiosBootmode", "Biosunits", "Bmc", "Board", "BootDeviceBootmode", "Fanmodules", "GenericInventoryHolders", "GraphicsCards", "InventoryDeviceInfo", "LocatorLed", "MemoryArrays", "PciDevices", "Processors", "Psus", "RackEnclosureSlot", "RegisteredDevice", "SasExpanders", "StorageControllers", "StorageEnclosures", "TopSystem", "UemConnection")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AccountMoid"))) { #optional property not found
            $AccountMoid = $null
        } else {
            $AccountMoid = $JsonParameters.PSobject.Properties["AccountMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CreateTime"))) { #optional property not found
            $CreateTime = $null
        } else {
            $CreateTime = $JsonParameters.PSobject.Properties["CreateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DomainGroupMoid"))) { #optional property not found
            $DomainGroupMoid = $null
        } else {
            $DomainGroupMoid = $JsonParameters.PSobject.Properties["DomainGroupMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ModTime"))) { #optional property not found
            $ModTime = $null
        } else {
            $ModTime = $JsonParameters.PSobject.Properties["ModTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Moid"))) { #optional property not found
            $Moid = $null
        } else {
            $Moid = $JsonParameters.PSobject.Properties["Moid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Owners"))) { #optional property not found
            $Owners = $null
        } else {
            $Owners = $JsonParameters.PSobject.Properties["Owners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SharedScope"))) { #optional property not found
            $SharedScope = $null
        } else {
            $SharedScope = $JsonParameters.PSobject.Properties["SharedScope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["Tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VersionContext"))) { #optional property not found
            $VersionContext = $null
        } else {
            $VersionContext = $JsonParameters.PSobject.Properties["VersionContext"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ancestors"))) { #optional property not found
            $Ancestors = $null
        } else {
            $Ancestors = $JsonParameters.PSobject.Properties["Ancestors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["Parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PermissionResources"))) { #optional property not found
            $PermissionResources = $null
        } else {
            $PermissionResources = $JsonParameters.PSobject.Properties["PermissionResources"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DisplayNames"))) { #optional property not found
            $DisplayNames = $null
        } else {
            $DisplayNames = $JsonParameters.PSobject.Properties["DisplayNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DeviceMoId"))) { #optional property not found
            $DeviceMoId = $null
        } else {
            $DeviceMoId = $JsonParameters.PSobject.Properties["DeviceMoId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Dn"))) { #optional property not found
            $Dn = $null
        } else {
            $Dn = $JsonParameters.PSobject.Properties["Dn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Rn"))) { #optional property not found
            $Rn = $null
        } else {
            $Rn = $JsonParameters.PSobject.Properties["Rn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["Model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Revision"))) { #optional property not found
            $Revision = $null
        } else {
            $Revision = $JsonParameters.PSobject.Properties["Revision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["Serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Vendor"))) { #optional property not found
            $Vendor = $null
        } else {
            $Vendor = $JsonParameters.PSobject.Properties["Vendor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AdminPowerState"))) { #optional property not found
            $AdminPowerState = $null
        } else {
            $AdminPowerState = $JsonParameters.PSobject.Properties["AdminPowerState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AssetTag"))) { #optional property not found
            $AssetTag = $null
        } else {
            $AssetTag = $JsonParameters.PSobject.Properties["AssetTag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AvailableMemory"))) { #optional property not found
            $AvailableMemory = $null
        } else {
            $AvailableMemory = $JsonParameters.PSobject.Properties["AvailableMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BiosPostComplete"))) { #optional property not found
            $BiosPostComplete = $null
        } else {
            $BiosPostComplete = $JsonParameters.PSobject.Properties["BiosPostComplete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FaultSummary"))) { #optional property not found
            $FaultSummary = $null
        } else {
            $FaultSummary = $JsonParameters.PSobject.Properties["FaultSummary"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "KvmIpAddresses"))) { #optional property not found
            $KvmIpAddresses = $null
        } else {
            $KvmIpAddresses = $JsonParameters.PSobject.Properties["KvmIpAddresses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ManagementMode"))) { #optional property not found
            $ManagementMode = $null
        } else {
            $ManagementMode = $JsonParameters.PSobject.Properties["ManagementMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemorySpeed"))) { #optional property not found
            $MemorySpeed = $null
        } else {
            $MemorySpeed = $JsonParameters.PSobject.Properties["MemorySpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MgmtIpAddress"))) { #optional property not found
            $MgmtIpAddress = $null
        } else {
            $MgmtIpAddress = $JsonParameters.PSobject.Properties["MgmtIpAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NumAdaptors"))) { #optional property not found
            $NumAdaptors = $null
        } else {
            $NumAdaptors = $JsonParameters.PSobject.Properties["NumAdaptors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NumCpuCores"))) { #optional property not found
            $NumCpuCores = $null
        } else {
            $NumCpuCores = $JsonParameters.PSobject.Properties["NumCpuCores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NumCpuCoresEnabled"))) { #optional property not found
            $NumCpuCoresEnabled = $null
        } else {
            $NumCpuCoresEnabled = $JsonParameters.PSobject.Properties["NumCpuCoresEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NumCpus"))) { #optional property not found
            $NumCpus = $null
        } else {
            $NumCpus = $JsonParameters.PSobject.Properties["NumCpus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NumEthHostInterfaces"))) { #optional property not found
            $NumEthHostInterfaces = $null
        } else {
            $NumEthHostInterfaces = $JsonParameters.PSobject.Properties["NumEthHostInterfaces"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NumFcHostInterfaces"))) { #optional property not found
            $NumFcHostInterfaces = $null
        } else {
            $NumFcHostInterfaces = $JsonParameters.PSobject.Properties["NumFcHostInterfaces"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NumThreads"))) { #optional property not found
            $NumThreads = $null
        } else {
            $NumThreads = $JsonParameters.PSobject.Properties["NumThreads"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OperPowerState"))) { #optional property not found
            $OperPowerState = $null
        } else {
            $OperPowerState = $JsonParameters.PSobject.Properties["OperPowerState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OperState"))) { #optional property not found
            $OperState = $null
        } else {
            $OperState = $JsonParameters.PSobject.Properties["OperState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Operability"))) { #optional property not found
            $Operability = $null
        } else {
            $Operability = $JsonParameters.PSobject.Properties["Operability"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PlatformType"))) { #optional property not found
            $PlatformType = $null
        } else {
            $PlatformType = $JsonParameters.PSobject.Properties["PlatformType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Presence"))) { #optional property not found
            $Presence = $null
        } else {
            $Presence = $JsonParameters.PSobject.Properties["Presence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ServiceProfile"))) { #optional property not found
            $ServiceProfile = $null
        } else {
            $ServiceProfile = $JsonParameters.PSobject.Properties["ServiceProfile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TotalMemory"))) { #optional property not found
            $TotalMemory = $null
        } else {
            $TotalMemory = $JsonParameters.PSobject.Properties["TotalMemory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UserLabel"))) { #optional property not found
            $UserLabel = $null
        } else {
            $UserLabel = $JsonParameters.PSobject.Properties["UserLabel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["Uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MgmtIdentity"))) { #optional property not found
            $MgmtIdentity = $null
        } else {
            $MgmtIdentity = $JsonParameters.PSobject.Properties["MgmtIdentity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ConnectionStatus"))) { #optional property not found
            $ConnectionStatus = $null
        } else {
            $ConnectionStatus = $JsonParameters.PSobject.Properties["ConnectionStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ServerId"))) { #optional property not found
            $ServerId = $null
        } else {
            $ServerId = $JsonParameters.PSobject.Properties["ServerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TopologyScanStatus"))) { #optional property not found
            $TopologyScanStatus = $null
        } else {
            $TopologyScanStatus = $JsonParameters.PSobject.Properties["TopologyScanStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Adapters"))) { #optional property not found
            $Adapters = $null
        } else {
            $Adapters = $JsonParameters.PSobject.Properties["Adapters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BiosBootmode"))) { #optional property not found
            $BiosBootmode = $null
        } else {
            $BiosBootmode = $JsonParameters.PSobject.Properties["BiosBootmode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Biosunits"))) { #optional property not found
            $Biosunits = $null
        } else {
            $Biosunits = $JsonParameters.PSobject.Properties["Biosunits"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Bmc"))) { #optional property not found
            $Bmc = $null
        } else {
            $Bmc = $JsonParameters.PSobject.Properties["Bmc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Board"))) { #optional property not found
            $Board = $null
        } else {
            $Board = $JsonParameters.PSobject.Properties["Board"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BootDeviceBootmode"))) { #optional property not found
            $BootDeviceBootmode = $null
        } else {
            $BootDeviceBootmode = $JsonParameters.PSobject.Properties["BootDeviceBootmode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Fanmodules"))) { #optional property not found
            $Fanmodules = $null
        } else {
            $Fanmodules = $JsonParameters.PSobject.Properties["Fanmodules"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "GenericInventoryHolders"))) { #optional property not found
            $GenericInventoryHolders = $null
        } else {
            $GenericInventoryHolders = $JsonParameters.PSobject.Properties["GenericInventoryHolders"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "GraphicsCards"))) { #optional property not found
            $GraphicsCards = $null
        } else {
            $GraphicsCards = $JsonParameters.PSobject.Properties["GraphicsCards"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InventoryDeviceInfo"))) { #optional property not found
            $InventoryDeviceInfo = $null
        } else {
            $InventoryDeviceInfo = $JsonParameters.PSobject.Properties["InventoryDeviceInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LocatorLed"))) { #optional property not found
            $LocatorLed = $null
        } else {
            $LocatorLed = $JsonParameters.PSobject.Properties["LocatorLed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemoryArrays"))) { #optional property not found
            $MemoryArrays = $null
        } else {
            $MemoryArrays = $JsonParameters.PSobject.Properties["MemoryArrays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PciDevices"))) { #optional property not found
            $PciDevices = $null
        } else {
            $PciDevices = $JsonParameters.PSobject.Properties["PciDevices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Processors"))) { #optional property not found
            $Processors = $null
        } else {
            $Processors = $JsonParameters.PSobject.Properties["Processors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Psus"))) { #optional property not found
            $Psus = $null
        } else {
            $Psus = $JsonParameters.PSobject.Properties["Psus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RackEnclosureSlot"))) { #optional property not found
            $RackEnclosureSlot = $null
        } else {
            $RackEnclosureSlot = $JsonParameters.PSobject.Properties["RackEnclosureSlot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RegisteredDevice"))) { #optional property not found
            $RegisteredDevice = $null
        } else {
            $RegisteredDevice = $JsonParameters.PSobject.Properties["RegisteredDevice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SasExpanders"))) { #optional property not found
            $SasExpanders = $null
        } else {
            $SasExpanders = $JsonParameters.PSobject.Properties["SasExpanders"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "StorageControllers"))) { #optional property not found
            $StorageControllers = $null
        } else {
            $StorageControllers = $JsonParameters.PSobject.Properties["StorageControllers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "StorageEnclosures"))) { #optional property not found
            $StorageEnclosures = $null
        } else {
            $StorageEnclosures = $JsonParameters.PSobject.Properties["StorageEnclosures"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TopSystem"))) { #optional property not found
            $TopSystem = $null
        } else {
            $TopSystem = $JsonParameters.PSobject.Properties["TopSystem"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UemConnection"))) { #optional property not found
            $UemConnection = $null
        } else {
            $UemConnection = $JsonParameters.PSobject.Properties["UemConnection"].value
        }

        $PSO = [PSCustomObject]@{
            "AccountMoid" = ${AccountMoid}
            "ClassId" = ${ClassId}
            "CreateTime" = ${CreateTime}
            "DomainGroupMoid" = ${DomainGroupMoid}
            "ModTime" = ${ModTime}
            "Moid" = ${Moid}
            "ObjectType" = ${ObjectType}
            "Owners" = ${Owners}
            "SharedScope" = ${SharedScope}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Ancestors" = ${Ancestors}
            "Parent" = ${Parent}
            "PermissionResources" = ${PermissionResources}
            "DisplayNames" = ${DisplayNames}
            "DeviceMoId" = ${DeviceMoId}
            "Dn" = ${Dn}
            "Rn" = ${Rn}
            "Model" = ${Model}
            "Revision" = ${Revision}
            "Serial" = ${Serial}
            "Vendor" = ${Vendor}
            "AdminPowerState" = ${AdminPowerState}
            "AssetTag" = ${AssetTag}
            "AvailableMemory" = ${AvailableMemory}
            "BiosPostComplete" = ${BiosPostComplete}
            "FaultSummary" = ${FaultSummary}
            "KvmIpAddresses" = ${KvmIpAddresses}
            "ManagementMode" = ${ManagementMode}
            "MemorySpeed" = ${MemorySpeed}
            "MgmtIpAddress" = ${MgmtIpAddress}
            "NumAdaptors" = ${NumAdaptors}
            "NumCpuCores" = ${NumCpuCores}
            "NumCpuCoresEnabled" = ${NumCpuCoresEnabled}
            "NumCpus" = ${NumCpus}
            "NumEthHostInterfaces" = ${NumEthHostInterfaces}
            "NumFcHostInterfaces" = ${NumFcHostInterfaces}
            "NumThreads" = ${NumThreads}
            "OperPowerState" = ${OperPowerState}
            "OperState" = ${OperState}
            "Operability" = ${Operability}
            "PlatformType" = ${PlatformType}
            "Presence" = ${Presence}
            "ServiceProfile" = ${ServiceProfile}
            "TotalMemory" = ${TotalMemory}
            "UserLabel" = ${UserLabel}
            "Uuid" = ${Uuid}
            "MgmtIdentity" = ${MgmtIdentity}
            "ConnectionStatus" = ${ConnectionStatus}
            "ServerId" = ${ServerId}
            "TopologyScanStatus" = ${TopologyScanStatus}
            "Adapters" = ${Adapters}
            "BiosBootmode" = ${BiosBootmode}
            "Biosunits" = ${Biosunits}
            "Bmc" = ${Bmc}
            "Board" = ${Board}
            "BootDeviceBootmode" = ${BootDeviceBootmode}
            "Fanmodules" = ${Fanmodules}
            "GenericInventoryHolders" = ${GenericInventoryHolders}
            "GraphicsCards" = ${GraphicsCards}
            "InventoryDeviceInfo" = ${InventoryDeviceInfo}
            "LocatorLed" = ${LocatorLed}
            "MemoryArrays" = ${MemoryArrays}
            "PciDevices" = ${PciDevices}
            "Processors" = ${Processors}
            "Psus" = ${Psus}
            "RackEnclosureSlot" = ${RackEnclosureSlot}
            "RegisteredDevice" = ${RegisteredDevice}
            "SasExpanders" = ${SasExpanders}
            "StorageControllers" = ${StorageControllers}
            "StorageEnclosures" = ${StorageEnclosures}
            "TopSystem" = ${TopSystem}
            "UemConnection" = ${UemConnection}
        }

        return $PSO
    }

}

