#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'iam.Idp', excluding properties defined in parent classes.

.PARAMETER DomainName
Email domain name of the user for this IdP. When a user enters an email during login in the Intersight home page, the IdP is picked by matching this domain name with the email domain name for authentication.
.PARAMETER Metadata
SAML metadata of the IdP.
.PARAMETER Name
The name of the Identity Provider, for example Cisco, Okta, or OneID.
.PARAMETER Type
Authentication protocol used by the IdP.
.PARAMETER Account
No description available.
.PARAMETER LdapPolicy
No description available.
.PARAMETER System
No description available.
.PARAMETER Usergroups
An array of relationships to iamUserGroup resources.
.PARAMETER Users
An array of relationships to iamUser resources.
.OUTPUTS

IamIdpAllOf<PSCustomObject>
#>

function Initialize-IntersightIamIdpAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")]
        [String]
        ${DomainName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Metadata},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("saml", "oidc", "local")]
        [String]
        ${Type} = "saml",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Account},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LdapPolicy},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${System},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Usergroups},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Users}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightIamIdpAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        
        $PSO = [PSCustomObject]@{
            "DomainName" = ${DomainName}
            "Metadata" = ${Metadata}
            "Name" = ${Name}
            "Type" = ${Type}
            "Account" = ${Account}
            "LdapPolicy" = ${LdapPolicy}
            "System" = ${System}
            "Usergroups" = ${Usergroups}
            "Users" = ${Users}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IamIdpAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to IamIdpAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IamIdpAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToIamIdpAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightIamIdpAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightIamIdpAllOf
        $AllProperties = ("DomainName", "IdpEntityId", "Metadata", "Name", "Type", "Account", "LdapPolicy", "System", "UserPreferences", "Usergroups", "Users")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DomainName"))) { #optional property not found
            $DomainName = $null
        } else {
            $DomainName = $JsonParameters.PSobject.Properties["DomainName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IdpEntityId"))) { #optional property not found
            $IdpEntityId = $null
        } else {
            $IdpEntityId = $JsonParameters.PSobject.Properties["IdpEntityId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["Metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["Type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["Account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LdapPolicy"))) { #optional property not found
            $LdapPolicy = $null
        } else {
            $LdapPolicy = $JsonParameters.PSobject.Properties["LdapPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "System"))) { #optional property not found
            $System = $null
        } else {
            $System = $JsonParameters.PSobject.Properties["System"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UserPreferences"))) { #optional property not found
            $UserPreferences = $null
        } else {
            $UserPreferences = $JsonParameters.PSobject.Properties["UserPreferences"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Usergroups"))) { #optional property not found
            $Usergroups = $null
        } else {
            $Usergroups = $JsonParameters.PSobject.Properties["Usergroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Users"))) { #optional property not found
            $Users = $null
        } else {
            $Users = $JsonParameters.PSobject.Properties["Users"].value
        }

        $PSO = [PSCustomObject]@{
            "DomainName" = ${DomainName}
            "IdpEntityId" = ${IdpEntityId}
            "Metadata" = ${Metadata}
            "Name" = ${Name}
            "Type" = ${Type}
            "Account" = ${Account}
            "LdapPolicy" = ${LdapPolicy}
            "System" = ${System}
            "UserPreferences" = ${UserPreferences}
            "Usergroups" = ${Usergroups}
            "Users" = ${Users}
        }

        return $PSO
    }

}

