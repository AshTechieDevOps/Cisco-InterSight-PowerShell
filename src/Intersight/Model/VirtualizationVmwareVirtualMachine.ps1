#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-12-08T20:53:20Z.
# Version: 1.0.9-2908
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The VMware Virtual machine. It has details such as power state, IP address, resource consumption, etc. Basic elements come from the base class and VMware specific details are provided here.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER Moid
The unique identifier of this Managed Object instance.
.PARAMETER Owners
No description available.
.PARAMETER Tags
No description available.
.PARAMETER VersionContext
No description available.
.PARAMETER Parent
No description available.
.PARAMETER RegisteredDevice
No description available.
.PARAMETER Capacity
No description available.
.PARAMETER GuestInfo
No description available.
.PARAMETER HypervisorType
Type of hypervisor where the virtual machine is hosted for example ESXi. * `ESXi` - The hypervisor running on the HyperFlex cluster is a Vmware ESXi hypervisor of any version. * `HyperFlexAp` - The hypervisor running on the HyperFlex cluster is Cisco HyperFlex Application Platform. * `Hyper-V` - The hypervisor running on the HyperFlex cluster is Microsoft Hyper-V. * `Unknown` - The hypervisor running on the HyperFlex cluster is not known.
.PARAMETER Identity
The internally generated identity of this VM. This entity is not manipulated by users. It aids in uniquely identifying the virtual machine object. For VMware, this is MOR (managed object reference).
.PARAMETER IpAddress
No description available.
.PARAMETER MemoryCapacity
No description available.
.PARAMETER Name
User-provided name to identify the virtual machine.
.PARAMETER PowerState
Power state of the virtual machine. * `Unknown` - The entity's power state is unknown. * `PoweredOn` - The entity is powered on. * `PoweredOff` - The entity is powered down. * `StandBy` - The entity is in standby mode. * `Paused` - The entity is in pause state.
.PARAMETER ProcessorCapacity
No description available.
.PARAMETER Uuid
The uuid of this virtual machine. The uuid is internally generated and not user specified.
.PARAMETER Annotation
List of annotations provided to this VM by user. Can be long.
.PARAMETER BootTime
Time when this VM booted up.
.PARAMETER ConfigName
The configuration name for this VM. This maybe the same as the guest hostname.
.PARAMETER ConnectionState
Shows if virtual machine is connected to vCenter. Values are Connected, Disconnected, Orphaned, Inaccessible, and Invalid.
.PARAMETER CpuHotAddEnabled
Indicates if the capability to add CPUs to a running VM is enabled.
.PARAMETER CpuShares
No description available.
.PARAMETER CpuSocketInfo
No description available.
.PARAMETER CustomAttributes
No description available.
.PARAMETER DefaultPowerOffType
Indicates how the VM will be powered off (soft, hard etc.).
.PARAMETER DhcpEnabled
Shows if DHCP is used for IP/DNS on this VM.
.PARAMETER DiskCommitInfo
No description available.
.PARAMETER DnsServerList
No description available.
.PARAMETER DnsSuffixList
No description available.
.PARAMETER Folder
The folder name associated with this VM.
.PARAMETER GuestState
The state of the guest OS running on this VM. Could be running, not running etc. * `Unknown` - Indicates that the guest OS state cannot be determined. * `NotRunning` - Indicates that the guest OS is not running. * `Resetting` - Indicates that the guest OS is resetting. * `Running` - Indicates that the guest OS is running normally. * `ShuttingDown` - Indicates that the guest OS is shutting down. * `Standby` - Indicates that the guest OS is in standby mode.
.PARAMETER InstanceUuid
UUID assigned by vCenter to every VM.
.PARAMETER InventoryPath
Inventory path to the VM. Example - /DC/vm/folder/VMName.
.PARAMETER IsTemplate
If true, indicates that the entity refers to a template of a virtual machine and not a real virtual machine.
.PARAMETER MacAddress
No description available.
.PARAMETER MemShares
No description available.
.PARAMETER MemoryHotAddEnabled
Adding memory to a running VM.
.PARAMETER NetworkCount
Indicates how many networks are used by this VM.
.PARAMETER PortGroups
No description available.
.PARAMETER ProtectedVm
Shows if this is a protected VM. VMs can be in protection groups.
.PARAMETER RemoteDisplayInfo
No description available.
.PARAMETER RemoteDisplayVncEnabled
Shows if support for a remote VNC access is enabled.
.PARAMETER ResourcePool
Name of the resource pool to which this VM belongs (optional).
.PARAMETER ResourcePoolOwner
Who owns the resource pool.
.PARAMETER ResourcePoolParent
The parent of the current resource pool to which this VM belongs.
.PARAMETER ToolRunningStatus
Indicates if guest tools are running on this VM. Could be set to guestToolNotRunning or guestToolsRunning.
.PARAMETER ToolsVersion
The version of the guest tools, usually not specified.
.PARAMETER VmDiskCount
Shows the number of disks assigned to this VM.
.PARAMETER VmOverallStatus
The operational state of the VM. Could be Available, Provisioned, Maintenance mode, Deleting, etc.
.PARAMETER VmPath
Example - [datastore3] VCSA-134/VCSA-134.vmx.
.PARAMETER VmVersion
Information about the version of this VM (vmx-09, vmx-11 etc.).
.PARAMETER VmVnicCount
How many vnics are present.
.PARAMETER VnicDeviceConfigId
Information related to the guest info's VNIC virtual device. It is a comma-separated list.
.PARAMETER Cluster
No description available.
.PARAMETER Datacenter
No description available.
.PARAMETER VarHost
No description available.
.OUTPUTS

VirtualizationVmwareVirtualMachine<PSCustomObject>
#>

function Initialize-IntersightVirtualizationVmwareVirtualMachine {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("virtualization.VmwareVirtualMachine")]
        [String]
        ${ClassId} = "virtualization.VmwareVirtualMachine",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("virtualization.VmwareVirtualMachine")]
        [String]
        ${ObjectType} = "virtualization.VmwareVirtualMachine",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Moid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Owners},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VersionContext},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RegisteredDevice},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Capacity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${GuestInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ESXi", "HyperFlexAp", "Hyper-V", "Unknown")]
        [String]
        ${HypervisorType} = "ESXi",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Identity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IpAddress},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MemoryCapacity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Unknown", "PoweredOn", "PoweredOff", "StandBy", "Paused")]
        [String]
        ${PowerState} = "Unknown",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProcessorCapacity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")]
        [String]
        ${Uuid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Annotation},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${BootTime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConfigName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConnectionState},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CpuHotAddEnabled},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CpuShares},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CpuSocketInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CustomAttributes},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultPowerOffType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DhcpEnabled},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DiskCommitInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DnsServerList},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DnsSuffixList},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Folder},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Unknown", "NotRunning", "Resetting", "Running", "ShuttingDown", "Standby")]
        [String]
        ${GuestState} = "Unknown",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")]
        [String]
        ${InstanceUuid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InventoryPath},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsTemplate},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${MacAddress},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MemShares},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MemoryHotAddEnabled},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NetworkCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${PortGroups},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ProtectedVm},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RemoteDisplayInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RemoteDisplayVncEnabled},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourcePool},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourcePoolOwner},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourcePoolParent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ToolRunningStatus},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ToolsVersion},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VmDiskCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VmOverallStatus},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VmPath},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VmVersion},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VmVnicCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VnicDeviceConfigId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cluster},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Datacenter},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarHost}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightVirtualizationVmwareVirtualMachine' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Parent" = ${Parent}
            "RegisteredDevice" = ${RegisteredDevice}
            "Capacity" = ${Capacity}
            "GuestInfo" = ${GuestInfo}
            "HypervisorType" = ${HypervisorType}
            "Identity" = ${Identity}
            "IpAddress" = ${IpAddress}
            "MemoryCapacity" = ${MemoryCapacity}
            "Name" = ${Name}
            "PowerState" = ${PowerState}
            "ProcessorCapacity" = ${ProcessorCapacity}
            "Uuid" = ${Uuid}
            "Annotation" = ${Annotation}
            "BootTime" = ${BootTime}
            "ConfigName" = ${ConfigName}
            "ConnectionState" = ${ConnectionState}
            "CpuHotAddEnabled" = ${CpuHotAddEnabled}
            "CpuShares" = ${CpuShares}
            "CpuSocketInfo" = ${CpuSocketInfo}
            "CustomAttributes" = ${CustomAttributes}
            "DefaultPowerOffType" = ${DefaultPowerOffType}
            "DhcpEnabled" = ${DhcpEnabled}
            "DiskCommitInfo" = ${DiskCommitInfo}
            "DnsServerList" = ${DnsServerList}
            "DnsSuffixList" = ${DnsSuffixList}
            "Folder" = ${Folder}
            "GuestState" = ${GuestState}
            "InstanceUuid" = ${InstanceUuid}
            "InventoryPath" = ${InventoryPath}
            "IsTemplate" = ${IsTemplate}
            "MacAddress" = ${MacAddress}
            "MemShares" = ${MemShares}
            "MemoryHotAddEnabled" = ${MemoryHotAddEnabled}
            "NetworkCount" = ${NetworkCount}
            "PortGroups" = ${PortGroups}
            "ProtectedVm" = ${ProtectedVm}
            "RemoteDisplayInfo" = ${RemoteDisplayInfo}
            "RemoteDisplayVncEnabled" = ${RemoteDisplayVncEnabled}
            "ResourcePool" = ${ResourcePool}
            "ResourcePoolOwner" = ${ResourcePoolOwner}
            "ResourcePoolParent" = ${ResourcePoolParent}
            "ToolRunningStatus" = ${ToolRunningStatus}
            "ToolsVersion" = ${ToolsVersion}
            "VmDiskCount" = ${VmDiskCount}
            "VmOverallStatus" = ${VmOverallStatus}
            "VmPath" = ${VmPath}
            "VmVersion" = ${VmVersion}
            "VmVnicCount" = ${VmVnicCount}
            "VnicDeviceConfigId" = ${VnicDeviceConfigId}
            "Cluster" = ${Cluster}
            "Datacenter" = ${Datacenter}
            "Host" = ${VarHost}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VirtualizationVmwareVirtualMachine<PSCustomObject>

.DESCRIPTION

Convert from JSON to VirtualizationVmwareVirtualMachine<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VirtualizationVmwareVirtualMachine<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToVirtualizationVmwareVirtualMachine {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightVirtualizationVmwareVirtualMachine' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightVirtualizationVmwareVirtualMachine
        $AllProperties = ("ClassId", "ObjectType", "AccountMoid", "CreateTime", "DomainGroupMoid", "ModTime", "Moid", "Owners", "SharedScope", "Tags", "VersionContext", "Ancestors", "Parent", "PermissionResources", "DisplayNames", "RegisteredDevice", "Capacity", "GuestInfo", "HypervisorType", "Identity", "IpAddress", "MemoryCapacity", "Name", "PowerState", "ProcessorCapacity", "Uuid", "Annotation", "BootTime", "ConfigName", "ConnectionState", "CpuHotAddEnabled", "CpuShares", "CpuSocketInfo", "CustomAttributes", "DefaultPowerOffType", "DhcpEnabled", "DiskCommitInfo", "DnsServerList", "DnsSuffixList", "Folder", "GuestState", "InstanceUuid", "InventoryPath", "IsTemplate", "MacAddress", "MemShares", "MemoryHotAddEnabled", "NetworkCount", "PortGroups", "ProtectedVm", "RemoteDisplayInfo", "RemoteDisplayVncEnabled", "ResourcePool", "ResourcePoolOwner", "ResourcePoolParent", "ToolRunningStatus", "ToolsVersion", "VmDiskCount", "VmOverallStatus", "VmPath", "VmVersion", "VmVnicCount", "VnicDeviceConfigId", "Cluster", "Datacenter", "Datastores", "Host")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AccountMoid"))) { #optional property not found
            $AccountMoid = $null
        } else {
            $AccountMoid = $JsonParameters.PSobject.Properties["AccountMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CreateTime"))) { #optional property not found
            $CreateTime = $null
        } else {
            $CreateTime = $JsonParameters.PSobject.Properties["CreateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DomainGroupMoid"))) { #optional property not found
            $DomainGroupMoid = $null
        } else {
            $DomainGroupMoid = $JsonParameters.PSobject.Properties["DomainGroupMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ModTime"))) { #optional property not found
            $ModTime = $null
        } else {
            $ModTime = $JsonParameters.PSobject.Properties["ModTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Moid"))) { #optional property not found
            $Moid = $null
        } else {
            $Moid = $JsonParameters.PSobject.Properties["Moid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Owners"))) { #optional property not found
            $Owners = $null
        } else {
            $Owners = $JsonParameters.PSobject.Properties["Owners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SharedScope"))) { #optional property not found
            $SharedScope = $null
        } else {
            $SharedScope = $JsonParameters.PSobject.Properties["SharedScope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["Tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VersionContext"))) { #optional property not found
            $VersionContext = $null
        } else {
            $VersionContext = $JsonParameters.PSobject.Properties["VersionContext"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ancestors"))) { #optional property not found
            $Ancestors = $null
        } else {
            $Ancestors = $JsonParameters.PSobject.Properties["Ancestors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["Parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PermissionResources"))) { #optional property not found
            $PermissionResources = $null
        } else {
            $PermissionResources = $JsonParameters.PSobject.Properties["PermissionResources"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DisplayNames"))) { #optional property not found
            $DisplayNames = $null
        } else {
            $DisplayNames = $JsonParameters.PSobject.Properties["DisplayNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RegisteredDevice"))) { #optional property not found
            $RegisteredDevice = $null
        } else {
            $RegisteredDevice = $JsonParameters.PSobject.Properties["RegisteredDevice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Capacity"))) { #optional property not found
            $Capacity = $null
        } else {
            $Capacity = $JsonParameters.PSobject.Properties["Capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "GuestInfo"))) { #optional property not found
            $GuestInfo = $null
        } else {
            $GuestInfo = $JsonParameters.PSobject.Properties["GuestInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HypervisorType"))) { #optional property not found
            $HypervisorType = $null
        } else {
            $HypervisorType = $JsonParameters.PSobject.Properties["HypervisorType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Identity"))) { #optional property not found
            $Identity = $null
        } else {
            $Identity = $JsonParameters.PSobject.Properties["Identity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IpAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["IpAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemoryCapacity"))) { #optional property not found
            $MemoryCapacity = $null
        } else {
            $MemoryCapacity = $JsonParameters.PSobject.Properties["MemoryCapacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PowerState"))) { #optional property not found
            $PowerState = $null
        } else {
            $PowerState = $JsonParameters.PSobject.Properties["PowerState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProcessorCapacity"))) { #optional property not found
            $ProcessorCapacity = $null
        } else {
            $ProcessorCapacity = $JsonParameters.PSobject.Properties["ProcessorCapacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["Uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Annotation"))) { #optional property not found
            $Annotation = $null
        } else {
            $Annotation = $JsonParameters.PSobject.Properties["Annotation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BootTime"))) { #optional property not found
            $BootTime = $null
        } else {
            $BootTime = $JsonParameters.PSobject.Properties["BootTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ConfigName"))) { #optional property not found
            $ConfigName = $null
        } else {
            $ConfigName = $JsonParameters.PSobject.Properties["ConfigName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ConnectionState"))) { #optional property not found
            $ConnectionState = $null
        } else {
            $ConnectionState = $JsonParameters.PSobject.Properties["ConnectionState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CpuHotAddEnabled"))) { #optional property not found
            $CpuHotAddEnabled = $null
        } else {
            $CpuHotAddEnabled = $JsonParameters.PSobject.Properties["CpuHotAddEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CpuShares"))) { #optional property not found
            $CpuShares = $null
        } else {
            $CpuShares = $JsonParameters.PSobject.Properties["CpuShares"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CpuSocketInfo"))) { #optional property not found
            $CpuSocketInfo = $null
        } else {
            $CpuSocketInfo = $JsonParameters.PSobject.Properties["CpuSocketInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CustomAttributes"))) { #optional property not found
            $CustomAttributes = $null
        } else {
            $CustomAttributes = $JsonParameters.PSobject.Properties["CustomAttributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DefaultPowerOffType"))) { #optional property not found
            $DefaultPowerOffType = $null
        } else {
            $DefaultPowerOffType = $JsonParameters.PSobject.Properties["DefaultPowerOffType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DhcpEnabled"))) { #optional property not found
            $DhcpEnabled = $null
        } else {
            $DhcpEnabled = $JsonParameters.PSobject.Properties["DhcpEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DiskCommitInfo"))) { #optional property not found
            $DiskCommitInfo = $null
        } else {
            $DiskCommitInfo = $JsonParameters.PSobject.Properties["DiskCommitInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DnsServerList"))) { #optional property not found
            $DnsServerList = $null
        } else {
            $DnsServerList = $JsonParameters.PSobject.Properties["DnsServerList"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DnsSuffixList"))) { #optional property not found
            $DnsSuffixList = $null
        } else {
            $DnsSuffixList = $JsonParameters.PSobject.Properties["DnsSuffixList"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Folder"))) { #optional property not found
            $Folder = $null
        } else {
            $Folder = $JsonParameters.PSobject.Properties["Folder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "GuestState"))) { #optional property not found
            $GuestState = $null
        } else {
            $GuestState = $JsonParameters.PSobject.Properties["GuestState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InstanceUuid"))) { #optional property not found
            $InstanceUuid = $null
        } else {
            $InstanceUuid = $JsonParameters.PSobject.Properties["InstanceUuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InventoryPath"))) { #optional property not found
            $InventoryPath = $null
        } else {
            $InventoryPath = $JsonParameters.PSobject.Properties["InventoryPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IsTemplate"))) { #optional property not found
            $IsTemplate = $null
        } else {
            $IsTemplate = $JsonParameters.PSobject.Properties["IsTemplate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MacAddress"))) { #optional property not found
            $MacAddress = $null
        } else {
            $MacAddress = $JsonParameters.PSobject.Properties["MacAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemShares"))) { #optional property not found
            $MemShares = $null
        } else {
            $MemShares = $JsonParameters.PSobject.Properties["MemShares"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemoryHotAddEnabled"))) { #optional property not found
            $MemoryHotAddEnabled = $null
        } else {
            $MemoryHotAddEnabled = $JsonParameters.PSobject.Properties["MemoryHotAddEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NetworkCount"))) { #optional property not found
            $NetworkCount = $null
        } else {
            $NetworkCount = $JsonParameters.PSobject.Properties["NetworkCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PortGroups"))) { #optional property not found
            $PortGroups = $null
        } else {
            $PortGroups = $JsonParameters.PSobject.Properties["PortGroups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProtectedVm"))) { #optional property not found
            $ProtectedVm = $null
        } else {
            $ProtectedVm = $JsonParameters.PSobject.Properties["ProtectedVm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RemoteDisplayInfo"))) { #optional property not found
            $RemoteDisplayInfo = $null
        } else {
            $RemoteDisplayInfo = $JsonParameters.PSobject.Properties["RemoteDisplayInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RemoteDisplayVncEnabled"))) { #optional property not found
            $RemoteDisplayVncEnabled = $null
        } else {
            $RemoteDisplayVncEnabled = $JsonParameters.PSobject.Properties["RemoteDisplayVncEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ResourcePool"))) { #optional property not found
            $ResourcePool = $null
        } else {
            $ResourcePool = $JsonParameters.PSobject.Properties["ResourcePool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ResourcePoolOwner"))) { #optional property not found
            $ResourcePoolOwner = $null
        } else {
            $ResourcePoolOwner = $JsonParameters.PSobject.Properties["ResourcePoolOwner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ResourcePoolParent"))) { #optional property not found
            $ResourcePoolParent = $null
        } else {
            $ResourcePoolParent = $JsonParameters.PSobject.Properties["ResourcePoolParent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ToolRunningStatus"))) { #optional property not found
            $ToolRunningStatus = $null
        } else {
            $ToolRunningStatus = $JsonParameters.PSobject.Properties["ToolRunningStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ToolsVersion"))) { #optional property not found
            $ToolsVersion = $null
        } else {
            $ToolsVersion = $JsonParameters.PSobject.Properties["ToolsVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VmDiskCount"))) { #optional property not found
            $VmDiskCount = $null
        } else {
            $VmDiskCount = $JsonParameters.PSobject.Properties["VmDiskCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VmOverallStatus"))) { #optional property not found
            $VmOverallStatus = $null
        } else {
            $VmOverallStatus = $JsonParameters.PSobject.Properties["VmOverallStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VmPath"))) { #optional property not found
            $VmPath = $null
        } else {
            $VmPath = $JsonParameters.PSobject.Properties["VmPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VmVersion"))) { #optional property not found
            $VmVersion = $null
        } else {
            $VmVersion = $JsonParameters.PSobject.Properties["VmVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VmVnicCount"))) { #optional property not found
            $VmVnicCount = $null
        } else {
            $VmVnicCount = $JsonParameters.PSobject.Properties["VmVnicCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VnicDeviceConfigId"))) { #optional property not found
            $VnicDeviceConfigId = $null
        } else {
            $VnicDeviceConfigId = $JsonParameters.PSobject.Properties["VnicDeviceConfigId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Cluster"))) { #optional property not found
            $Cluster = $null
        } else {
            $Cluster = $JsonParameters.PSobject.Properties["Cluster"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Datacenter"))) { #optional property not found
            $Datacenter = $null
        } else {
            $Datacenter = $JsonParameters.PSobject.Properties["Datacenter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Datastores"))) { #optional property not found
            $Datastores = $null
        } else {
            $Datastores = $JsonParameters.PSobject.Properties["Datastores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Host"))) { #optional property not found
            $VarHost = $null
        } else {
            $VarHost = $JsonParameters.PSobject.Properties["Host"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AccountMoid" = ${AccountMoid}
            "CreateTime" = ${CreateTime}
            "DomainGroupMoid" = ${DomainGroupMoid}
            "ModTime" = ${ModTime}
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "SharedScope" = ${SharedScope}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Ancestors" = ${Ancestors}
            "Parent" = ${Parent}
            "PermissionResources" = ${PermissionResources}
            "DisplayNames" = ${DisplayNames}
            "RegisteredDevice" = ${RegisteredDevice}
            "Capacity" = ${Capacity}
            "GuestInfo" = ${GuestInfo}
            "HypervisorType" = ${HypervisorType}
            "Identity" = ${Identity}
            "IpAddress" = ${IpAddress}
            "MemoryCapacity" = ${MemoryCapacity}
            "Name" = ${Name}
            "PowerState" = ${PowerState}
            "ProcessorCapacity" = ${ProcessorCapacity}
            "Uuid" = ${Uuid}
            "Annotation" = ${Annotation}
            "BootTime" = ${BootTime}
            "ConfigName" = ${ConfigName}
            "ConnectionState" = ${ConnectionState}
            "CpuHotAddEnabled" = ${CpuHotAddEnabled}
            "CpuShares" = ${CpuShares}
            "CpuSocketInfo" = ${CpuSocketInfo}
            "CustomAttributes" = ${CustomAttributes}
            "DefaultPowerOffType" = ${DefaultPowerOffType}
            "DhcpEnabled" = ${DhcpEnabled}
            "DiskCommitInfo" = ${DiskCommitInfo}
            "DnsServerList" = ${DnsServerList}
            "DnsSuffixList" = ${DnsSuffixList}
            "Folder" = ${Folder}
            "GuestState" = ${GuestState}
            "InstanceUuid" = ${InstanceUuid}
            "InventoryPath" = ${InventoryPath}
            "IsTemplate" = ${IsTemplate}
            "MacAddress" = ${MacAddress}
            "MemShares" = ${MemShares}
            "MemoryHotAddEnabled" = ${MemoryHotAddEnabled}
            "NetworkCount" = ${NetworkCount}
            "PortGroups" = ${PortGroups}
            "ProtectedVm" = ${ProtectedVm}
            "RemoteDisplayInfo" = ${RemoteDisplayInfo}
            "RemoteDisplayVncEnabled" = ${RemoteDisplayVncEnabled}
            "ResourcePool" = ${ResourcePool}
            "ResourcePoolOwner" = ${ResourcePoolOwner}
            "ResourcePoolParent" = ${ResourcePoolParent}
            "ToolRunningStatus" = ${ToolRunningStatus}
            "ToolsVersion" = ${ToolsVersion}
            "VmDiskCount" = ${VmDiskCount}
            "VmOverallStatus" = ${VmOverallStatus}
            "VmPath" = ${VmPath}
            "VmVersion" = ${VmVersion}
            "VmVnicCount" = ${VmVnicCount}
            "VnicDeviceConfigId" = ${VnicDeviceConfigId}
            "Cluster" = ${Cluster}
            "Datacenter" = ${Datacenter}
            "Datastores" = ${Datastores}
            "Host" = ${VarHost}
        }

        return $PSO
    }

}

