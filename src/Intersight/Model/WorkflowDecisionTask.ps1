#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A DecisionTask is a control task that executes a sequence of WorkflowTasks based off decision provided and evaluated by this task.

.PARAMETER ObjectType
The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.
.PARAMETER Description
The description of this task instance in the workflow.
.PARAMETER Label
A user defined label identifier of the workflow task used for UI display.
.PARAMETER Name
The name of the task within the workflow and it must be unique among all WorkflowTasks within a workflow definition. This name serves as the internal unique identifier for the task and is used to pick input and output parameters to feed into other tasks.
.PARAMETER Condition
The condition to evaluate for this decision task. The condition can be a workflow or task variable or an expression based on the input parameters. Example value for condition if its Workflow/task variable is -  ""${task1.output.var1} or ${workflow.input.var2}"" which evaluates to a value matching any of the decision case values. Example value for condition if its an expression is - ""if ( $.element ! = null && $.element > 0 ) 'true'; else 'false'; "" which evaluates to 'true' or 'false' and will match one of the decision case values. Here ""element"" is a variable in decisiontask's inputParameters JSON formatted map. You can also use javascript like functions indexOf, toUpperCase in the expression which will be evaluated by the expression evaluator.
.PARAMETER DecisionCases
No description available.
.PARAMETER DefaultTask
The default next Task to execute if the decision cannot be evaluated to any of the DecisionCases.
.PARAMETER InputParameters
JSON formatted map that defines the input given to the decision task. The inputs are used as variables in the condition property of decision task. The input variables can be static values like ""hello"" , ""24"", ""true"" OR previous task outputs/workflow inputs like ""${task2.output.var1}}"". The input variables are referrenced as $.inputVariableName in the condition property.
.OUTPUTS

WorkflowDecisionTask<PSCustomObject>
#>

function Initialize-IntersightWorkflowDecisionTask {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ObjectType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9_:-]{1,64}$")]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Condition},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${DecisionCases},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultTask},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InputParameters}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightWorkflowDecisionTask' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ObjectType" = ${ObjectType}
            "Description" = ${Description}
            "Label" = ${Label}
            "Name" = ${Name}
            "Condition" = ${Condition}
            "DecisionCases" = ${DecisionCases}
            "DefaultTask" = ${DefaultTask}
            "InputParameters" = ${InputParameters}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowDecisionTask<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowDecisionTask<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowDecisionTask<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToWorkflowDecisionTask {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightWorkflowDecisionTask' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightWorkflowDecisionTask
        $AllProperties = ("ClassId", "ObjectType", "Description", "Label", "Name", "Condition", "DecisionCases", "DefaultTask", "InputParameters")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["Description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["Label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Condition"))) { #optional property not found
            $Condition = $null
        } else {
            $Condition = $JsonParameters.PSobject.Properties["Condition"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DecisionCases"))) { #optional property not found
            $DecisionCases = $null
        } else {
            $DecisionCases = $JsonParameters.PSobject.Properties["DecisionCases"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DefaultTask"))) { #optional property not found
            $DefaultTask = $null
        } else {
            $DefaultTask = $JsonParameters.PSobject.Properties["DefaultTask"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InputParameters"))) { #optional property not found
            $InputParameters = $null
        } else {
            $InputParameters = $JsonParameters.PSobject.Properties["InputParameters"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Description" = ${Description}
            "Label" = ${Label}
            "Name" = ${Name}
            "Condition" = ${Condition}
            "DecisionCases" = ${DecisionCases}
            "DefaultTask" = ${DefaultTask}
            "InputParameters" = ${InputParameters}
        }

        return $PSO
    }

}

