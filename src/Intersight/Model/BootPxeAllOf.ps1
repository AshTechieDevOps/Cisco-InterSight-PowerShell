#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'boot.Pxe', excluding properties defined in parent classes.

.PARAMETER InterfaceName
The name of the underlying virtual ethernet interface used by the PXE boot device.
.PARAMETER InterfaceSource
Lists the supported Interface Source for PXE device. Supported values are ""name"" and ""mac"".
.PARAMETER IpType
The IP Address family type to use during the PXE Boot process.
.PARAMETER MacAddress
The MAC Address of the underlying virtual ethernet interface used by the PXE boot device.
.PARAMETER Port
The Port ID of the adapter on which the underlying virtual ethernet interface is present. If no port is specified, the default value is -1. Supported values are -1 to 255.
.PARAMETER Slot
The slot ID of the adapter on which the underlying virtual ethernet interface is present. Supported values are ( 1 - 255, ""MLOM"", ""L"", ""L1"", ""L2"", ""OCP"").
.OUTPUTS

BootPxeAllOf<PSCustomObject>
#>

function Initialize-IntersightBootPxeAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9-._:]*$")]
        [String]
        ${InterfaceName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("name", "mac", "port")]
        [String]
        ${InterfaceSource} = "name",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("None", "IPv4", "IPv6")]
        [String]
        ${IpType} = "None",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(((\\d|([a-f]|[A-F])){2}:){5}(\\d|([a-f]|[A-F])){2})$")]
        [String]
        ${MacAddress},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Port},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]|L|MLOM|L1|L2|OCP)$")]
        [String]
        ${Slot}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightBootPxeAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Port -and $Port -gt 255) {
          throw "invalid value for 'Port', must be smaller than or equal to 255."
        }

        if (!$Port -and $Port -lt -1) {
          throw "invalid value for 'Port', must be greater than or equal to -1."
        }

        
        $PSO = [PSCustomObject]@{
            "InterfaceName" = ${InterfaceName}
            "InterfaceSource" = ${InterfaceSource}
            "IpType" = ${IpType}
            "MacAddress" = ${MacAddress}
            "Port" = ${Port}
            "Slot" = ${Slot}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BootPxeAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to BootPxeAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BootPxeAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToBootPxeAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightBootPxeAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightBootPxeAllOf
        $AllProperties = ("InterfaceName", "InterfaceSource", "IpType", "MacAddress", "Port", "Slot")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InterfaceName"))) { #optional property not found
            $InterfaceName = $null
        } else {
            $InterfaceName = $JsonParameters.PSobject.Properties["InterfaceName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InterfaceSource"))) { #optional property not found
            $InterfaceSource = $null
        } else {
            $InterfaceSource = $JsonParameters.PSobject.Properties["InterfaceSource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IpType"))) { #optional property not found
            $IpType = $null
        } else {
            $IpType = $JsonParameters.PSobject.Properties["IpType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MacAddress"))) { #optional property not found
            $MacAddress = $null
        } else {
            $MacAddress = $JsonParameters.PSobject.Properties["MacAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["Port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot"))) { #optional property not found
            $Slot = $null
        } else {
            $Slot = $JsonParameters.PSobject.Properties["Slot"].value
        }

        $PSO = [PSCustomObject]@{
            "InterfaceName" = ${InterfaceName}
            "InterfaceSource" = ${InterfaceSource}
            "IpType" = ${IpType}
            "MacAddress" = ${MacAddress}
            "Port" = ${Port}
            "Slot" = ${Slot}
        }

        return $PSO
    }

}

