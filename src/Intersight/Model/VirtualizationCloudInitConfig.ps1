#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

It is a configuration for early initialization of virtual machine instances. It enables automatic configuration of virtual machine instances as it boots.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER ConfigType
Virtual machine cloud init configuration type. * `` - No cloud init specified. Cloud-init configurations are not sent to hypervisor, if none is selected. * `NoCloudSource` - Allows the user to provide user-data to the instance without running a network service. * `CloudConfigDrive` - Allows the user to provide user-data and network-data from cloud.
.PARAMETER NetworkData
Network configuration data for a virtual machine.
.PARAMETER NetworkDataBase64Encoded
Set to true, if the cloud init network data is in base64 format.
.PARAMETER UserData
User configuration data for a virtual machine such as adding user, group etc.
.PARAMETER UserDataBase64Encoded
Set to true, if the cloud init user data is in base64 format.
.OUTPUTS

VirtualizationCloudInitConfig<PSCustomObject>
#>

function Initialize-IntersightVirtualizationCloudInitConfig {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("virtualization.CloudInitConfig")]
        [String]
        ${ClassId} = "virtualization.CloudInitConfig",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("virtualization.CloudInitConfig")]
        [String]
        ${ObjectType} = "virtualization.CloudInitConfig",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("", "NoCloudSource", "CloudConfigDrive")]
        [String]
        ${ConfigType} = "",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NetworkData},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NetworkDataBase64Encoded},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserData},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UserDataBase64Encoded}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightVirtualizationCloudInitConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "ConfigType" = ${ConfigType}
            "NetworkData" = ${NetworkData}
            "NetworkDataBase64Encoded" = ${NetworkDataBase64Encoded}
            "UserData" = ${UserData}
            "UserDataBase64Encoded" = ${UserDataBase64Encoded}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VirtualizationCloudInitConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to VirtualizationCloudInitConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VirtualizationCloudInitConfig<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToVirtualizationCloudInitConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightVirtualizationCloudInitConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightVirtualizationCloudInitConfig
        $AllProperties = ("ClassId", "ObjectType", "ConfigType", "NetworkData", "NetworkDataBase64Encoded", "UserData", "UserDataBase64Encoded")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ConfigType"))) { #optional property not found
            $ConfigType = $null
        } else {
            $ConfigType = $JsonParameters.PSobject.Properties["ConfigType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NetworkData"))) { #optional property not found
            $NetworkData = $null
        } else {
            $NetworkData = $JsonParameters.PSobject.Properties["NetworkData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NetworkDataBase64Encoded"))) { #optional property not found
            $NetworkDataBase64Encoded = $null
        } else {
            $NetworkDataBase64Encoded = $JsonParameters.PSobject.Properties["NetworkDataBase64Encoded"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UserData"))) { #optional property not found
            $UserData = $null
        } else {
            $UserData = $JsonParameters.PSobject.Properties["UserData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UserDataBase64Encoded"))) { #optional property not found
            $UserDataBase64Encoded = $null
        } else {
            $UserDataBase64Encoded = $JsonParameters.PSobject.Properties["UserDataBase64Encoded"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "ConfigType" = ${ConfigType}
            "NetworkData" = ${NetworkData}
            "NetworkDataBase64Encoded" = ${NetworkDataBase64Encoded}
            "UserData" = ${UserData}
            "UserDataBase64Encoded" = ${UserDataBase64Encoded}
        }

        return $PSO
    }

}

