#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Left
Left-hand datasource. Must be of type table, join, lookup, query, or inline. Placing another join as the left datasource allows you to join arbitrarily many datasources.
.PARAMETER Right
Right-hand datasource. Must be of type lookup, query, or inline.
.PARAMETER RightPrefix
String prefix that will be applied to all columns from the right-hand datasource, to prevent them from colliding with columns from the left-hand datasource. Can be any string, so long as it is nonempty and is not be a prefix of the string __time. Any columns from the left-hand side that start with your rightPrefix will be shadowed. It is up to you to provide a prefix that will not shadow any important columns from the left side.
.PARAMETER Condition
Expression that must be an equality where one side is an expression of the left-hand side, and the other side is a simple column reference to the right-hand side. The right-hand reference must be a simple column reference.
.PARAMETER JoinType
No description available.
.OUTPUTS

TelemetryDruidJoinDataSourceAllOf<PSCustomObject>
#>

function Initialize-IntersightTelemetryDruidJoinDataSourceAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Left},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Right},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RightPrefix},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Condition},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("INNER", "LEFT")]
        [String]
        ${JoinType}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightTelemetryDruidJoinDataSourceAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Left) {
            throw "invalid value for 'Left', 'Left' cannot be null."
        }

        if (!$Right) {
            throw "invalid value for 'Right', 'Right' cannot be null."
        }

        if (!$RightPrefix) {
            throw "invalid value for 'RightPrefix', 'RightPrefix' cannot be null."
        }

        if (!$Condition) {
            throw "invalid value for 'Condition', 'Condition' cannot be null."
        }

        if (!$JoinType) {
            throw "invalid value for 'JoinType', 'JoinType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "left" = ${Left}
            "right" = ${Right}
            "rightPrefix" = ${RightPrefix}
            "condition" = ${Condition}
            "joinType" = ${JoinType}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TelemetryDruidJoinDataSourceAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to TelemetryDruidJoinDataSourceAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TelemetryDruidJoinDataSourceAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToTelemetryDruidJoinDataSourceAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightTelemetryDruidJoinDataSourceAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightTelemetryDruidJoinDataSourceAllOf
        $AllProperties = ("left", "right", "rightPrefix", "condition", "joinType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `left` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "left"))) {
            throw "Error! JSON cannot be serialized due to the required property `left` missing."
        } else {
            $Left = $JsonParameters.PSobject.Properties["left"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "right"))) {
            throw "Error! JSON cannot be serialized due to the required property `right` missing."
        } else {
            $Right = $JsonParameters.PSobject.Properties["right"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rightPrefix"))) {
            throw "Error! JSON cannot be serialized due to the required property `rightPrefix` missing."
        } else {
            $RightPrefix = $JsonParameters.PSobject.Properties["rightPrefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "condition"))) {
            throw "Error! JSON cannot be serialized due to the required property `condition` missing."
        } else {
            $Condition = $JsonParameters.PSobject.Properties["condition"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "joinType"))) {
            throw "Error! JSON cannot be serialized due to the required property `joinType` missing."
        } else {
            $JoinType = $JsonParameters.PSobject.Properties["joinType"].value
        }

        $PSO = [PSCustomObject]@{
            "left" = ${Left}
            "right" = ${Right}
            "rightPrefix" = ${RightPrefix}
            "condition" = ${Condition}
            "joinType" = ${JoinType}
        }

        return $PSO
    }

}

