#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'snmp.Policy', excluding properties defined in parent classes.

.PARAMETER AccessCommunityString
The default SNMPv1, SNMPv2c community name or SNMPv3 username to include on any trap messages sent to the SNMP host. The name can be 18 characters long.
.PARAMETER CommunityAccess
Controls access to the information in the inventory tables. Applicable only for SNMPv1 and SNMPv2c users.
.PARAMETER Enabled
State of the SNMP Policy on the endpoint. If enabled, the endpoint sends SNMP traps to the designated host.
.PARAMETER EngineId
User-defined unique identification of the static engine.
.PARAMETER SnmpPort
Port on which Cisco IMC SNMP agent runs.
.PARAMETER SnmpTraps
No description available.
.PARAMETER SnmpUsers
No description available.
.PARAMETER SysContact
Contact person responsible for the SNMP implementation. Enter a string up to 64 characters, such as an email address or a name and telephone number.
.PARAMETER SysLocation
Location of host on which the SNMP agent (server) runs.
.PARAMETER TrapCommunity
SNMP community group used for sending SNMP trap to other devices. Valid only for SNMPv2c users.
.PARAMETER Organization
No description available.
.PARAMETER Profiles
An array of relationships to policyAbstractConfigProfile resources.
.OUTPUTS

SnmpPolicyAllOf<PSCustomObject>
#>

function Initialize-IntersightSnmpPolicyAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessCommunityString},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Disabled", "Limited", "Full")]
        [String]
        ${CommunityAccess} = "Disabled",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^#!&]*$")]
        [String]
        ${EngineId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnmpPort},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SnmpTraps},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SnmpUsers},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SysContact},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SysLocation},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TrapCommunity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Organization},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Profiles}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightSnmpPolicyAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$AccessCommunityString -and $AccessCommunityString.length -gt 18) {
            throw "invalid value for 'AccessCommunityString', the character length must be smaller than or equal to 18."
        }

        if (!$EngineId -and $EngineId.length -gt 27) {
            throw "invalid value for 'EngineId', the character length must be smaller than or equal to 27."
        }

        if (!$SnmpPort -and $SnmpPort -gt 65535) {
          throw "invalid value for 'SnmpPort', must be smaller than or equal to 65535."
        }

        if (!$SnmpPort -and $SnmpPort -lt 1) {
          throw "invalid value for 'SnmpPort', must be greater than or equal to 1."
        }

        if (!$SysContact -and $SysContact.length -gt 64) {
            throw "invalid value for 'SysContact', the character length must be smaller than or equal to 64."
        }

        if (!$SysLocation -and $SysLocation.length -gt 64) {
            throw "invalid value for 'SysLocation', the character length must be smaller than or equal to 64."
        }

        if (!$TrapCommunity -and $TrapCommunity.length -gt 18) {
            throw "invalid value for 'TrapCommunity', the character length must be smaller than or equal to 18."
        }

        
        $PSO = [PSCustomObject]@{
            "AccessCommunityString" = ${AccessCommunityString}
            "CommunityAccess" = ${CommunityAccess}
            "Enabled" = ${Enabled}
            "EngineId" = ${EngineId}
            "SnmpPort" = ${SnmpPort}
            "SnmpTraps" = ${SnmpTraps}
            "SnmpUsers" = ${SnmpUsers}
            "SysContact" = ${SysContact}
            "SysLocation" = ${SysLocation}
            "TrapCommunity" = ${TrapCommunity}
            "Organization" = ${Organization}
            "Profiles" = ${Profiles}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SnmpPolicyAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to SnmpPolicyAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SnmpPolicyAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToSnmpPolicyAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightSnmpPolicyAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightSnmpPolicyAllOf
        $AllProperties = ("AccessCommunityString", "CommunityAccess", "Enabled", "EngineId", "SnmpPort", "SnmpTraps", "SnmpUsers", "SysContact", "SysLocation", "TrapCommunity", "Organization", "Profiles")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AccessCommunityString"))) { #optional property not found
            $AccessCommunityString = $null
        } else {
            $AccessCommunityString = $JsonParameters.PSobject.Properties["AccessCommunityString"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CommunityAccess"))) { #optional property not found
            $CommunityAccess = $null
        } else {
            $CommunityAccess = $JsonParameters.PSobject.Properties["CommunityAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["Enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EngineId"))) { #optional property not found
            $EngineId = $null
        } else {
            $EngineId = $JsonParameters.PSobject.Properties["EngineId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SnmpPort"))) { #optional property not found
            $SnmpPort = $null
        } else {
            $SnmpPort = $JsonParameters.PSobject.Properties["SnmpPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SnmpTraps"))) { #optional property not found
            $SnmpTraps = $null
        } else {
            $SnmpTraps = $JsonParameters.PSobject.Properties["SnmpTraps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SnmpUsers"))) { #optional property not found
            $SnmpUsers = $null
        } else {
            $SnmpUsers = $JsonParameters.PSobject.Properties["SnmpUsers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SysContact"))) { #optional property not found
            $SysContact = $null
        } else {
            $SysContact = $JsonParameters.PSobject.Properties["SysContact"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SysLocation"))) { #optional property not found
            $SysLocation = $null
        } else {
            $SysLocation = $JsonParameters.PSobject.Properties["SysLocation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TrapCommunity"))) { #optional property not found
            $TrapCommunity = $null
        } else {
            $TrapCommunity = $JsonParameters.PSobject.Properties["TrapCommunity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Organization"))) { #optional property not found
            $Organization = $null
        } else {
            $Organization = $JsonParameters.PSobject.Properties["Organization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Profiles"))) { #optional property not found
            $Profiles = $null
        } else {
            $Profiles = $JsonParameters.PSobject.Properties["Profiles"].value
        }

        $PSO = [PSCustomObject]@{
            "AccessCommunityString" = ${AccessCommunityString}
            "CommunityAccess" = ${CommunityAccess}
            "Enabled" = ${Enabled}
            "EngineId" = ${EngineId}
            "SnmpPort" = ${SnmpPort}
            "SnmpTraps" = ${SnmpTraps}
            "SnmpUsers" = ${SnmpUsers}
            "SysContact" = ${SysContact}
            "SysLocation" = ${SysLocation}
            "TrapCommunity" = ${TrapCommunity}
            "Organization" = ${Organization}
            "Profiles" = ${Profiles}
        }

        return $PSO
    }

}

