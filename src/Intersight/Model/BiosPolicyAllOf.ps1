#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'bios.Policy', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER AcsControlGpu1state
BIOS Token for setting ACS Control GPU-1 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlGpu2state
BIOS Token for setting ACS Control GPU-2 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlGpu3state
BIOS Token for setting ACS Control GPU-3 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlGpu4state
BIOS Token for setting ACS Control GPU-4 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlGpu5state
BIOS Token for setting ACS Control GPU-5 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlGpu6state
BIOS Token for setting ACS Control GPU-6 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlGpu7state
BIOS Token for setting ACS Control GPU-7 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlGpu8state
BIOS Token for setting ACS Control GPU-8 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlSlot11state
BIOS Token for setting ACS Control Slot 11 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlSlot12state
BIOS Token for setting ACS Control Slot 12 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlSlot13state
BIOS Token for setting ACS Control Slot 13 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AcsControlSlot14state
BIOS Token for setting ACS Control Slot 14 configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AdjacentCacheLinePrefetch
BIOS Token for setting Adjacent Cache Line Prefetcher configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AdvancedMemTest
BIOS Token for setting Advanced Memory Test configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AllUsbDevices
BIOS Token for setting All USB Devices configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Altitude
BIOS Token for setting Altitude configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1500-m` - Value - 1500-m for configuring Altitude token. * `300-m` - Value - 300-m for configuring Altitude token. * `3000-m` - Value - 3000-m for configuring Altitude token. * `900-m` - Value - 900-m for configuring Altitude token. * `auto` - Value - auto for configuring Altitude token.
.PARAMETER AspmSupport
BIOS Token for setting ASPM Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring AspmSupport token. * `Disabled` - Value - Disabled for configuring AspmSupport token. * `Force L0s` - Value - Force L0s for configuring AspmSupport token. * `L1 Only` - Value - L1 Only for configuring AspmSupport token.
.PARAMETER AssertNmiOnPerr
BIOS Token for setting Assert NMI on PERR configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AssertNmiOnSerr
BIOS Token for setting Assert NMI on SERR configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AutoCcState
BIOS Token for setting Autonomous Core C-state configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER AutonumousCstateEnable
BIOS Token for setting CPU Autonomous Cstate configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER BaudRate
BIOS Token for setting Baud Rate configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `115200` - Value - 115200 for configuring BaudRate token. * `19200` - Value - 19200 for configuring BaudRate token. * `38400` - Value - 38400 for configuring BaudRate token. * `57600` - Value - 57600 for configuring BaudRate token. * `9600` - Value - 9600 for configuring BaudRate token.
.PARAMETER BmeDmaMitigation
BIOS Token for setting BME DMA Mitigation configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER BootOptionNumRetry
BIOS Token for setting Number of Retries configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `13` - Value - 13 for configuring BootOptionNumRetry token. * `5` - Value - 5 for configuring BootOptionNumRetry token. * `Infinite` - Value - Infinite for configuring BootOptionNumRetry token.
.PARAMETER BootOptionReCoolDown
BIOS Token for setting Cool Down Time  (sec) configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `15` - Value - 15 for configuring BootOptionReCoolDown token. * `45` - Value - 45 for configuring BootOptionReCoolDown token. * `90` - Value - 90 for configuring BootOptionReCoolDown token.
.PARAMETER BootOptionRetry
BIOS Token for setting Boot Option Retry configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER BootPerformanceMode
BIOS Token for setting Boot Performance Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Max Efficient` - Value - Max Efficient for configuring BootPerformanceMode token. * `Max Performance` - Value - Max Performance for configuring BootPerformanceMode token. * `Set by Intel NM` - Value - Set by Intel NM for configuring BootPerformanceMode token.
.PARAMETER CbsCmnCpuCpb
BIOS Token for setting Core Performance Boost configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuCpb token. * `disabled` - Value - disabled for configuring CbsCmnCpuCpb token.
.PARAMETER CbsCmnCpuGenDowncoreCtrl
BIOS Token for setting Downcore Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuGenDowncoreCtrl token. * `FOUR (2 + 2)` - Value - FOUR (2 + 2) for configuring CbsCmnCpuGenDowncoreCtrl token. * `FOUR (4 + 0)` - Value - FOUR (4 + 0) for configuring CbsCmnCpuGenDowncoreCtrl token. * `SIX (3 + 3)` - Value - SIX (3 + 3) for configuring CbsCmnCpuGenDowncoreCtrl token. * `THREE (3 + 0)` - Value - THREE (3 + 0) for configuring CbsCmnCpuGenDowncoreCtrl token. * `TWO (1 + 1)` - Value - TWO (1 + 1) for configuring CbsCmnCpuGenDowncoreCtrl token. * `TWO (2 + 0)` - Value - TWO (2 + 0) for configuring CbsCmnCpuGenDowncoreCtrl token.
.PARAMETER CbsCmnCpuGlobalCstateCtrl
BIOS Token for setting Global C-state Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuGlobalCstateCtrl token. * `disabled` - Value - disabled for configuring CbsCmnCpuGlobalCstateCtrl token. * `enabled` - Value - enabled for configuring CbsCmnCpuGlobalCstateCtrl token.
.PARAMETER CbsCmnCpuL1streamHwPrefetcher
BIOS Token for setting L1 Stream HW Prefetcher configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuL1streamHwPrefetcher token. * `disabled` - Value - disabled for configuring CbsCmnCpuL1streamHwPrefetcher token. * `enabled` - Value - enabled for configuring CbsCmnCpuL1streamHwPrefetcher token.
.PARAMETER CbsCmnCpuL2streamHwPrefetcher
BIOS Token for setting L2 Stream HW Prefetcher configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnCpuL2streamHwPrefetcher token. * `disabled` - Value - disabled for configuring CbsCmnCpuL2streamHwPrefetcher token. * `enabled` - Value - enabled for configuring CbsCmnCpuL2streamHwPrefetcher token.
.PARAMETER CbsCmnDeterminismSlider
BIOS Token for setting Determinism Slider configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnDeterminismSlider token. * `Performance` - Value - Performance for configuring CbsCmnDeterminismSlider token. * `Power` - Value - Power for configuring CbsCmnDeterminismSlider token.
.PARAMETER CbsCmnGnbNbIommu
BIOS Token for setting IOMMU configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnGnbNbIommu token. * `disabled` - Value - disabled for configuring CbsCmnGnbNbIommu token. * `enabled` - Value - enabled for configuring CbsCmnGnbNbIommu token.
.PARAMETER CbsCmnMemCtrlBankGroupSwapDdr4
BIOS Token for setting Bank Group Swap configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnMemCtrlBankGroupSwapDdr4 token. * `disabled` - Value - disabled for configuring CbsCmnMemCtrlBankGroupSwapDdr4 token. * `enabled` - Value - enabled for configuring CbsCmnMemCtrlBankGroupSwapDdr4 token.
.PARAMETER CbsCmnMemMapBankInterleaveDdr4
BIOS Token for setting Chipset Interleave configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmnMemMapBankInterleaveDdr4 token. * `disabled` - Value - disabled for configuring CbsCmnMemMapBankInterleaveDdr4 token.
.PARAMETER CbsCmncTdpCtl
BIOS Token for setting cTDP Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsCmncTdpCtl token. * `Manual` - Value - Manual for configuring CbsCmncTdpCtl token.
.PARAMETER CbsDfCmnMemIntlv
BIOS Token for setting AMD Memory Interleaving configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CbsDfCmnMemIntlv token. * `Channel` - Value - Channel for configuring CbsDfCmnMemIntlv token. * `Die` - Value - Die for configuring CbsDfCmnMemIntlv token. * `None` - Value - None for configuring CbsDfCmnMemIntlv token. * `Socket` - Value - Socket for configuring CbsDfCmnMemIntlv token.
.PARAMETER CbsDfCmnMemIntlvSize
BIOS Token for setting AMD Memory Interleaving Size configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1 KB` - Value - 1 KiB for configuring CbsDfCmnMemIntlvSize token. * `2 KB` - Value - 2 KiB for configuring CbsDfCmnMemIntlvSize token. * `256 Bytes` - Value - 256 Bytes for configuring CbsDfCmnMemIntlvSize token. * `512 Bytes` - Value - 512 Bytes for configuring CbsDfCmnMemIntlvSize token. * `Auto` - Value - Auto for configuring CbsDfCmnMemIntlvSize token.
.PARAMETER CdnEnable
BIOS Token for setting Consistent Device Naming configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER CdnSupport
BIOS Token for setting CDN Support for LOM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring CdnSupport token. * `enabled` - Value - enabled for configuring CdnSupport token. * `LOMs Only` - Value - LOMs Only for configuring CdnSupport token.
.PARAMETER ChannelInterLeave
BIOS Token for setting Channel Interleaving configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1-way` - Value - 1-way for configuring ChannelInterLeave token. * `2-way` - Value - 2-way for configuring ChannelInterLeave token. * `3-way` - Value - 3-way for configuring ChannelInterLeave token. * `4-way` - Value - 4-way for configuring ChannelInterLeave token. * `auto` - Value - auto for configuring ChannelInterLeave token.
.PARAMETER CiscoAdaptiveMemTraining
BIOS Token for setting Adaptive Memory Training configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER CiscoDebugLevel
BIOS Token for setting BIOS Techlog Level configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Maximum` - Value - Maximum for configuring CiscoDebugLevel token. * `Minimum` - Value - Minimum for configuring CiscoDebugLevel token. * `Normal` - Value - Normal for configuring CiscoDebugLevel token.
.PARAMETER CiscoOpromLaunchOptimization
BIOS Token for setting OptionROM Launch Optimization configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER CkeLowPolicy
BIOS Token for setting CKE Low Policy configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `auto` - Value - auto for configuring CkeLowPolicy token. * `disabled` - Value - disabled for configuring CkeLowPolicy token. * `fast` - Value - fast for configuring CkeLowPolicy token. * `slow` - Value - slow for configuring CkeLowPolicy token.
.PARAMETER ClosedLoopThermThrotl
BIOS Token for setting Closed Loop Therm Throt configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER CmciEnable
BIOS Token for setting Processor CMCI configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER ConfigTdp
BIOS Token for setting Config TDP configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER ConfigTdpLevel
BIOS Token for setting Configurable TDP Level configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Level 1` - Value - Level 1 for configuring ConfigTdpLevel token. * `Level 2` - Value - Level 2 for configuring ConfigTdpLevel token. * `Normal` - Value - Normal for configuring ConfigTdpLevel token.
.PARAMETER ConsoleRedirection
BIOS Token for setting Console Redirection configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `com-0` - Value - com-0 for configuring ConsoleRedirection token. * `com-1` - Value - com-1 for configuring ConsoleRedirection token. * `disabled` - Value - disabled for configuring ConsoleRedirection token. * `enabled` - Value - enabled for configuring ConsoleRedirection token. * `serial-port-a` - Value - serial-port-a for configuring ConsoleRedirection token.
.PARAMETER CoreMultiProcessing
BIOS Token for setting Core MultiProcessing configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1` - Value - 1 for configuring CoreMultiProcessing token. * `10` - Value - 10 for configuring CoreMultiProcessing token. * `11` - Value - 11 for configuring CoreMultiProcessing token. * `12` - Value - 12 for configuring CoreMultiProcessing token. * `13` - Value - 13 for configuring CoreMultiProcessing token. * `14` - Value - 14 for configuring CoreMultiProcessing token. * `15` - Value - 15 for configuring CoreMultiProcessing token. * `16` - Value - 16 for configuring CoreMultiProcessing token. * `17` - Value - 17 for configuring CoreMultiProcessing token. * `18` - Value - 18 for configuring CoreMultiProcessing token. * `19` - Value - 19 for configuring CoreMultiProcessing token. * `2` - Value - 2 for configuring CoreMultiProcessing token. * `20` - Value - 20 for configuring CoreMultiProcessing token. * `21` - Value - 21 for configuring CoreMultiProcessing token. * `22` - Value - 22 for configuring CoreMultiProcessing token. * `23` - Value - 23 for configuring CoreMultiProcessing token. * `24` - Value - 24 for configuring CoreMultiProcessing token. * `25` - Value - 25 for configuring CoreMultiProcessing token. * `26` - Value - 26 for configuring CoreMultiProcessing token. * `27` - Value - 27 for configuring CoreMultiProcessing token. * `28` - Value - 28 for configuring CoreMultiProcessing token. * `3` - Value - 3 for configuring CoreMultiProcessing token. * `4` - Value - 4 for configuring CoreMultiProcessing token. * `5` - Value - 5 for configuring CoreMultiProcessing token. * `6` - Value - 6 for configuring CoreMultiProcessing token. * `7` - Value - 7 for configuring CoreMultiProcessing token. * `8` - Value - 8 for configuring CoreMultiProcessing token. * `9` - Value - 9 for configuring CoreMultiProcessing token. * `all` - Value - all for configuring CoreMultiProcessing token.
.PARAMETER CpuEnergyPerformance
BIOS Token for setting Energy Performance configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `balanced-energy` - Value - balanced-energy for configuring CpuEnergyPerformance token. * `balanced-performance` - Value - balanced-performance for configuring CpuEnergyPerformance token. * `balanced-power` - Value - balanced-power for configuring CpuEnergyPerformance token. * `energy-efficient` - Value - energy-efficient for configuring CpuEnergyPerformance token. * `performance` - Value - performance for configuring CpuEnergyPerformance token. * `power` - Value - power for configuring CpuEnergyPerformance token.
.PARAMETER CpuFrequencyFloor
BIOS Token for setting Frequency Floor Override configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER CpuPerformance
BIOS Token for setting CPU Performance configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `custom` - Value - custom for configuring CpuPerformance token. * `enterprise` - Value - enterprise for configuring CpuPerformance token. * `high-throughput` - Value - high-throughput for configuring CpuPerformance token. * `hpc` - Value - hpc for configuring CpuPerformance token.
.PARAMETER CpuPowerManagement
BIOS Token for setting Power Technology configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `custom` - Value - custom for configuring CpuPowerManagement token. * `disabled` - Value - disabled for configuring CpuPowerManagement token. * `energy-efficient` - Value - energy-efficient for configuring CpuPowerManagement token. * `performance` - Value - performance for configuring CpuPowerManagement token.
.PARAMETER CrQos
BIOS Token for setting CR QoS configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Disabled` - Value - Disabled for configuring CrQos token. * `Recipe 1` - Value - Recipe 1 for configuring CrQos token. * `Recipe 2` - Value - Recipe 2 for configuring CrQos token. * `Recipe 3` - Value - Recipe 3 for configuring CrQos token.
.PARAMETER CrfastgoConfig
BIOS Token for setting CR FastGo Config configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring CrfastgoConfig token. * `Default` - Value - Default for configuring CrfastgoConfig token. * `Option 1` - Value - Option 1 for configuring CrfastgoConfig token. * `Option 2` - Value - Option 2 for configuring CrfastgoConfig token. * `Option 3` - Value - Option 3 for configuring CrfastgoConfig token. * `Option 4` - Value - Option 4 for configuring CrfastgoConfig token. * `Option 5` - Value - Option 5 for configuring CrfastgoConfig token.
.PARAMETER DcpmmFirmwareDowngrade
BIOS Token for setting DCPMM Firmware Downgrade configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER DemandScrub
BIOS Token for setting Demand Scrub configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER DirectCacheAccess
BIOS Token for setting Direct Cache Access Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `auto` - Value - auto for configuring DirectCacheAccess token. * `disabled` - Value - disabled for configuring DirectCacheAccess token. * `enabled` - Value - enabled for configuring DirectCacheAccess token.
.PARAMETER DramClockThrottling
BIOS Token for setting DRAM Clock Throttling configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring DramClockThrottling token. * `Balanced` - Value - Balanced for configuring DramClockThrottling token. * `Energy Efficient` - Value - Energy Efficient for configuring DramClockThrottling token. * `Performance` - Value - Performance for configuring DramClockThrottling token.
.PARAMETER DramRefreshRate
BIOS Token for setting DRAM Refresh Rate configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1x` - Value - 1x for configuring DramRefreshRate token. * `2x` - Value - 2x for configuring DramRefreshRate token. * `3x` - Value - 3x for configuring DramRefreshRate token. * `4x` - Value - 4x for configuring DramRefreshRate token. * `Auto` - Value - Auto for configuring DramRefreshRate token.
.PARAMETER DramSwThermalThrottling
BIOS Token for setting DRAM SW Thermal Throttling configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring DramSwThermalThrottling token. * `enabled` - Value - enabled for configuring DramSwThermalThrottling token.
.PARAMETER EnableClockSpreadSpec
BIOS Token for setting External SSC Enable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER EnergyEfficientTurbo
BIOS Token for setting Energy Efficient Turbo configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER EngPerfTuning
BIOS Token for setting Energy Performance Tuning configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `BIOS` - Value - BIOS for configuring EngPerfTuning token. * `OS` - Value - OS for configuring EngPerfTuning token.
.PARAMETER EnhancedIntelSpeedStepTech
BIOS Token for setting Enhanced Intel Speedstep (R) Technology configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER EppEnable
BIOS Token for setting Processor EPP Enable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER EppProfile
BIOS Token for setting EPP Profile configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Balanced Performance` - Value - Balanced Performance for configuring EppProfile token. * `Balanced Power` - Value - Balanced Power for configuring EppProfile token. * `Performance` - Value - Performance for configuring EppProfile token. * `Power` - Value - Power for configuring EppProfile token.
.PARAMETER ExecuteDisableBit
BIOS Token for setting Execute Disable Bit configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER ExtendedApic
BIOS Token for setting Local X2 Apic configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring ExtendedApic token. * `enabled` - Value - enabled for configuring ExtendedApic token. * `X2APIC` - Value - X2APIC for configuring ExtendedApic token. * `XAPIC` - Value - XAPIC for configuring ExtendedApic token.
.PARAMETER FlowControl
BIOS Token for setting Flow Control configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `none` - Value - none for configuring FlowControl token. * `rts-cts` - Value - rts-cts for configuring FlowControl token.
.PARAMETER Frb2enable
BIOS Token for setting FRB-2 Timer configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER HardwarePrefetch
BIOS Token for setting Hardware Prefetcher configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER HwpmEnable
BIOS Token for setting CPU Hardware Power Management configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Disabled` - Value - Disabled for configuring HwpmEnable token. * `HWPM Native Mode` - Value - HWPM Native Mode for configuring HwpmEnable token. * `HWPM OOB Mode` - Value - HWPM OOB Mode for configuring HwpmEnable token. * `NATIVE MODE` - Value - NATIVE MODE for configuring HwpmEnable token. * `Native Mode with no Legacy` - Value - Native Mode with no Legacy for configuring HwpmEnable token. * `OOB MODE` - Value - OOB MODE for configuring HwpmEnable token.
.PARAMETER ImcInterleave
BIOS Token for setting IMC Interleaving configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1-way Interleave` - Value - 1-way Interleave for configuring ImcInterleave token. * `2-way Interleave` - Value - 2-way Interleave for configuring ImcInterleave token. * `Auto` - Value - Auto for configuring ImcInterleave token.
.PARAMETER IntelHyperThreadingTech
BIOS Token for setting Intel HyperThreading Tech configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER IntelSpeedSelect
BIOS Token for setting Intel Speed Select configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Base` - Value - Base for configuring IntelSpeedSelect token. * `Config 1` - Value - Config 1 for configuring IntelSpeedSelect token. * `Config 2` - Value - Config 2 for configuring IntelSpeedSelect token.
.PARAMETER IntelTurboBoostTech
BIOS Token for setting Intel Turbo Boost Tech configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER IntelVirtualizationTechnology
BIOS Token for setting Intel (R) VT configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER IntelVtForDirectedIo
BIOS Token for setting Intel VT for Directed IO configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER IntelVtdCoherencySupport
BIOS Token for setting Intel (R) VT-d Coherency Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER IntelVtdInterruptRemapping
BIOS Token for setting Intel (R) VT-d Interrupt Remapping configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER IntelVtdPassThroughDmaSupport
BIOS Token for setting Intel (R) VT-d PassThrough DMA Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER IntelVtdatsSupport
BIOS Token for setting Intel VTD ATS Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER IohErrorEnable
BIOS Token for setting IIO Error Enable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `No` - Value - No for configuring IohErrorEnable token. * `Yes` - Value - Yes for configuring IohErrorEnable token.
.PARAMETER IohResource
BIOS Token for setting IOH Resource Allocation configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `IOH0 24k IOH1 40k` - Value - IOH0 24k IOH1 40k for configuring IohResource token. * `IOH0 32k IOH1 32k` - Value - IOH0 32k IOH1 32k for configuring IohResource token. * `IOH0 40k IOH1 24k` - Value - IOH0 40k IOH1 24k for configuring IohResource token. * `IOH0 48k IOH1 16k` - Value - IOH0 48k IOH1 16k for configuring IohResource token. * `IOH0 56k IOH1 8k` - Value - IOH0 56k IOH1 8k for configuring IohResource token.
.PARAMETER IpPrefetch
BIOS Token for setting DCU IP Prefetcher configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Ipv4http
BIOS Token for setting IPV4 HTTP Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Ipv4pxe
BIOS Token for setting IPv4 PXE Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Ipv6http
BIOS Token for setting IPV6 HTTP Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Ipv6pxe
BIOS Token for setting IPV6 PXE Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER KtiPrefetch
BIOS Token for setting KTI Prefetch configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER LegacyOsRedirection
BIOS Token for setting Legacy OS Redirection configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER LegacyUsbSupport
BIOS Token for setting Legacy USB Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `auto` - Value - auto for configuring LegacyUsbSupport token. * `disabled` - Value - disabled for configuring LegacyUsbSupport token. * `enabled` - Value - enabled for configuring LegacyUsbSupport token.
.PARAMETER LlcPrefetch
BIOS Token for setting LLC Prefetch configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER LomPort0state
BIOS Token for setting LOM Port 0 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring LomPort0state token. * `enabled` - Value - enabled for configuring LomPort0state token. * `Legacy Only` - Value - Legacy Only for configuring LomPort0state token. * `UEFI Only` - Value - UEFI Only for configuring LomPort0state token.
.PARAMETER LomPort1state
BIOS Token for setting LOM Port 1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring LomPort1state token. * `enabled` - Value - enabled for configuring LomPort1state token. * `Legacy Only` - Value - Legacy Only for configuring LomPort1state token. * `UEFI Only` - Value - UEFI Only for configuring LomPort1state token.
.PARAMETER LomPort2state
BIOS Token for setting LOM Port 2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring LomPort2state token. * `enabled` - Value - enabled for configuring LomPort2state token. * `Legacy Only` - Value - Legacy Only for configuring LomPort2state token. * `UEFI Only` - Value - UEFI Only for configuring LomPort2state token.
.PARAMETER LomPort3state
BIOS Token for setting LOM Port 3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring LomPort3state token. * `enabled` - Value - enabled for configuring LomPort3state token. * `Legacy Only` - Value - Legacy Only for configuring LomPort3state token. * `UEFI Only` - Value - UEFI Only for configuring LomPort3state token.
.PARAMETER LomPortsAllState
BIOS Token for setting All Onboard LOM Ports configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER LvDdrMode
BIOS Token for setting Low Voltage DDR Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `auto` - Value - auto for configuring LvDdrMode token. * `performance-mode` - Value - performance-mode for configuring LvDdrMode token. * `power-saving-mode` - Value - power-saving-mode for configuring LvDdrMode token.
.PARAMETER MakeDeviceNonBootable
BIOS Token for setting Make Device Non Bootable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER MemoryInterLeave
BIOS Token for setting Intel Memory Interleaving configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1 Way Node Interleave` - Value - 1 Way Node Interleave for configuring MemoryInterLeave token. * `2 Way Node Interleave` - Value - 2 Way Node Interleave for configuring MemoryInterLeave token. * `4 Way Node Interleave` - Value - 4 Way Node Interleave for configuring MemoryInterLeave token. * `8 Way Node Interleave` - Value - 8 Way Node Interleave for configuring MemoryInterLeave token. * `disabled` - Value - disabled for configuring MemoryInterLeave token. * `enabled` - Value - enabled for configuring MemoryInterLeave token.
.PARAMETER MemoryMappedIoAbove4gb
BIOS Token for setting Memory Mapped IO above 4GiB configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER MemoryRefreshRate
BIOS Token for setting Memory Refresh Rate configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1x Refresh` - Value - 1x Refresh for configuring MemoryRefreshRate token. * `2x Refresh` - Value - 2x Refresh for configuring MemoryRefreshRate token.
.PARAMETER MemorySizeLimit
BIOS Token for setting Memory Size Limit in GiB configuration (0-65535).
.PARAMETER MemoryThermalThrottling
BIOS Token for setting Memory Thermal Throttling Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `CLTT with PECI` - Value - CLTT with PECI for configuring MemoryThermalThrottling token. * `Disabled` - Value - Disabled for configuring MemoryThermalThrottling token.
.PARAMETER MirroringMode
BIOS Token for setting Mirroring Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `inter-socket` - Value - inter-socket for configuring MirroringMode token. * `intra-socket` - Value - intra-socket for configuring MirroringMode token.
.PARAMETER MmcfgBase
BIOS Token for setting MMCFG BASE configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1 GB` - Value - 1 GiB for configuring MmcfgBase token. * `2 GB` - Value - 2 GiB for configuring MmcfgBase token. * `2.5 GB` - Value - 2.5 GiB for configuring MmcfgBase token. * `3 GB` - Value - 3 GiB for configuring MmcfgBase token. * `Auto` - Value - Auto for configuring MmcfgBase token.
.PARAMETER NetworkStack
BIOS Token for setting Network Stack configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER NumaOptimized
BIOS Token for setting NUMA Optimized configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER NvmdimmPerformConfig
BIOS Token for setting NVM Performance Setting configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `BW Optimized` - Value - BW Optimized for configuring NvmdimmPerformConfig token. * `Balanced Profile` - Value - Balanced Profile for configuring NvmdimmPerformConfig token. * `Latency Optimized` - Value - Latency Optimized for configuring NvmdimmPerformConfig token.
.PARAMETER Onboard10gbitLom
BIOS Token for setting Onboard 10Gbit LOM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER OnboardGbitLom
BIOS Token for setting Onboard Gbit LOM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER OnboardScuStorageSupport
BIOS Token for setting Onboard SCU Storage Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER OnboardScuStorageSwStack
BIOS Token for setting Onboard SCU Storage SW Stack configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Intel RSTe` - Value - Intel RSTe for configuring OnboardScuStorageSwStack token. * `LSI SW RAID` - Value - LSI SW RAID for configuring OnboardScuStorageSwStack token.
.PARAMETER OsBootWatchdogTimer
BIOS Token for setting OS Boot Watchdog Timer configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER OsBootWatchdogTimerPolicy
BIOS Token for setting OS Boot Watchdog Timer Policy configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `do-nothing` - Value - do-nothing for configuring OsBootWatchdogTimerPolicy token. * `power-off` - Value - power-off for configuring OsBootWatchdogTimerPolicy token. * `reset` - Value - reset for configuring OsBootWatchdogTimerPolicy token.
.PARAMETER OsBootWatchdogTimerTimeout
BIOS Token for setting OS Boot Watchdog Timer Timeout configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `10-minutes` - Value - 10-minutes for configuring OsBootWatchdogTimerTimeout token. * `15-minutes` - Value - 15-minutes for configuring OsBootWatchdogTimerTimeout token. * `20-minutes` - Value - 20-minutes for configuring OsBootWatchdogTimerTimeout token. * `5-minutes` - Value - 5-minutes for configuring OsBootWatchdogTimerTimeout token.
.PARAMETER OutOfBandMgmtPort
BIOS Token for setting Out-of-Band Mgmt Port configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PackageCstateLimit
BIOS Token for setting Package C State Limit configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PackageCstateLimit token. * `C0 C1 State` - Value - C0 C1 State for configuring PackageCstateLimit token. * `C0/C1` - Value - C0/C1 for configuring PackageCstateLimit token. * `C2` - Value - C2 for configuring PackageCstateLimit token. * `C6 Non Retention` - Value - C6 Non Retention for configuring PackageCstateLimit token. * `C6 Retention` - Value - C6 Retention for configuring PackageCstateLimit token. * `No Limit` - Value - No Limit for configuring PackageCstateLimit token.
.PARAMETER PanicHighWatermark
BIOS Token for setting Panic and High Watermark configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `High` - Value - High for configuring PanicHighWatermark token. * `Low` - Value - Low for configuring PanicHighWatermark token.
.PARAMETER PartialMirrorModeConfig
BIOS Token for setting Partial Memory Mirror Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring PartialMirrorModeConfig token. * `Percentage` - Value - Percentage for configuring PartialMirrorModeConfig token. * `Value in GB` - Value - Value in GiB for configuring PartialMirrorModeConfig token.
.PARAMETER PartialMirrorPercent
BIOS Token for setting Partial Mirror Percentage configuration (0.00-50.00).
.PARAMETER PartialMirrorValue1
BIOS Token for setting Partial Mirror1 Size in GiB configuration (0-65535).
.PARAMETER PartialMirrorValue2
BIOS Token for setting Partial Mirror2 Size in GiB configuration (0-65535).
.PARAMETER PartialMirrorValue3
BIOS Token for setting Partial Mirror3 Size in GiB configuration (0-65535).
.PARAMETER PartialMirrorValue4
BIOS Token for setting Partial Mirror4 Size in GiB configuration (0-65535).
.PARAMETER PatrolScrub
BIOS Token for setting Patrol Scrub configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PatrolScrubDuration
BIOS Token for setting Patrol Scrub Interval configuration (5-23).
.PARAMETER PcIeRasSupport
BIOS Token for setting PCIe RAS Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PcIeSsdHotPlugSupport
BIOS Token for setting NVMe SSD Hot-Plug Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PchUsb30mode
BIOS Token for setting xHCI Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PciOptionRoMs
BIOS Token for setting All PCIe Slots OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring PciOptionRoMs token. * `enabled` - Value - enabled for configuring PciOptionRoMs token. * `Legacy Only` - Value - Legacy Only for configuring PciOptionRoMs token. * `UEFI Only` - Value - UEFI Only for configuring PciOptionRoMs token.
.PARAMETER PciRomClp
BIOS Token for setting PCI ROM CLP configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PcieAriSupport
BIOS Token for setting PCIe ARI Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieAriSupport token. * `disabled` - Value - disabled for configuring PcieAriSupport token. * `enabled` - Value - enabled for configuring PcieAriSupport token.
.PARAMETER PciePllSsc
BIOS Token for setting PCIe PLL SSC configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PciePllSsc token. * `Disabled` - Value - Disabled for configuring PciePllSsc token. * `ZeroPointFive` - Value - ZeroPointFive for configuring PciePllSsc token.
.PARAMETER PcieSlotMstorraidOptionRom
BIOS Token for setting PCIe Slot MSTOR RAID OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PcieSlotNvme1linkSpeed
BIOS Token for setting NVME-1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme1linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme1linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme1linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme1linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme1linkSpeed token.
.PARAMETER PcieSlotNvme1optionRom
BIOS Token for setting NVME-1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PcieSlotNvme2linkSpeed
BIOS Token for setting NVME-2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme2linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme2linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme2linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme2linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme2linkSpeed token.
.PARAMETER PcieSlotNvme2optionRom
BIOS Token for setting NVME-2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PcieSlotNvme3linkSpeed
BIOS Token for setting NVME-3 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme3linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme3linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme3linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme3linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme3linkSpeed token.
.PARAMETER PcieSlotNvme3optionRom
BIOS Token for setting NVME-3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PcieSlotNvme4linkSpeed
BIOS Token for setting NVME-4 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme4linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme4linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme4linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme4linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme4linkSpeed token.
.PARAMETER PcieSlotNvme4optionRom
BIOS Token for setting NVME-4 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PcieSlotNvme5linkSpeed
BIOS Token for setting NVME-5 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme5linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme5linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme5linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme5linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme5linkSpeed token.
.PARAMETER PcieSlotNvme5optionRom
BIOS Token for setting NVME-5 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PcieSlotNvme6linkSpeed
BIOS Token for setting NVME-6 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring PcieSlotNvme6linkSpeed token. * `Disabled` - Value - Disabled for configuring PcieSlotNvme6linkSpeed token. * `GEN1` - Value - GEN1 for configuring PcieSlotNvme6linkSpeed token. * `GEN2` - Value - GEN2 for configuring PcieSlotNvme6linkSpeed token. * `GEN3` - Value - GEN3 for configuring PcieSlotNvme6linkSpeed token.
.PARAMETER PcieSlotNvme6optionRom
BIOS Token for setting NVME-6 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PopSupport
BIOS Token for setting Power ON Password configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER PostErrorPause
BIOS Token for setting POST Error Pause configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER ProcessorC1e
BIOS Token for setting Processor C1E configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER ProcessorC3report
BIOS Token for setting Processor C3 Report configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER ProcessorC6report
BIOS Token for setting Processor C6 Report configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER ProcessorCstate
BIOS Token for setting CPU C State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Psata
BIOS Token for setting P-SATA Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `AHCI` - Value - AHCI for configuring Psata token. * `Disabled` - Value - Disabled for configuring Psata token. * `LSI SW RAID` - Value - LSI SW RAID for configuring Psata token.
.PARAMETER PstateCoordType
BIOS Token for setting P-STATE Coordination configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `HW ALL` - Value - HW ALL for configuring PstateCoordType token. * `SW ALL` - Value - SW ALL for configuring PstateCoordType token. * `SW ANY` - Value - SW ANY for configuring PstateCoordType token.
.PARAMETER PuttyKeyPad
BIOS Token for setting Putty KeyPad configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `ESCN` - Value - ESCN for configuring PuttyKeyPad token. * `LINUX` - Value - LINUX for configuring PuttyKeyPad token. * `SCO` - Value - SCO for configuring PuttyKeyPad token. * `VT100` - Value - VT100 for configuring PuttyKeyPad token. * `VT400` - Value - VT400 for configuring PuttyKeyPad token. * `XTERMR6` - Value - XTERMR6 for configuring PuttyKeyPad token.
.PARAMETER PwrPerfTuning
BIOS Token for setting Power Performance Tuning configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `bios` - Value - BIOS for configuring PwrPerfTuning token. * `os` - Value - os for configuring PwrPerfTuning token.
.PARAMETER QpiLinkFrequency
BIOS Token for setting QPI Link Frequency Select configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `6.4-gt/s` - Value - 6.4-gt/s for configuring QpiLinkFrequency token. * `7.2-gt/s` - Value - 7.2-gt/s for configuring QpiLinkFrequency token. * `8.0-gt/s` - Value - 8.0-gt/s for configuring QpiLinkFrequency token. * `9.6-gt/s` - Value - 9.6-gt/s for configuring QpiLinkFrequency token. * `auto` - Value - auto for configuring QpiLinkFrequency token.
.PARAMETER QpiLinkSpeed
BIOS Token for setting UPI Link Frequency Select configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `10.4GT/s` - Value - 10.4GT/s for configuring QpiLinkSpeed token. * `9.6GT/s` - Value - 9.6GT/s for configuring QpiLinkSpeed token. * `Auto` - Value - Auto for configuring QpiLinkSpeed token.
.PARAMETER QpiSnoopMode
BIOS Token for setting QPI Snoop Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `auto` - Value - auto for configuring QpiSnoopMode token. * `cluster-on-die` - Value - cluster-on-die for configuring QpiSnoopMode token. * `early-snoop` - Value - early-snoop for configuring QpiSnoopMode token. * `home-directory-snoop` - Value - home-directory-snoop for configuring QpiSnoopMode token. * `home-directory-snoop-with-osb` - Value - home-directory-snoop-with-osb for configuring QpiSnoopMode token. * `home-snoop` - Value - home-snoop for configuring QpiSnoopMode token.
.PARAMETER RankInterLeave
BIOS Token for setting Rank Interleaving configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `1-way` - Value - 1-way for configuring RankInterLeave token. * `2-way` - Value - 2-way for configuring RankInterLeave token. * `4-way` - Value - 4-way for configuring RankInterLeave token. * `8-way` - Value - 8-way for configuring RankInterLeave token. * `auto` - Value - auto for configuring RankInterLeave token.
.PARAMETER RedirectionAfterPost
BIOS Token for setting Redirection After BIOS POST configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Always Enable` - Value - Always Enable for configuring RedirectionAfterPost token. * `Bootloader` - Value - Bootloader for configuring RedirectionAfterPost token.
.PARAMETER SataModeSelect
BIOS Token for setting SATA Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `AHCI` - Value - AHCI for configuring SataModeSelect token. * `Disabled` - Value - Disabled for configuring SataModeSelect token. * `LSI SW RAID` - Value - LSI SW RAID for configuring SataModeSelect token.
.PARAMETER SelectMemoryRasConfiguration
BIOS Token for setting Memory RAS Configuration configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `adddc-sparing` - Value - adddc-sparing for configuring SelectMemoryRasConfiguration token. * `lockstep` - Value - lockstep for configuring SelectMemoryRasConfiguration token. * `maximum-performance` - Value - maximum-performance for configuring SelectMemoryRasConfiguration token. * `mirror-mode-1lm` - Value - mirror-mode-1lm for configuring SelectMemoryRasConfiguration token. * `mirroring` - Value - mirroring for configuring SelectMemoryRasConfiguration token. * `partial-mirror-mode-1lm` - Value - partial-mirror-mode-1lm for configuring SelectMemoryRasConfiguration token. * `sparing` - Value - sparing for configuring SelectMemoryRasConfiguration token.
.PARAMETER SelectPprType
BIOS Token for setting PPR Type configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SelectPprType token. * `Hard PPR` - Value - Hard PPR for configuring SelectPprType token.
.PARAMETER SerialPortAenable
BIOS Token for setting Serial A Enable configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Sev
BIOS Token for setting Secured Encrypted Virtualization configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `253 ASIDs` - Value - 253 ASIDs for configuring Sev token. * `509 ASIDs` - Value - 509 ASIDs for configuring Sev token. * `Auto` - Value - Auto for configuring Sev token.
.PARAMETER SinglePctlEnable
BIOS Token for setting Single PCTL configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `No` - Value - No for configuring SinglePctlEnable token. * `Yes` - Value - Yes for configuring SinglePctlEnable token.
.PARAMETER Slot10linkSpeed
BIOS Token for setting PCIe Slot:10 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot10linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot10linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot10linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot10linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot10linkSpeed token.
.PARAMETER Slot10state
BIOS Token for setting Slot 10 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot10state token. * `enabled` - Value - enabled for configuring Slot10state token. * `Legacy Only` - Value - Legacy Only for configuring Slot10state token. * `UEFI Only` - Value - UEFI Only for configuring Slot10state token.
.PARAMETER Slot11linkSpeed
BIOS Token for setting PCIe Slot:11 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot11linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot11linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot11linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot11linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot11linkSpeed token.
.PARAMETER Slot11state
BIOS Token for setting Slot 11 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Slot12linkSpeed
BIOS Token for setting PCIe Slot:12 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot12linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot12linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot12linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot12linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot12linkSpeed token.
.PARAMETER Slot12state
BIOS Token for setting Slot 12 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Slot13state
BIOS Token for setting Slot 13 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Slot14state
BIOS Token for setting Slot 14 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Slot1linkSpeed
BIOS Token for setting PCIe Slot:1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot1linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot1linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot1linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot1linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot1linkSpeed token.
.PARAMETER Slot1state
BIOS Token for setting Slot 1 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot1state token. * `enabled` - Value - enabled for configuring Slot1state token. * `Legacy Only` - Value - Legacy Only for configuring Slot1state token. * `UEFI Only` - Value - UEFI Only for configuring Slot1state token.
.PARAMETER Slot2linkSpeed
BIOS Token for setting PCIe Slot:2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot2linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot2linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot2linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot2linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot2linkSpeed token.
.PARAMETER Slot2state
BIOS Token for setting Slot 2 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot2state token. * `enabled` - Value - enabled for configuring Slot2state token. * `Legacy Only` - Value - Legacy Only for configuring Slot2state token. * `UEFI Only` - Value - UEFI Only for configuring Slot2state token.
.PARAMETER Slot3linkSpeed
BIOS Token for setting PCIe Slot:3 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot3linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot3linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot3linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot3linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot3linkSpeed token.
.PARAMETER Slot3state
BIOS Token for setting Slot 3 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot3state token. * `enabled` - Value - enabled for configuring Slot3state token. * `Legacy Only` - Value - Legacy Only for configuring Slot3state token. * `UEFI Only` - Value - UEFI Only for configuring Slot3state token.
.PARAMETER Slot4linkSpeed
BIOS Token for setting PCIe Slot:4 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot4linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot4linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot4linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot4linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot4linkSpeed token.
.PARAMETER Slot4state
BIOS Token for setting Slot 4 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot4state token. * `enabled` - Value - enabled for configuring Slot4state token. * `Legacy Only` - Value - Legacy Only for configuring Slot4state token. * `UEFI Only` - Value - UEFI Only for configuring Slot4state token.
.PARAMETER Slot5linkSpeed
BIOS Token for setting PCIe Slot:5 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot5linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot5linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot5linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot5linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot5linkSpeed token.
.PARAMETER Slot5state
BIOS Token for setting Slot 5 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot5state token. * `enabled` - Value - enabled for configuring Slot5state token. * `Legacy Only` - Value - Legacy Only for configuring Slot5state token. * `UEFI Only` - Value - UEFI Only for configuring Slot5state token.
.PARAMETER Slot6linkSpeed
BIOS Token for setting PCIe Slot:6 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot6linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot6linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot6linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot6linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot6linkSpeed token.
.PARAMETER Slot6state
BIOS Token for setting Slot 6 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot6state token. * `enabled` - Value - enabled for configuring Slot6state token. * `Legacy Only` - Value - Legacy Only for configuring Slot6state token. * `UEFI Only` - Value - UEFI Only for configuring Slot6state token.
.PARAMETER Slot7linkSpeed
BIOS Token for setting PCIe Slot:7 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot7linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot7linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot7linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot7linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot7linkSpeed token.
.PARAMETER Slot7state
BIOS Token for setting Slot 7 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot7state token. * `enabled` - Value - enabled for configuring Slot7state token. * `Legacy Only` - Value - Legacy Only for configuring Slot7state token. * `UEFI Only` - Value - UEFI Only for configuring Slot7state token.
.PARAMETER Slot8linkSpeed
BIOS Token for setting PCIe Slot:8 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot8linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot8linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot8linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot8linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot8linkSpeed token.
.PARAMETER Slot8state
BIOS Token for setting Slot 8 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot8state token. * `enabled` - Value - enabled for configuring Slot8state token. * `Legacy Only` - Value - Legacy Only for configuring Slot8state token. * `UEFI Only` - Value - UEFI Only for configuring Slot8state token.
.PARAMETER Slot9linkSpeed
BIOS Token for setting PCIe Slot:9 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Slot9linkSpeed token. * `Disabled` - Value - Disabled for configuring Slot9linkSpeed token. * `GEN1` - Value - GEN1 for configuring Slot9linkSpeed token. * `GEN2` - Value - GEN2 for configuring Slot9linkSpeed token. * `GEN3` - Value - GEN3 for configuring Slot9linkSpeed token.
.PARAMETER Slot9state
BIOS Token for setting Slot 9 State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring Slot9state token. * `enabled` - Value - enabled for configuring Slot9state token. * `Legacy Only` - Value - Legacy Only for configuring Slot9state token. * `UEFI Only` - Value - UEFI Only for configuring Slot9state token.
.PARAMETER SlotFlomLinkSpeed
BIOS Token for setting PCIe Slot:FLOM Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFlomLinkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFlomLinkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFlomLinkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFlomLinkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFlomLinkSpeed token.
.PARAMETER SlotFrontNvme1linkSpeed
BIOS Token for setting PCIe Slot:Front NVME1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme1linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme1linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme1linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme1linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme1linkSpeed token.
.PARAMETER SlotFrontNvme2linkSpeed
BIOS Token for setting PCIe Slot:Front NVME2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontNvme2linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontNvme2linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontNvme2linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontNvme2linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontNvme2linkSpeed token.
.PARAMETER SlotFrontSlot5linkSpeed
BIOS Token for setting PCIe Slot:Front1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontSlot5linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontSlot5linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontSlot5linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontSlot5linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontSlot5linkSpeed token.
.PARAMETER SlotFrontSlot6linkSpeed
BIOS Token for setting PCIe Slot:Front2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotFrontSlot6linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotFrontSlot6linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotFrontSlot6linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotFrontSlot6linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotFrontSlot6linkSpeed token.
.PARAMETER SlotGpu1state
BIOS Token for setting GPU1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotGpu2state
BIOS Token for setting GPU2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotGpu3state
BIOS Token for setting GPU3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotGpu4state
BIOS Token for setting GPU4 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotGpu5state
BIOS Token for setting GPU5 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotGpu6state
BIOS Token for setting GPU6 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotGpu7state
BIOS Token for setting GPU7 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotGpu8state
BIOS Token for setting GPU8 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotHbaLinkSpeed
BIOS Token for setting PCIe Slot:HBA Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotHbaLinkSpeed token. * `Disabled` - Value - Disabled for configuring SlotHbaLinkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotHbaLinkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotHbaLinkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotHbaLinkSpeed token.
.PARAMETER SlotHbaState
BIOS Token for setting PCIe Slot:HBA OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotHbaState token. * `enabled` - Value - enabled for configuring SlotHbaState token. * `Legacy Only` - Value - Legacy Only for configuring SlotHbaState token. * `UEFI Only` - Value - UEFI Only for configuring SlotHbaState token.
.PARAMETER SlotLom1link
BIOS Token for setting PCIe LOM:1 Link configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotLom2link
BIOS Token for setting PCIe LOM:2 Link configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotMezzState
BIOS Token for setting Slot Mezz State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotMezzState token. * `enabled` - Value - enabled for configuring SlotMezzState token. * `Legacy Only` - Value - Legacy Only for configuring SlotMezzState token. * `UEFI Only` - Value - UEFI Only for configuring SlotMezzState token.
.PARAMETER SlotMlomLinkSpeed
BIOS Token for setting PCIe Slot:MLOM Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotMlomLinkSpeed token. * `Disabled` - Value - Disabled for configuring SlotMlomLinkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotMlomLinkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotMlomLinkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotMlomLinkSpeed token.
.PARAMETER SlotMlomState
BIOS Token for setting PCIe Slot MLOM OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotMlomState token. * `enabled` - Value - enabled for configuring SlotMlomState token. * `Legacy Only` - Value - Legacy Only for configuring SlotMlomState token. * `UEFI Only` - Value - UEFI Only for configuring SlotMlomState token.
.PARAMETER SlotMraidLinkSpeed
BIOS Token for setting MRAID Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotMraidLinkSpeed token. * `Disabled` - Value - Disabled for configuring SlotMraidLinkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotMraidLinkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotMraidLinkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotMraidLinkSpeed token.
.PARAMETER SlotMraidState
BIOS Token for setting PCIe Slot MRAID OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN10state
BIOS Token for setting PCIe Slot N10 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN11state
BIOS Token for setting PCIe Slot N11 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN12state
BIOS Token for setting PCIe Slot N12 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN13state
BIOS Token for setting PCIe Slot N13 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN14state
BIOS Token for setting PCIe Slot N14 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN15state
BIOS Token for setting PCIe Slot N15 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN16state
BIOS Token for setting PCIe Slot N16 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN17state
BIOS Token for setting PCIe Slot N17 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN18state
BIOS Token for setting PCIe Slot N18 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN19state
BIOS Token for setting PCIe Slot N19 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN1state
BIOS Token for setting PCIe Slot N1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotN1state token. * `enabled` - Value - enabled for configuring SlotN1state token. * `Legacy Only` - Value - Legacy Only for configuring SlotN1state token. * `UEFI Only` - Value - UEFI Only for configuring SlotN1state token.
.PARAMETER SlotN20state
BIOS Token for setting PCIe Slot N20 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN21state
BIOS Token for setting PCIe Slot N21 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN22state
BIOS Token for setting PCIe Slot N22 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN23state
BIOS Token for setting PCIe Slot N23 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN24state
BIOS Token for setting PCIe Slot N24 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN2state
BIOS Token for setting PCIe Slot N2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotN2state token. * `enabled` - Value - enabled for configuring SlotN2state token. * `Legacy Only` - Value - Legacy Only for configuring SlotN2state token. * `UEFI Only` - Value - UEFI Only for configuring SlotN2state token.
.PARAMETER SlotN3state
BIOS Token for setting PCIe Slot N3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN4state
BIOS Token for setting PCIe Slot N4 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN5state
BIOS Token for setting PCIe Slot N5 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN6state
BIOS Token for setting PCIe Slot N6 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN7state
BIOS Token for setting PCIe Slot N7 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN8state
BIOS Token for setting PCIe Slot N8 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotN9state
BIOS Token for setting PCIe Slot N9 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotRaidLinkSpeed
BIOS Token for setting RAID Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRaidLinkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRaidLinkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRaidLinkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRaidLinkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRaidLinkSpeed token.
.PARAMETER SlotRaidState
BIOS Token for setting PCIe Slot RAID OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotRearNvme1linkSpeed
BIOS Token for setting PCIe Slot:Rear NVME1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRearNvme1linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRearNvme1linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRearNvme1linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRearNvme1linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRearNvme1linkSpeed token.
.PARAMETER SlotRearNvme1state
BIOS Token for setting PCIe Slot:Rear NVME 1 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotRearNvme2linkSpeed
BIOS Token for setting PCIe Slot:Rear NVME2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRearNvme2linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRearNvme2linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRearNvme2linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRearNvme2linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRearNvme2linkSpeed token.
.PARAMETER SlotRearNvme2state
BIOS Token for setting PCIe Slot:Rear NVME 2 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotRearNvme3state
BIOS Token for setting PCIe Slot:Rear NVME 3 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotRearNvme4state
BIOS Token for setting PCIe Slot:Rear NVME 4 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotRearNvme5state
BIOS Token for setting PCIe Slot:Rear NVME 5 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotRearNvme6state
BIOS Token for setting PCIe Slot:Rear NVME 6 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotRearNvme7state
BIOS Token for setting PCIe Slot:Rear NVME 7 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotRearNvme8state
BIOS Token for setting PCIe Slot:Rear NVME 8 OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SlotRiser1linkSpeed
BIOS Token for setting PCIe Slot:Riser1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser1linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser1linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser1linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser1linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser1linkSpeed token.
.PARAMETER SlotRiser1slot1linkSpeed
BIOS Token for setting PCIe Slot:Riser1 Slot1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser1slot1linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser1slot1linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser1slot1linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser1slot1linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser1slot1linkSpeed token.
.PARAMETER SlotRiser1slot2linkSpeed
BIOS Token for setting PCIe Slot:Riser1 Slot2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser1slot2linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser1slot2linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser1slot2linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser1slot2linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser1slot2linkSpeed token.
.PARAMETER SlotRiser1slot3linkSpeed
BIOS Token for setting PCIe Slot:Riser1 Slot3 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser1slot3linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser1slot3linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser1slot3linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser1slot3linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser1slot3linkSpeed token.
.PARAMETER SlotRiser2linkSpeed
BIOS Token for setting PCIe Slot:Riser2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser2linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser2linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser2linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser2linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser2linkSpeed token.
.PARAMETER SlotRiser2slot4linkSpeed
BIOS Token for setting PCIe Slot:Riser2 Slot4 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser2slot4linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser2slot4linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser2slot4linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser2slot4linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser2slot4linkSpeed token.
.PARAMETER SlotRiser2slot5linkSpeed
BIOS Token for setting PCIe Slot:Riser2 Slot5 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser2slot5linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser2slot5linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser2slot5linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser2slot5linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser2slot5linkSpeed token.
.PARAMETER SlotRiser2slot6linkSpeed
BIOS Token for setting PCIe Slot:Riser2 Slot6 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotRiser2slot6linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotRiser2slot6linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotRiser2slot6linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotRiser2slot6linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotRiser2slot6linkSpeed token.
.PARAMETER SlotSasState
BIOS Token for setting PCIe Slot:SAS OptionROM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `disabled` - Value - disabled for configuring SlotSasState token. * `enabled` - Value - enabled for configuring SlotSasState token. * `Legacy Only` - Value - Legacy Only for configuring SlotSasState token. * `UEFI Only` - Value - UEFI Only for configuring SlotSasState token.
.PARAMETER SlotSsdSlot1linkSpeed
BIOS Token for setting PCIe Slot:FrontSSD1 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotSsdSlot1linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotSsdSlot1linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotSsdSlot1linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotSsdSlot1linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotSsdSlot1linkSpeed token.
.PARAMETER SlotSsdSlot2linkSpeed
BIOS Token for setting PCIe Slot:FrontSSD2 Link Speed configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SlotSsdSlot2linkSpeed token. * `Disabled` - Value - Disabled for configuring SlotSsdSlot2linkSpeed token. * `GEN1` - Value - GEN1 for configuring SlotSsdSlot2linkSpeed token. * `GEN2` - Value - GEN2 for configuring SlotSsdSlot2linkSpeed token. * `GEN3` - Value - GEN3 for configuring SlotSsdSlot2linkSpeed token.
.PARAMETER Smee
BIOS Token for setting SMEE configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SmtMode
BIOS Token for setting SMT Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring SmtMode token. * `Off` - Value - Off for configuring SmtMode token.
.PARAMETER Snc
BIOS Token for setting Sub Numa Clustering configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Snc token. * `disabled` - Value - disabled for configuring Snc token. * `enabled` - Value - enabled for configuring Snc token.
.PARAMETER SnoopyModeFor2lm
BIOS Token for setting Snoopy Mode for 2LM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SnoopyModeForAd
BIOS Token for setting Snoopy Mode for AD configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SparingMode
BIOS Token for setting Sparing Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `dimm-sparing` - Value - dimm-sparing for configuring SparingMode token. * `rank-sparing` - Value - rank-sparing for configuring SparingMode token.
.PARAMETER SrIov
BIOS Token for setting SR-IOV Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER StreamerPrefetch
BIOS Token for setting DCU Streamer Prefetch configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER SvmMode
BIOS Token for setting SVM Mode configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER TerminalType
BIOS Token for setting Terminal Type configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `pc-ansi` - Value - pc-ansi for configuring TerminalType token. * `vt-utf8` - Value - vt-utf8 for configuring TerminalType token. * `vt100` - Value - vt100 for configuring TerminalType token. * `vt100-plus` - Value - vt100-plus for configuring TerminalType token.
.PARAMETER TpmControl
BIOS Token for setting Trusted Platform Module State configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER TpmSupport
BIOS Token for setting TPM Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER Tsme
BIOS Token for setting Transparent Secure Memory Encryption configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring Tsme token. * `disabled` - Value - disabled for configuring Tsme token. * `enabled` - Value - enabled for configuring Tsme token.
.PARAMETER TxtSupport
BIOS Token for setting Intel Trusted Execution Technology Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER UcsmBootOrderRule
BIOS Token for setting Boot Order Rules configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Loose` - Value - Loose for configuring UcsmBootOrderRule token. * `Strict` - Value - Strict for configuring UcsmBootOrderRule token.
.PARAMETER UfsDisable
BIOS Token for setting Uncore Frequency Scaling configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER UsbEmul6064
BIOS Token for setting Port 60/64 Emulation configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER UsbPortFront
BIOS Token for setting USB Port Front configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER UsbPortInternal
BIOS Token for setting USB Port Internal configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER UsbPortKvm
BIOS Token for setting USB Port KVM configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER UsbPortRear
BIOS Token for setting USB Port Rear configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER UsbPortSdCard
BIOS Token for setting USB Port SD Card configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER UsbPortVmedia
BIOS Token for setting USB Port VMedia configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER UsbXhciSupport
BIOS Token for setting XHCI Legacy Support configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER VgaPriority
BIOS Token for setting VGA Priority configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Offboard` - Value - Offboard for configuring VgaPriority token. * `Onboard` - Value - Onboard for configuring VgaPriority token. * `Onboard VGA Disabled` - Value - Onboard VGA Disabled for configuring VgaPriority token.
.PARAMETER VmdEnable
BIOS Token for setting VMD Enablement configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `enabled` - Enables the BIOS setting. * `disabled` - Disables the BIOS setting.
.PARAMETER WorkLoadConfig
BIOS Token for setting Workload Configuration configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Balanced` - Value - Balanced for configuring WorkLoadConfig token. * `I/O Sensitive` - Value - I/O Sensitive for configuring WorkLoadConfig token. * `NUMA` - Value - NUMA for configuring WorkLoadConfig token. * `UMA` - Value - UMA for configuring WorkLoadConfig token.
.PARAMETER XptPrefetch
BIOS Token for setting XPT Prefetch configuration. * `platform-default` - Default value used by the platform for the BIOS setting. * `Auto` - Value - Auto for configuring XptPrefetch token. * `disabled` - Value - disabled for configuring XptPrefetch token. * `enabled` - Value - enabled for configuring XptPrefetch token.
.PARAMETER Organization
No description available.
.PARAMETER Profiles
An array of relationships to policyAbstractConfigProfile resources.
.OUTPUTS

BiosPolicyAllOf<PSCustomObject>
#>

function Initialize-IntersightBiosPolicyAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("bios.Policy")]
        [String]
        ${ClassId} = "bios.Policy",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("bios.Policy")]
        [String]
        ${ObjectType} = "bios.Policy",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlGpu1state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlGpu2state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlGpu3state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlGpu4state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlGpu5state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlGpu6state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlGpu7state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlGpu8state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlSlot11state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlSlot12state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlSlot13state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AcsControlSlot14state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AdjacentCacheLinePrefetch} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AdvancedMemTest} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AllUsbDevices} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "1500-m", "300-m", "3000-m", "900-m", "auto")]
        [String]
        ${Altitude} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "Force L0s", "L1 Only")]
        [String]
        ${AspmSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AssertNmiOnPerr} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AssertNmiOnSerr} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AutoCcState} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${AutonumousCstateEnable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "115200", "19200", "38400", "57600", "9600")]
        [String]
        ${BaudRate} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${BmeDmaMitigation} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "13", "5", "Infinite")]
        [String]
        ${BootOptionNumRetry} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "15", "45", "90")]
        [String]
        ${BootOptionReCoolDown} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${BootOptionRetry} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Max Efficient", "Max Performance", "Set by Intel NM")]
        [String]
        ${BootPerformanceMode} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled")]
        [String]
        ${CbsCmnCpuCpb} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "FOUR (2 + 2)", "FOUR (4 + 0)", "SIX (3 + 3)", "THREE (3 + 0)", "TWO (1 + 1)", "TWO (2 + 0)")]
        [String]
        ${CbsCmnCpuGenDowncoreCtrl} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled", "enabled")]
        [String]
        ${CbsCmnCpuGlobalCstateCtrl} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled", "enabled")]
        [String]
        ${CbsCmnCpuL1streamHwPrefetcher} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled", "enabled")]
        [String]
        ${CbsCmnCpuL2streamHwPrefetcher} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Performance", "Power")]
        [String]
        ${CbsCmnDeterminismSlider} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled", "enabled")]
        [String]
        ${CbsCmnGnbNbIommu} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled", "enabled")]
        [String]
        ${CbsCmnMemCtrlBankGroupSwapDdr4} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled")]
        [String]
        ${CbsCmnMemMapBankInterleaveDdr4} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Manual")]
        [String]
        ${CbsCmncTdpCtl} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Channel", "Die", "None", "Socket")]
        [String]
        ${CbsDfCmnMemIntlv} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "1 KB", "2 KB", "256 Bytes", "512 Bytes", "Auto")]
        [String]
        ${CbsDfCmnMemIntlvSize} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${CdnEnable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "LOMs Only")]
        [String]
        ${CdnSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "1-way", "2-way", "3-way", "4-way", "auto")]
        [String]
        ${ChannelInterLeave} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${CiscoAdaptiveMemTraining} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Maximum", "Minimum", "Normal")]
        [String]
        ${CiscoDebugLevel} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${CiscoOpromLaunchOptimization} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "auto", "disabled", "fast", "slow")]
        [String]
        ${CkeLowPolicy} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${ClosedLoopThermThrotl} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${CmciEnable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${ConfigTdp} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Level 1", "Level 2", "Normal")]
        [String]
        ${ConfigTdpLevel} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "com-0", "com-1", "disabled", "enabled", "serial-port-a")]
        [String]
        ${ConsoleRedirection} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "1", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "2", "20", "21", "22", "23", "24", "25", "26", "27", "28", "3", "4", "5", "6", "7", "8", "9", "all")]
        [String]
        ${CoreMultiProcessing} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "balanced-energy", "balanced-performance", "balanced-power", "energy-efficient", "performance", "power")]
        [String]
        ${CpuEnergyPerformance} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${CpuFrequencyFloor} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "custom", "enterprise", "high-throughput", "hpc")]
        [String]
        ${CpuPerformance} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "custom", "disabled", "energy-efficient", "performance")]
        [String]
        ${CpuPowerManagement} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Disabled", "Recipe 1", "Recipe 2", "Recipe 3")]
        [String]
        ${CrQos} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Default", "Option 1", "Option 2", "Option 3", "Option 4", "Option 5")]
        [String]
        ${CrfastgoConfig} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${DcpmmFirmwareDowngrade} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${DemandScrub} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "auto", "disabled", "enabled")]
        [String]
        ${DirectCacheAccess} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Balanced", "Energy Efficient", "Performance")]
        [String]
        ${DramClockThrottling} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "1x", "2x", "3x", "4x", "Auto")]
        [String]
        ${DramRefreshRate} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled")]
        [String]
        ${DramSwThermalThrottling} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${EnableClockSpreadSpec} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${EnergyEfficientTurbo} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "BIOS", "OS")]
        [String]
        ${EngPerfTuning} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${EnhancedIntelSpeedStepTech} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${EppEnable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Balanced Performance", "Balanced Power", "Performance", "Power")]
        [String]
        ${EppProfile} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${ExecuteDisableBit} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "X2APIC", "XAPIC")]
        [String]
        ${ExtendedApic} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "none", "rts-cts")]
        [String]
        ${FlowControl} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Frb2enable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${HardwarePrefetch} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Disabled", "HWPM Native Mode", "HWPM OOB Mode", "NATIVE MODE", "Native Mode with no Legacy", "OOB MODE")]
        [String]
        ${HwpmEnable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "1-way Interleave", "2-way Interleave", "Auto")]
        [String]
        ${ImcInterleave} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${IntelHyperThreadingTech} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Base", "Config 1", "Config 2")]
        [String]
        ${IntelSpeedSelect} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${IntelTurboBoostTech} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${IntelVirtualizationTechnology} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${IntelVtForDirectedIo} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${IntelVtdCoherencySupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${IntelVtdInterruptRemapping} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${IntelVtdPassThroughDmaSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${IntelVtdatsSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "No", "Yes")]
        [String]
        ${IohErrorEnable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "IOH0 24k IOH1 40k", "IOH0 32k IOH1 32k", "IOH0 40k IOH1 24k", "IOH0 48k IOH1 16k", "IOH0 56k IOH1 8k")]
        [String]
        ${IohResource} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${IpPrefetch} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Ipv4http} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Ipv4pxe} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Ipv6http} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Ipv6pxe} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${KtiPrefetch} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${LegacyOsRedirection} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "auto", "disabled", "enabled")]
        [String]
        ${LegacyUsbSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${LlcPrefetch} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${LomPort0state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${LomPort1state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${LomPort2state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${LomPort3state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${LomPortsAllState} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "auto", "performance-mode", "power-saving-mode")]
        [String]
        ${LvDdrMode} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${MakeDeviceNonBootable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "1 Way Node Interleave", "2 Way Node Interleave", "4 Way Node Interleave", "8 Way Node Interleave", "disabled", "enabled")]
        [String]
        ${MemoryInterLeave} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${MemoryMappedIoAbove4gb} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "1x Refresh", "2x Refresh")]
        [String]
        ${MemoryRefreshRate} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$")]
        [String]
        ${MemorySizeLimit} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "CLTT with PECI", "Disabled")]
        [String]
        ${MemoryThermalThrottling} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "inter-socket", "intra-socket")]
        [String]
        ${MirroringMode} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "1 GB", "2 GB", "2.5 GB", "3 GB", "Auto")]
        [String]
        ${MmcfgBase} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${NetworkStack} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${NumaOptimized} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "BW Optimized", "Balanced Profile", "Latency Optimized")]
        [String]
        ${NvmdimmPerformConfig} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Onboard10gbitLom} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${OnboardGbitLom} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${OnboardScuStorageSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Intel RSTe", "LSI SW RAID")]
        [String]
        ${OnboardScuStorageSwStack} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${OsBootWatchdogTimer} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "do-nothing", "power-off", "reset")]
        [String]
        ${OsBootWatchdogTimerPolicy} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "10-minutes", "15-minutes", "20-minutes", "5-minutes")]
        [String]
        ${OsBootWatchdogTimerTimeout} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${OutOfBandMgmtPort} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "C0 C1 State", "C0/C1", "C2", "C6 Non Retention", "C6 Retention", "No Limit")]
        [String]
        ${PackageCstateLimit} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "High", "Low")]
        [String]
        ${PanicHighWatermark} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "Percentage", "Value in GB")]
        [String]
        ${PartialMirrorModeConfig} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(\d\.\d{1,2}|[1-4]\d\.\d{1,2}|50\.[0]{1,2})$|^(platform-default)$")]
        [String]
        ${PartialMirrorPercent} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$")]
        [String]
        ${PartialMirrorValue1} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$")]
        [String]
        ${PartialMirrorValue2} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$")]
        [String]
        ${PartialMirrorValue3} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(\d|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$|^(platform-default)$")]
        [String]
        ${PartialMirrorValue4} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PatrolScrub} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^([5-9]|1\d|2[0-3])$|^(platform-default)$")]
        [String]
        ${PatrolScrubDuration} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PcIeRasSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PcIeSsdHotPlugSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PchUsb30mode} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${PciOptionRoMs} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PciRomClp} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled", "enabled")]
        [String]
        ${PcieAriSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "ZeroPointFive")]
        [String]
        ${PciePllSsc} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PcieSlotMstorraidOptionRom} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${PcieSlotNvme1linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PcieSlotNvme1optionRom} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${PcieSlotNvme2linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PcieSlotNvme2optionRom} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${PcieSlotNvme3linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PcieSlotNvme3optionRom} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${PcieSlotNvme4linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PcieSlotNvme4optionRom} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${PcieSlotNvme5linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PcieSlotNvme5optionRom} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${PcieSlotNvme6linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PcieSlotNvme6optionRom} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PopSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${PostErrorPause} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${ProcessorC1e} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${ProcessorC3report} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${ProcessorC6report} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${ProcessorCstate} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "AHCI", "Disabled", "LSI SW RAID")]
        [String]
        ${Psata} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "HW ALL", "SW ALL", "SW ANY")]
        [String]
        ${PstateCoordType} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "ESCN", "LINUX", "SCO", "VT100", "VT400", "XTERMR6")]
        [String]
        ${PuttyKeyPad} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "bios", "os")]
        [String]
        ${PwrPerfTuning} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "6.4-gt/s", "7.2-gt/s", "8.0-gt/s", "9.6-gt/s", "auto")]
        [String]
        ${QpiLinkFrequency} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "10.4GT/s", "9.6GT/s", "Auto")]
        [String]
        ${QpiLinkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "auto", "cluster-on-die", "early-snoop", "home-directory-snoop", "home-directory-snoop-with-osb", "home-snoop")]
        [String]
        ${QpiSnoopMode} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "1-way", "2-way", "4-way", "8-way", "auto")]
        [String]
        ${RankInterLeave} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Always Enable", "Bootloader")]
        [String]
        ${RedirectionAfterPost} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "AHCI", "Disabled", "LSI SW RAID")]
        [String]
        ${SataModeSelect} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "adddc-sparing", "lockstep", "maximum-performance", "mirror-mode-1lm", "mirroring", "partial-mirror-mode-1lm", "sparing")]
        [String]
        ${SelectMemoryRasConfiguration} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "Hard PPR")]
        [String]
        ${SelectPprType} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SerialPortAenable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "253 ASIDs", "509 ASIDs", "Auto")]
        [String]
        ${Sev} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "No", "Yes")]
        [String]
        ${SinglePctlEnable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot10linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${Slot10state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot11linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Slot11state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot12linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Slot12state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Slot13state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Slot14state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot1linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${Slot1state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot2linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${Slot2state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot3linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${Slot3state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot4linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${Slot4state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot5linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${Slot5state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot6linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${Slot6state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot7linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${Slot7state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot8linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${Slot8state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${Slot9linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${Slot9state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotFlomLinkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotFrontNvme1linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotFrontNvme2linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotFrontSlot5linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotFrontSlot6linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotGpu1state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotGpu2state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotGpu3state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotGpu4state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotGpu5state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotGpu6state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotGpu7state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotGpu8state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotHbaLinkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${SlotHbaState} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotLom1link} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotLom2link} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${SlotMezzState} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotMlomLinkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${SlotMlomState} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotMraidLinkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotMraidState} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN10state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN11state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN12state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN13state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN14state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN15state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN16state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN17state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN18state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN19state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${SlotN1state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN20state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN21state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN22state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN23state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN24state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${SlotN2state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN3state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN4state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN5state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN6state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN7state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN8state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotN9state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRaidLinkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotRaidState} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRearNvme1linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotRearNvme1state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRearNvme2linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotRearNvme2state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotRearNvme3state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotRearNvme4state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotRearNvme5state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotRearNvme6state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotRearNvme7state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SlotRearNvme8state} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRiser1linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRiser1slot1linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRiser1slot2linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRiser1slot3linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRiser2linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRiser2slot4linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRiser2slot5linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotRiser2slot6linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "disabled", "enabled", "Legacy Only", "UEFI Only")]
        [String]
        ${SlotSasState} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotSsdSlot1linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Disabled", "GEN1", "GEN2", "GEN3")]
        [String]
        ${SlotSsdSlot2linkSpeed} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${Smee} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "Off")]
        [String]
        ${SmtMode} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled", "enabled")]
        [String]
        ${Snc} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SnoopyModeFor2lm} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SnoopyModeForAd} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "dimm-sparing", "rank-sparing")]
        [String]
        ${SparingMode} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SrIov} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${StreamerPrefetch} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${SvmMode} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "pc-ansi", "vt-utf8", "vt100", "vt100-plus")]
        [String]
        ${TerminalType} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${TpmControl} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${TpmSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled", "enabled")]
        [String]
        ${Tsme} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${TxtSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Loose", "Strict")]
        [String]
        ${UcsmBootOrderRule} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${UfsDisable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${UsbEmul6064} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${UsbPortFront} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${UsbPortInternal} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${UsbPortKvm} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${UsbPortRear} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${UsbPortSdCard} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${UsbPortVmedia} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${UsbXhciSupport} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Offboard", "Onboard", "Onboard VGA Disabled")]
        [String]
        ${VgaPriority} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "enabled", "disabled")]
        [String]
        ${VmdEnable} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Balanced", "I/O Sensitive", "NUMA", "UMA")]
        [String]
        ${WorkLoadConfig} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("platform-default", "Auto", "disabled", "enabled")]
        [String]
        ${XptPrefetch} = "platform-default",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Organization},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Profiles}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightBiosPolicyAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AcsControlGpu1state" = ${AcsControlGpu1state}
            "AcsControlGpu2state" = ${AcsControlGpu2state}
            "AcsControlGpu3state" = ${AcsControlGpu3state}
            "AcsControlGpu4state" = ${AcsControlGpu4state}
            "AcsControlGpu5state" = ${AcsControlGpu5state}
            "AcsControlGpu6state" = ${AcsControlGpu6state}
            "AcsControlGpu7state" = ${AcsControlGpu7state}
            "AcsControlGpu8state" = ${AcsControlGpu8state}
            "AcsControlSlot11state" = ${AcsControlSlot11state}
            "AcsControlSlot12state" = ${AcsControlSlot12state}
            "AcsControlSlot13state" = ${AcsControlSlot13state}
            "AcsControlSlot14state" = ${AcsControlSlot14state}
            "AdjacentCacheLinePrefetch" = ${AdjacentCacheLinePrefetch}
            "AdvancedMemTest" = ${AdvancedMemTest}
            "AllUsbDevices" = ${AllUsbDevices}
            "Altitude" = ${Altitude}
            "AspmSupport" = ${AspmSupport}
            "AssertNmiOnPerr" = ${AssertNmiOnPerr}
            "AssertNmiOnSerr" = ${AssertNmiOnSerr}
            "AutoCcState" = ${AutoCcState}
            "AutonumousCstateEnable" = ${AutonumousCstateEnable}
            "BaudRate" = ${BaudRate}
            "BmeDmaMitigation" = ${BmeDmaMitigation}
            "BootOptionNumRetry" = ${BootOptionNumRetry}
            "BootOptionReCoolDown" = ${BootOptionReCoolDown}
            "BootOptionRetry" = ${BootOptionRetry}
            "BootPerformanceMode" = ${BootPerformanceMode}
            "CbsCmnCpuCpb" = ${CbsCmnCpuCpb}
            "CbsCmnCpuGenDowncoreCtrl" = ${CbsCmnCpuGenDowncoreCtrl}
            "CbsCmnCpuGlobalCstateCtrl" = ${CbsCmnCpuGlobalCstateCtrl}
            "CbsCmnCpuL1streamHwPrefetcher" = ${CbsCmnCpuL1streamHwPrefetcher}
            "CbsCmnCpuL2streamHwPrefetcher" = ${CbsCmnCpuL2streamHwPrefetcher}
            "CbsCmnDeterminismSlider" = ${CbsCmnDeterminismSlider}
            "CbsCmnGnbNbIommu" = ${CbsCmnGnbNbIommu}
            "CbsCmnMemCtrlBankGroupSwapDdr4" = ${CbsCmnMemCtrlBankGroupSwapDdr4}
            "CbsCmnMemMapBankInterleaveDdr4" = ${CbsCmnMemMapBankInterleaveDdr4}
            "CbsCmncTdpCtl" = ${CbsCmncTdpCtl}
            "CbsDfCmnMemIntlv" = ${CbsDfCmnMemIntlv}
            "CbsDfCmnMemIntlvSize" = ${CbsDfCmnMemIntlvSize}
            "CdnEnable" = ${CdnEnable}
            "CdnSupport" = ${CdnSupport}
            "ChannelInterLeave" = ${ChannelInterLeave}
            "CiscoAdaptiveMemTraining" = ${CiscoAdaptiveMemTraining}
            "CiscoDebugLevel" = ${CiscoDebugLevel}
            "CiscoOpromLaunchOptimization" = ${CiscoOpromLaunchOptimization}
            "CkeLowPolicy" = ${CkeLowPolicy}
            "ClosedLoopThermThrotl" = ${ClosedLoopThermThrotl}
            "CmciEnable" = ${CmciEnable}
            "ConfigTdp" = ${ConfigTdp}
            "ConfigTdpLevel" = ${ConfigTdpLevel}
            "ConsoleRedirection" = ${ConsoleRedirection}
            "CoreMultiProcessing" = ${CoreMultiProcessing}
            "CpuEnergyPerformance" = ${CpuEnergyPerformance}
            "CpuFrequencyFloor" = ${CpuFrequencyFloor}
            "CpuPerformance" = ${CpuPerformance}
            "CpuPowerManagement" = ${CpuPowerManagement}
            "CrQos" = ${CrQos}
            "CrfastgoConfig" = ${CrfastgoConfig}
            "DcpmmFirmwareDowngrade" = ${DcpmmFirmwareDowngrade}
            "DemandScrub" = ${DemandScrub}
            "DirectCacheAccess" = ${DirectCacheAccess}
            "DramClockThrottling" = ${DramClockThrottling}
            "DramRefreshRate" = ${DramRefreshRate}
            "DramSwThermalThrottling" = ${DramSwThermalThrottling}
            "EnableClockSpreadSpec" = ${EnableClockSpreadSpec}
            "EnergyEfficientTurbo" = ${EnergyEfficientTurbo}
            "EngPerfTuning" = ${EngPerfTuning}
            "EnhancedIntelSpeedStepTech" = ${EnhancedIntelSpeedStepTech}
            "EppEnable" = ${EppEnable}
            "EppProfile" = ${EppProfile}
            "ExecuteDisableBit" = ${ExecuteDisableBit}
            "ExtendedApic" = ${ExtendedApic}
            "FlowControl" = ${FlowControl}
            "Frb2enable" = ${Frb2enable}
            "HardwarePrefetch" = ${HardwarePrefetch}
            "HwpmEnable" = ${HwpmEnable}
            "ImcInterleave" = ${ImcInterleave}
            "IntelHyperThreadingTech" = ${IntelHyperThreadingTech}
            "IntelSpeedSelect" = ${IntelSpeedSelect}
            "IntelTurboBoostTech" = ${IntelTurboBoostTech}
            "IntelVirtualizationTechnology" = ${IntelVirtualizationTechnology}
            "IntelVtForDirectedIo" = ${IntelVtForDirectedIo}
            "IntelVtdCoherencySupport" = ${IntelVtdCoherencySupport}
            "IntelVtdInterruptRemapping" = ${IntelVtdInterruptRemapping}
            "IntelVtdPassThroughDmaSupport" = ${IntelVtdPassThroughDmaSupport}
            "IntelVtdatsSupport" = ${IntelVtdatsSupport}
            "IohErrorEnable" = ${IohErrorEnable}
            "IohResource" = ${IohResource}
            "IpPrefetch" = ${IpPrefetch}
            "Ipv4http" = ${Ipv4http}
            "Ipv4pxe" = ${Ipv4pxe}
            "Ipv6http" = ${Ipv6http}
            "Ipv6pxe" = ${Ipv6pxe}
            "KtiPrefetch" = ${KtiPrefetch}
            "LegacyOsRedirection" = ${LegacyOsRedirection}
            "LegacyUsbSupport" = ${LegacyUsbSupport}
            "LlcPrefetch" = ${LlcPrefetch}
            "LomPort0state" = ${LomPort0state}
            "LomPort1state" = ${LomPort1state}
            "LomPort2state" = ${LomPort2state}
            "LomPort3state" = ${LomPort3state}
            "LomPortsAllState" = ${LomPortsAllState}
            "LvDdrMode" = ${LvDdrMode}
            "MakeDeviceNonBootable" = ${MakeDeviceNonBootable}
            "MemoryInterLeave" = ${MemoryInterLeave}
            "MemoryMappedIoAbove4gb" = ${MemoryMappedIoAbove4gb}
            "MemoryRefreshRate" = ${MemoryRefreshRate}
            "MemorySizeLimit" = ${MemorySizeLimit}
            "MemoryThermalThrottling" = ${MemoryThermalThrottling}
            "MirroringMode" = ${MirroringMode}
            "MmcfgBase" = ${MmcfgBase}
            "NetworkStack" = ${NetworkStack}
            "NumaOptimized" = ${NumaOptimized}
            "NvmdimmPerformConfig" = ${NvmdimmPerformConfig}
            "Onboard10gbitLom" = ${Onboard10gbitLom}
            "OnboardGbitLom" = ${OnboardGbitLom}
            "OnboardScuStorageSupport" = ${OnboardScuStorageSupport}
            "OnboardScuStorageSwStack" = ${OnboardScuStorageSwStack}
            "OsBootWatchdogTimer" = ${OsBootWatchdogTimer}
            "OsBootWatchdogTimerPolicy" = ${OsBootWatchdogTimerPolicy}
            "OsBootWatchdogTimerTimeout" = ${OsBootWatchdogTimerTimeout}
            "OutOfBandMgmtPort" = ${OutOfBandMgmtPort}
            "PackageCstateLimit" = ${PackageCstateLimit}
            "PanicHighWatermark" = ${PanicHighWatermark}
            "PartialMirrorModeConfig" = ${PartialMirrorModeConfig}
            "PartialMirrorPercent" = ${PartialMirrorPercent}
            "PartialMirrorValue1" = ${PartialMirrorValue1}
            "PartialMirrorValue2" = ${PartialMirrorValue2}
            "PartialMirrorValue3" = ${PartialMirrorValue3}
            "PartialMirrorValue4" = ${PartialMirrorValue4}
            "PatrolScrub" = ${PatrolScrub}
            "PatrolScrubDuration" = ${PatrolScrubDuration}
            "PcIeRasSupport" = ${PcIeRasSupport}
            "PcIeSsdHotPlugSupport" = ${PcIeSsdHotPlugSupport}
            "PchUsb30mode" = ${PchUsb30mode}
            "PciOptionRoMs" = ${PciOptionRoMs}
            "PciRomClp" = ${PciRomClp}
            "PcieAriSupport" = ${PcieAriSupport}
            "PciePllSsc" = ${PciePllSsc}
            "PcieSlotMstorraidOptionRom" = ${PcieSlotMstorraidOptionRom}
            "PcieSlotNvme1linkSpeed" = ${PcieSlotNvme1linkSpeed}
            "PcieSlotNvme1optionRom" = ${PcieSlotNvme1optionRom}
            "PcieSlotNvme2linkSpeed" = ${PcieSlotNvme2linkSpeed}
            "PcieSlotNvme2optionRom" = ${PcieSlotNvme2optionRom}
            "PcieSlotNvme3linkSpeed" = ${PcieSlotNvme3linkSpeed}
            "PcieSlotNvme3optionRom" = ${PcieSlotNvme3optionRom}
            "PcieSlotNvme4linkSpeed" = ${PcieSlotNvme4linkSpeed}
            "PcieSlotNvme4optionRom" = ${PcieSlotNvme4optionRom}
            "PcieSlotNvme5linkSpeed" = ${PcieSlotNvme5linkSpeed}
            "PcieSlotNvme5optionRom" = ${PcieSlotNvme5optionRom}
            "PcieSlotNvme6linkSpeed" = ${PcieSlotNvme6linkSpeed}
            "PcieSlotNvme6optionRom" = ${PcieSlotNvme6optionRom}
            "PopSupport" = ${PopSupport}
            "PostErrorPause" = ${PostErrorPause}
            "ProcessorC1e" = ${ProcessorC1e}
            "ProcessorC3report" = ${ProcessorC3report}
            "ProcessorC6report" = ${ProcessorC6report}
            "ProcessorCstate" = ${ProcessorCstate}
            "Psata" = ${Psata}
            "PstateCoordType" = ${PstateCoordType}
            "PuttyKeyPad" = ${PuttyKeyPad}
            "PwrPerfTuning" = ${PwrPerfTuning}
            "QpiLinkFrequency" = ${QpiLinkFrequency}
            "QpiLinkSpeed" = ${QpiLinkSpeed}
            "QpiSnoopMode" = ${QpiSnoopMode}
            "RankInterLeave" = ${RankInterLeave}
            "RedirectionAfterPost" = ${RedirectionAfterPost}
            "SataModeSelect" = ${SataModeSelect}
            "SelectMemoryRasConfiguration" = ${SelectMemoryRasConfiguration}
            "SelectPprType" = ${SelectPprType}
            "SerialPortAenable" = ${SerialPortAenable}
            "Sev" = ${Sev}
            "SinglePctlEnable" = ${SinglePctlEnable}
            "Slot10linkSpeed" = ${Slot10linkSpeed}
            "Slot10state" = ${Slot10state}
            "Slot11linkSpeed" = ${Slot11linkSpeed}
            "Slot11state" = ${Slot11state}
            "Slot12linkSpeed" = ${Slot12linkSpeed}
            "Slot12state" = ${Slot12state}
            "Slot13state" = ${Slot13state}
            "Slot14state" = ${Slot14state}
            "Slot1linkSpeed" = ${Slot1linkSpeed}
            "Slot1state" = ${Slot1state}
            "Slot2linkSpeed" = ${Slot2linkSpeed}
            "Slot2state" = ${Slot2state}
            "Slot3linkSpeed" = ${Slot3linkSpeed}
            "Slot3state" = ${Slot3state}
            "Slot4linkSpeed" = ${Slot4linkSpeed}
            "Slot4state" = ${Slot4state}
            "Slot5linkSpeed" = ${Slot5linkSpeed}
            "Slot5state" = ${Slot5state}
            "Slot6linkSpeed" = ${Slot6linkSpeed}
            "Slot6state" = ${Slot6state}
            "Slot7linkSpeed" = ${Slot7linkSpeed}
            "Slot7state" = ${Slot7state}
            "Slot8linkSpeed" = ${Slot8linkSpeed}
            "Slot8state" = ${Slot8state}
            "Slot9linkSpeed" = ${Slot9linkSpeed}
            "Slot9state" = ${Slot9state}
            "SlotFlomLinkSpeed" = ${SlotFlomLinkSpeed}
            "SlotFrontNvme1linkSpeed" = ${SlotFrontNvme1linkSpeed}
            "SlotFrontNvme2linkSpeed" = ${SlotFrontNvme2linkSpeed}
            "SlotFrontSlot5linkSpeed" = ${SlotFrontSlot5linkSpeed}
            "SlotFrontSlot6linkSpeed" = ${SlotFrontSlot6linkSpeed}
            "SlotGpu1state" = ${SlotGpu1state}
            "SlotGpu2state" = ${SlotGpu2state}
            "SlotGpu3state" = ${SlotGpu3state}
            "SlotGpu4state" = ${SlotGpu4state}
            "SlotGpu5state" = ${SlotGpu5state}
            "SlotGpu6state" = ${SlotGpu6state}
            "SlotGpu7state" = ${SlotGpu7state}
            "SlotGpu8state" = ${SlotGpu8state}
            "SlotHbaLinkSpeed" = ${SlotHbaLinkSpeed}
            "SlotHbaState" = ${SlotHbaState}
            "SlotLom1link" = ${SlotLom1link}
            "SlotLom2link" = ${SlotLom2link}
            "SlotMezzState" = ${SlotMezzState}
            "SlotMlomLinkSpeed" = ${SlotMlomLinkSpeed}
            "SlotMlomState" = ${SlotMlomState}
            "SlotMraidLinkSpeed" = ${SlotMraidLinkSpeed}
            "SlotMraidState" = ${SlotMraidState}
            "SlotN10state" = ${SlotN10state}
            "SlotN11state" = ${SlotN11state}
            "SlotN12state" = ${SlotN12state}
            "SlotN13state" = ${SlotN13state}
            "SlotN14state" = ${SlotN14state}
            "SlotN15state" = ${SlotN15state}
            "SlotN16state" = ${SlotN16state}
            "SlotN17state" = ${SlotN17state}
            "SlotN18state" = ${SlotN18state}
            "SlotN19state" = ${SlotN19state}
            "SlotN1state" = ${SlotN1state}
            "SlotN20state" = ${SlotN20state}
            "SlotN21state" = ${SlotN21state}
            "SlotN22state" = ${SlotN22state}
            "SlotN23state" = ${SlotN23state}
            "SlotN24state" = ${SlotN24state}
            "SlotN2state" = ${SlotN2state}
            "SlotN3state" = ${SlotN3state}
            "SlotN4state" = ${SlotN4state}
            "SlotN5state" = ${SlotN5state}
            "SlotN6state" = ${SlotN6state}
            "SlotN7state" = ${SlotN7state}
            "SlotN8state" = ${SlotN8state}
            "SlotN9state" = ${SlotN9state}
            "SlotRaidLinkSpeed" = ${SlotRaidLinkSpeed}
            "SlotRaidState" = ${SlotRaidState}
            "SlotRearNvme1linkSpeed" = ${SlotRearNvme1linkSpeed}
            "SlotRearNvme1state" = ${SlotRearNvme1state}
            "SlotRearNvme2linkSpeed" = ${SlotRearNvme2linkSpeed}
            "SlotRearNvme2state" = ${SlotRearNvme2state}
            "SlotRearNvme3state" = ${SlotRearNvme3state}
            "SlotRearNvme4state" = ${SlotRearNvme4state}
            "SlotRearNvme5state" = ${SlotRearNvme5state}
            "SlotRearNvme6state" = ${SlotRearNvme6state}
            "SlotRearNvme7state" = ${SlotRearNvme7state}
            "SlotRearNvme8state" = ${SlotRearNvme8state}
            "SlotRiser1linkSpeed" = ${SlotRiser1linkSpeed}
            "SlotRiser1slot1linkSpeed" = ${SlotRiser1slot1linkSpeed}
            "SlotRiser1slot2linkSpeed" = ${SlotRiser1slot2linkSpeed}
            "SlotRiser1slot3linkSpeed" = ${SlotRiser1slot3linkSpeed}
            "SlotRiser2linkSpeed" = ${SlotRiser2linkSpeed}
            "SlotRiser2slot4linkSpeed" = ${SlotRiser2slot4linkSpeed}
            "SlotRiser2slot5linkSpeed" = ${SlotRiser2slot5linkSpeed}
            "SlotRiser2slot6linkSpeed" = ${SlotRiser2slot6linkSpeed}
            "SlotSasState" = ${SlotSasState}
            "SlotSsdSlot1linkSpeed" = ${SlotSsdSlot1linkSpeed}
            "SlotSsdSlot2linkSpeed" = ${SlotSsdSlot2linkSpeed}
            "Smee" = ${Smee}
            "SmtMode" = ${SmtMode}
            "Snc" = ${Snc}
            "SnoopyModeFor2lm" = ${SnoopyModeFor2lm}
            "SnoopyModeForAd" = ${SnoopyModeForAd}
            "SparingMode" = ${SparingMode}
            "SrIov" = ${SrIov}
            "StreamerPrefetch" = ${StreamerPrefetch}
            "SvmMode" = ${SvmMode}
            "TerminalType" = ${TerminalType}
            "TpmControl" = ${TpmControl}
            "TpmSupport" = ${TpmSupport}
            "Tsme" = ${Tsme}
            "TxtSupport" = ${TxtSupport}
            "UcsmBootOrderRule" = ${UcsmBootOrderRule}
            "UfsDisable" = ${UfsDisable}
            "UsbEmul6064" = ${UsbEmul6064}
            "UsbPortFront" = ${UsbPortFront}
            "UsbPortInternal" = ${UsbPortInternal}
            "UsbPortKvm" = ${UsbPortKvm}
            "UsbPortRear" = ${UsbPortRear}
            "UsbPortSdCard" = ${UsbPortSdCard}
            "UsbPortVmedia" = ${UsbPortVmedia}
            "UsbXhciSupport" = ${UsbXhciSupport}
            "VgaPriority" = ${VgaPriority}
            "VmdEnable" = ${VmdEnable}
            "WorkLoadConfig" = ${WorkLoadConfig}
            "XptPrefetch" = ${XptPrefetch}
            "Organization" = ${Organization}
            "Profiles" = ${Profiles}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BiosPolicyAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to BiosPolicyAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BiosPolicyAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToBiosPolicyAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightBiosPolicyAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightBiosPolicyAllOf
        $AllProperties = ("ClassId", "ObjectType", "AcsControlGpu1state", "AcsControlGpu2state", "AcsControlGpu3state", "AcsControlGpu4state", "AcsControlGpu5state", "AcsControlGpu6state", "AcsControlGpu7state", "AcsControlGpu8state", "AcsControlSlot11state", "AcsControlSlot12state", "AcsControlSlot13state", "AcsControlSlot14state", "AdjacentCacheLinePrefetch", "AdvancedMemTest", "AllUsbDevices", "Altitude", "AspmSupport", "AssertNmiOnPerr", "AssertNmiOnSerr", "AutoCcState", "AutonumousCstateEnable", "BaudRate", "BmeDmaMitigation", "BootOptionNumRetry", "BootOptionReCoolDown", "BootOptionRetry", "BootPerformanceMode", "CbsCmnCpuCpb", "CbsCmnCpuGenDowncoreCtrl", "CbsCmnCpuGlobalCstateCtrl", "CbsCmnCpuL1streamHwPrefetcher", "CbsCmnCpuL2streamHwPrefetcher", "CbsCmnDeterminismSlider", "CbsCmnGnbNbIommu", "CbsCmnMemCtrlBankGroupSwapDdr4", "CbsCmnMemMapBankInterleaveDdr4", "CbsCmncTdpCtl", "CbsDfCmnMemIntlv", "CbsDfCmnMemIntlvSize", "CdnEnable", "CdnSupport", "ChannelInterLeave", "CiscoAdaptiveMemTraining", "CiscoDebugLevel", "CiscoOpromLaunchOptimization", "CkeLowPolicy", "ClosedLoopThermThrotl", "CmciEnable", "ConfigTdp", "ConfigTdpLevel", "ConsoleRedirection", "CoreMultiProcessing", "CpuEnergyPerformance", "CpuFrequencyFloor", "CpuPerformance", "CpuPowerManagement", "CrQos", "CrfastgoConfig", "DcpmmFirmwareDowngrade", "DemandScrub", "DirectCacheAccess", "DramClockThrottling", "DramRefreshRate", "DramSwThermalThrottling", "EnableClockSpreadSpec", "EnergyEfficientTurbo", "EngPerfTuning", "EnhancedIntelSpeedStepTech", "EppEnable", "EppProfile", "ExecuteDisableBit", "ExtendedApic", "FlowControl", "Frb2enable", "HardwarePrefetch", "HwpmEnable", "ImcInterleave", "IntelHyperThreadingTech", "IntelSpeedSelect", "IntelTurboBoostTech", "IntelVirtualizationTechnology", "IntelVtForDirectedIo", "IntelVtdCoherencySupport", "IntelVtdInterruptRemapping", "IntelVtdPassThroughDmaSupport", "IntelVtdatsSupport", "IohErrorEnable", "IohResource", "IpPrefetch", "Ipv4http", "Ipv4pxe", "Ipv6http", "Ipv6pxe", "KtiPrefetch", "LegacyOsRedirection", "LegacyUsbSupport", "LlcPrefetch", "LomPort0state", "LomPort1state", "LomPort2state", "LomPort3state", "LomPortsAllState", "LvDdrMode", "MakeDeviceNonBootable", "MemoryInterLeave", "MemoryMappedIoAbove4gb", "MemoryRefreshRate", "MemorySizeLimit", "MemoryThermalThrottling", "MirroringMode", "MmcfgBase", "NetworkStack", "NumaOptimized", "NvmdimmPerformConfig", "Onboard10gbitLom", "OnboardGbitLom", "OnboardScuStorageSupport", "OnboardScuStorageSwStack", "OsBootWatchdogTimer", "OsBootWatchdogTimerPolicy", "OsBootWatchdogTimerTimeout", "OutOfBandMgmtPort", "PackageCstateLimit", "PanicHighWatermark", "PartialMirrorModeConfig", "PartialMirrorPercent", "PartialMirrorValue1", "PartialMirrorValue2", "PartialMirrorValue3", "PartialMirrorValue4", "PatrolScrub", "PatrolScrubDuration", "PcIeRasSupport", "PcIeSsdHotPlugSupport", "PchUsb30mode", "PciOptionRoMs", "PciRomClp", "PcieAriSupport", "PciePllSsc", "PcieSlotMstorraidOptionRom", "PcieSlotNvme1linkSpeed", "PcieSlotNvme1optionRom", "PcieSlotNvme2linkSpeed", "PcieSlotNvme2optionRom", "PcieSlotNvme3linkSpeed", "PcieSlotNvme3optionRom", "PcieSlotNvme4linkSpeed", "PcieSlotNvme4optionRom", "PcieSlotNvme5linkSpeed", "PcieSlotNvme5optionRom", "PcieSlotNvme6linkSpeed", "PcieSlotNvme6optionRom", "PopSupport", "PostErrorPause", "ProcessorC1e", "ProcessorC3report", "ProcessorC6report", "ProcessorCstate", "Psata", "PstateCoordType", "PuttyKeyPad", "PwrPerfTuning", "QpiLinkFrequency", "QpiLinkSpeed", "QpiSnoopMode", "RankInterLeave", "RedirectionAfterPost", "SataModeSelect", "SelectMemoryRasConfiguration", "SelectPprType", "SerialPortAenable", "Sev", "SinglePctlEnable", "Slot10linkSpeed", "Slot10state", "Slot11linkSpeed", "Slot11state", "Slot12linkSpeed", "Slot12state", "Slot13state", "Slot14state", "Slot1linkSpeed", "Slot1state", "Slot2linkSpeed", "Slot2state", "Slot3linkSpeed", "Slot3state", "Slot4linkSpeed", "Slot4state", "Slot5linkSpeed", "Slot5state", "Slot6linkSpeed", "Slot6state", "Slot7linkSpeed", "Slot7state", "Slot8linkSpeed", "Slot8state", "Slot9linkSpeed", "Slot9state", "SlotFlomLinkSpeed", "SlotFrontNvme1linkSpeed", "SlotFrontNvme2linkSpeed", "SlotFrontSlot5linkSpeed", "SlotFrontSlot6linkSpeed", "SlotGpu1state", "SlotGpu2state", "SlotGpu3state", "SlotGpu4state", "SlotGpu5state", "SlotGpu6state", "SlotGpu7state", "SlotGpu8state", "SlotHbaLinkSpeed", "SlotHbaState", "SlotLom1link", "SlotLom2link", "SlotMezzState", "SlotMlomLinkSpeed", "SlotMlomState", "SlotMraidLinkSpeed", "SlotMraidState", "SlotN10state", "SlotN11state", "SlotN12state", "SlotN13state", "SlotN14state", "SlotN15state", "SlotN16state", "SlotN17state", "SlotN18state", "SlotN19state", "SlotN1state", "SlotN20state", "SlotN21state", "SlotN22state", "SlotN23state", "SlotN24state", "SlotN2state", "SlotN3state", "SlotN4state", "SlotN5state", "SlotN6state", "SlotN7state", "SlotN8state", "SlotN9state", "SlotRaidLinkSpeed", "SlotRaidState", "SlotRearNvme1linkSpeed", "SlotRearNvme1state", "SlotRearNvme2linkSpeed", "SlotRearNvme2state", "SlotRearNvme3state", "SlotRearNvme4state", "SlotRearNvme5state", "SlotRearNvme6state", "SlotRearNvme7state", "SlotRearNvme8state", "SlotRiser1linkSpeed", "SlotRiser1slot1linkSpeed", "SlotRiser1slot2linkSpeed", "SlotRiser1slot3linkSpeed", "SlotRiser2linkSpeed", "SlotRiser2slot4linkSpeed", "SlotRiser2slot5linkSpeed", "SlotRiser2slot6linkSpeed", "SlotSasState", "SlotSsdSlot1linkSpeed", "SlotSsdSlot2linkSpeed", "Smee", "SmtMode", "Snc", "SnoopyModeFor2lm", "SnoopyModeForAd", "SparingMode", "SrIov", "StreamerPrefetch", "SvmMode", "TerminalType", "TpmControl", "TpmSupport", "Tsme", "TxtSupport", "UcsmBootOrderRule", "UfsDisable", "UsbEmul6064", "UsbPortFront", "UsbPortInternal", "UsbPortKvm", "UsbPortRear", "UsbPortSdCard", "UsbPortVmedia", "UsbXhciSupport", "VgaPriority", "VmdEnable", "WorkLoadConfig", "XptPrefetch", "Organization", "Profiles")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlGpu1state"))) { #optional property not found
            $AcsControlGpu1state = $null
        } else {
            $AcsControlGpu1state = $JsonParameters.PSobject.Properties["AcsControlGpu1state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlGpu2state"))) { #optional property not found
            $AcsControlGpu2state = $null
        } else {
            $AcsControlGpu2state = $JsonParameters.PSobject.Properties["AcsControlGpu2state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlGpu3state"))) { #optional property not found
            $AcsControlGpu3state = $null
        } else {
            $AcsControlGpu3state = $JsonParameters.PSobject.Properties["AcsControlGpu3state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlGpu4state"))) { #optional property not found
            $AcsControlGpu4state = $null
        } else {
            $AcsControlGpu4state = $JsonParameters.PSobject.Properties["AcsControlGpu4state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlGpu5state"))) { #optional property not found
            $AcsControlGpu5state = $null
        } else {
            $AcsControlGpu5state = $JsonParameters.PSobject.Properties["AcsControlGpu5state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlGpu6state"))) { #optional property not found
            $AcsControlGpu6state = $null
        } else {
            $AcsControlGpu6state = $JsonParameters.PSobject.Properties["AcsControlGpu6state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlGpu7state"))) { #optional property not found
            $AcsControlGpu7state = $null
        } else {
            $AcsControlGpu7state = $JsonParameters.PSobject.Properties["AcsControlGpu7state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlGpu8state"))) { #optional property not found
            $AcsControlGpu8state = $null
        } else {
            $AcsControlGpu8state = $JsonParameters.PSobject.Properties["AcsControlGpu8state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlSlot11state"))) { #optional property not found
            $AcsControlSlot11state = $null
        } else {
            $AcsControlSlot11state = $JsonParameters.PSobject.Properties["AcsControlSlot11state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlSlot12state"))) { #optional property not found
            $AcsControlSlot12state = $null
        } else {
            $AcsControlSlot12state = $JsonParameters.PSobject.Properties["AcsControlSlot12state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlSlot13state"))) { #optional property not found
            $AcsControlSlot13state = $null
        } else {
            $AcsControlSlot13state = $JsonParameters.PSobject.Properties["AcsControlSlot13state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcsControlSlot14state"))) { #optional property not found
            $AcsControlSlot14state = $null
        } else {
            $AcsControlSlot14state = $JsonParameters.PSobject.Properties["AcsControlSlot14state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AdjacentCacheLinePrefetch"))) { #optional property not found
            $AdjacentCacheLinePrefetch = $null
        } else {
            $AdjacentCacheLinePrefetch = $JsonParameters.PSobject.Properties["AdjacentCacheLinePrefetch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AdvancedMemTest"))) { #optional property not found
            $AdvancedMemTest = $null
        } else {
            $AdvancedMemTest = $JsonParameters.PSobject.Properties["AdvancedMemTest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AllUsbDevices"))) { #optional property not found
            $AllUsbDevices = $null
        } else {
            $AllUsbDevices = $JsonParameters.PSobject.Properties["AllUsbDevices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Altitude"))) { #optional property not found
            $Altitude = $null
        } else {
            $Altitude = $JsonParameters.PSobject.Properties["Altitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AspmSupport"))) { #optional property not found
            $AspmSupport = $null
        } else {
            $AspmSupport = $JsonParameters.PSobject.Properties["AspmSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AssertNmiOnPerr"))) { #optional property not found
            $AssertNmiOnPerr = $null
        } else {
            $AssertNmiOnPerr = $JsonParameters.PSobject.Properties["AssertNmiOnPerr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AssertNmiOnSerr"))) { #optional property not found
            $AssertNmiOnSerr = $null
        } else {
            $AssertNmiOnSerr = $JsonParameters.PSobject.Properties["AssertNmiOnSerr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AutoCcState"))) { #optional property not found
            $AutoCcState = $null
        } else {
            $AutoCcState = $JsonParameters.PSobject.Properties["AutoCcState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AutonumousCstateEnable"))) { #optional property not found
            $AutonumousCstateEnable = $null
        } else {
            $AutonumousCstateEnable = $JsonParameters.PSobject.Properties["AutonumousCstateEnable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BaudRate"))) { #optional property not found
            $BaudRate = $null
        } else {
            $BaudRate = $JsonParameters.PSobject.Properties["BaudRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BmeDmaMitigation"))) { #optional property not found
            $BmeDmaMitigation = $null
        } else {
            $BmeDmaMitigation = $JsonParameters.PSobject.Properties["BmeDmaMitigation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BootOptionNumRetry"))) { #optional property not found
            $BootOptionNumRetry = $null
        } else {
            $BootOptionNumRetry = $JsonParameters.PSobject.Properties["BootOptionNumRetry"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BootOptionReCoolDown"))) { #optional property not found
            $BootOptionReCoolDown = $null
        } else {
            $BootOptionReCoolDown = $JsonParameters.PSobject.Properties["BootOptionReCoolDown"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BootOptionRetry"))) { #optional property not found
            $BootOptionRetry = $null
        } else {
            $BootOptionRetry = $JsonParameters.PSobject.Properties["BootOptionRetry"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BootPerformanceMode"))) { #optional property not found
            $BootPerformanceMode = $null
        } else {
            $BootPerformanceMode = $JsonParameters.PSobject.Properties["BootPerformanceMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsCmnCpuCpb"))) { #optional property not found
            $CbsCmnCpuCpb = $null
        } else {
            $CbsCmnCpuCpb = $JsonParameters.PSobject.Properties["CbsCmnCpuCpb"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsCmnCpuGenDowncoreCtrl"))) { #optional property not found
            $CbsCmnCpuGenDowncoreCtrl = $null
        } else {
            $CbsCmnCpuGenDowncoreCtrl = $JsonParameters.PSobject.Properties["CbsCmnCpuGenDowncoreCtrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsCmnCpuGlobalCstateCtrl"))) { #optional property not found
            $CbsCmnCpuGlobalCstateCtrl = $null
        } else {
            $CbsCmnCpuGlobalCstateCtrl = $JsonParameters.PSobject.Properties["CbsCmnCpuGlobalCstateCtrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsCmnCpuL1streamHwPrefetcher"))) { #optional property not found
            $CbsCmnCpuL1streamHwPrefetcher = $null
        } else {
            $CbsCmnCpuL1streamHwPrefetcher = $JsonParameters.PSobject.Properties["CbsCmnCpuL1streamHwPrefetcher"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsCmnCpuL2streamHwPrefetcher"))) { #optional property not found
            $CbsCmnCpuL2streamHwPrefetcher = $null
        } else {
            $CbsCmnCpuL2streamHwPrefetcher = $JsonParameters.PSobject.Properties["CbsCmnCpuL2streamHwPrefetcher"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsCmnDeterminismSlider"))) { #optional property not found
            $CbsCmnDeterminismSlider = $null
        } else {
            $CbsCmnDeterminismSlider = $JsonParameters.PSobject.Properties["CbsCmnDeterminismSlider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsCmnGnbNbIommu"))) { #optional property not found
            $CbsCmnGnbNbIommu = $null
        } else {
            $CbsCmnGnbNbIommu = $JsonParameters.PSobject.Properties["CbsCmnGnbNbIommu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsCmnMemCtrlBankGroupSwapDdr4"))) { #optional property not found
            $CbsCmnMemCtrlBankGroupSwapDdr4 = $null
        } else {
            $CbsCmnMemCtrlBankGroupSwapDdr4 = $JsonParameters.PSobject.Properties["CbsCmnMemCtrlBankGroupSwapDdr4"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsCmnMemMapBankInterleaveDdr4"))) { #optional property not found
            $CbsCmnMemMapBankInterleaveDdr4 = $null
        } else {
            $CbsCmnMemMapBankInterleaveDdr4 = $JsonParameters.PSobject.Properties["CbsCmnMemMapBankInterleaveDdr4"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsCmncTdpCtl"))) { #optional property not found
            $CbsCmncTdpCtl = $null
        } else {
            $CbsCmncTdpCtl = $JsonParameters.PSobject.Properties["CbsCmncTdpCtl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsDfCmnMemIntlv"))) { #optional property not found
            $CbsDfCmnMemIntlv = $null
        } else {
            $CbsDfCmnMemIntlv = $JsonParameters.PSobject.Properties["CbsDfCmnMemIntlv"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CbsDfCmnMemIntlvSize"))) { #optional property not found
            $CbsDfCmnMemIntlvSize = $null
        } else {
            $CbsDfCmnMemIntlvSize = $JsonParameters.PSobject.Properties["CbsDfCmnMemIntlvSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CdnEnable"))) { #optional property not found
            $CdnEnable = $null
        } else {
            $CdnEnable = $JsonParameters.PSobject.Properties["CdnEnable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CdnSupport"))) { #optional property not found
            $CdnSupport = $null
        } else {
            $CdnSupport = $JsonParameters.PSobject.Properties["CdnSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ChannelInterLeave"))) { #optional property not found
            $ChannelInterLeave = $null
        } else {
            $ChannelInterLeave = $JsonParameters.PSobject.Properties["ChannelInterLeave"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CiscoAdaptiveMemTraining"))) { #optional property not found
            $CiscoAdaptiveMemTraining = $null
        } else {
            $CiscoAdaptiveMemTraining = $JsonParameters.PSobject.Properties["CiscoAdaptiveMemTraining"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CiscoDebugLevel"))) { #optional property not found
            $CiscoDebugLevel = $null
        } else {
            $CiscoDebugLevel = $JsonParameters.PSobject.Properties["CiscoDebugLevel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CiscoOpromLaunchOptimization"))) { #optional property not found
            $CiscoOpromLaunchOptimization = $null
        } else {
            $CiscoOpromLaunchOptimization = $JsonParameters.PSobject.Properties["CiscoOpromLaunchOptimization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CkeLowPolicy"))) { #optional property not found
            $CkeLowPolicy = $null
        } else {
            $CkeLowPolicy = $JsonParameters.PSobject.Properties["CkeLowPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClosedLoopThermThrotl"))) { #optional property not found
            $ClosedLoopThermThrotl = $null
        } else {
            $ClosedLoopThermThrotl = $JsonParameters.PSobject.Properties["ClosedLoopThermThrotl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CmciEnable"))) { #optional property not found
            $CmciEnable = $null
        } else {
            $CmciEnable = $JsonParameters.PSobject.Properties["CmciEnable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ConfigTdp"))) { #optional property not found
            $ConfigTdp = $null
        } else {
            $ConfigTdp = $JsonParameters.PSobject.Properties["ConfigTdp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ConfigTdpLevel"))) { #optional property not found
            $ConfigTdpLevel = $null
        } else {
            $ConfigTdpLevel = $JsonParameters.PSobject.Properties["ConfigTdpLevel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ConsoleRedirection"))) { #optional property not found
            $ConsoleRedirection = $null
        } else {
            $ConsoleRedirection = $JsonParameters.PSobject.Properties["ConsoleRedirection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CoreMultiProcessing"))) { #optional property not found
            $CoreMultiProcessing = $null
        } else {
            $CoreMultiProcessing = $JsonParameters.PSobject.Properties["CoreMultiProcessing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CpuEnergyPerformance"))) { #optional property not found
            $CpuEnergyPerformance = $null
        } else {
            $CpuEnergyPerformance = $JsonParameters.PSobject.Properties["CpuEnergyPerformance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CpuFrequencyFloor"))) { #optional property not found
            $CpuFrequencyFloor = $null
        } else {
            $CpuFrequencyFloor = $JsonParameters.PSobject.Properties["CpuFrequencyFloor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CpuPerformance"))) { #optional property not found
            $CpuPerformance = $null
        } else {
            $CpuPerformance = $JsonParameters.PSobject.Properties["CpuPerformance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CpuPowerManagement"))) { #optional property not found
            $CpuPowerManagement = $null
        } else {
            $CpuPowerManagement = $JsonParameters.PSobject.Properties["CpuPowerManagement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CrQos"))) { #optional property not found
            $CrQos = $null
        } else {
            $CrQos = $JsonParameters.PSobject.Properties["CrQos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CrfastgoConfig"))) { #optional property not found
            $CrfastgoConfig = $null
        } else {
            $CrfastgoConfig = $JsonParameters.PSobject.Properties["CrfastgoConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DcpmmFirmwareDowngrade"))) { #optional property not found
            $DcpmmFirmwareDowngrade = $null
        } else {
            $DcpmmFirmwareDowngrade = $JsonParameters.PSobject.Properties["DcpmmFirmwareDowngrade"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DemandScrub"))) { #optional property not found
            $DemandScrub = $null
        } else {
            $DemandScrub = $JsonParameters.PSobject.Properties["DemandScrub"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DirectCacheAccess"))) { #optional property not found
            $DirectCacheAccess = $null
        } else {
            $DirectCacheAccess = $JsonParameters.PSobject.Properties["DirectCacheAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DramClockThrottling"))) { #optional property not found
            $DramClockThrottling = $null
        } else {
            $DramClockThrottling = $JsonParameters.PSobject.Properties["DramClockThrottling"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DramRefreshRate"))) { #optional property not found
            $DramRefreshRate = $null
        } else {
            $DramRefreshRate = $JsonParameters.PSobject.Properties["DramRefreshRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DramSwThermalThrottling"))) { #optional property not found
            $DramSwThermalThrottling = $null
        } else {
            $DramSwThermalThrottling = $JsonParameters.PSobject.Properties["DramSwThermalThrottling"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EnableClockSpreadSpec"))) { #optional property not found
            $EnableClockSpreadSpec = $null
        } else {
            $EnableClockSpreadSpec = $JsonParameters.PSobject.Properties["EnableClockSpreadSpec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EnergyEfficientTurbo"))) { #optional property not found
            $EnergyEfficientTurbo = $null
        } else {
            $EnergyEfficientTurbo = $JsonParameters.PSobject.Properties["EnergyEfficientTurbo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EngPerfTuning"))) { #optional property not found
            $EngPerfTuning = $null
        } else {
            $EngPerfTuning = $JsonParameters.PSobject.Properties["EngPerfTuning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EnhancedIntelSpeedStepTech"))) { #optional property not found
            $EnhancedIntelSpeedStepTech = $null
        } else {
            $EnhancedIntelSpeedStepTech = $JsonParameters.PSobject.Properties["EnhancedIntelSpeedStepTech"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EppEnable"))) { #optional property not found
            $EppEnable = $null
        } else {
            $EppEnable = $JsonParameters.PSobject.Properties["EppEnable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EppProfile"))) { #optional property not found
            $EppProfile = $null
        } else {
            $EppProfile = $JsonParameters.PSobject.Properties["EppProfile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExecuteDisableBit"))) { #optional property not found
            $ExecuteDisableBit = $null
        } else {
            $ExecuteDisableBit = $JsonParameters.PSobject.Properties["ExecuteDisableBit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExtendedApic"))) { #optional property not found
            $ExtendedApic = $null
        } else {
            $ExtendedApic = $JsonParameters.PSobject.Properties["ExtendedApic"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FlowControl"))) { #optional property not found
            $FlowControl = $null
        } else {
            $FlowControl = $JsonParameters.PSobject.Properties["FlowControl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Frb2enable"))) { #optional property not found
            $Frb2enable = $null
        } else {
            $Frb2enable = $JsonParameters.PSobject.Properties["Frb2enable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HardwarePrefetch"))) { #optional property not found
            $HardwarePrefetch = $null
        } else {
            $HardwarePrefetch = $JsonParameters.PSobject.Properties["HardwarePrefetch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HwpmEnable"))) { #optional property not found
            $HwpmEnable = $null
        } else {
            $HwpmEnable = $JsonParameters.PSobject.Properties["HwpmEnable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ImcInterleave"))) { #optional property not found
            $ImcInterleave = $null
        } else {
            $ImcInterleave = $JsonParameters.PSobject.Properties["ImcInterleave"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IntelHyperThreadingTech"))) { #optional property not found
            $IntelHyperThreadingTech = $null
        } else {
            $IntelHyperThreadingTech = $JsonParameters.PSobject.Properties["IntelHyperThreadingTech"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IntelSpeedSelect"))) { #optional property not found
            $IntelSpeedSelect = $null
        } else {
            $IntelSpeedSelect = $JsonParameters.PSobject.Properties["IntelSpeedSelect"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IntelTurboBoostTech"))) { #optional property not found
            $IntelTurboBoostTech = $null
        } else {
            $IntelTurboBoostTech = $JsonParameters.PSobject.Properties["IntelTurboBoostTech"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IntelVirtualizationTechnology"))) { #optional property not found
            $IntelVirtualizationTechnology = $null
        } else {
            $IntelVirtualizationTechnology = $JsonParameters.PSobject.Properties["IntelVirtualizationTechnology"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IntelVtForDirectedIo"))) { #optional property not found
            $IntelVtForDirectedIo = $null
        } else {
            $IntelVtForDirectedIo = $JsonParameters.PSobject.Properties["IntelVtForDirectedIo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IntelVtdCoherencySupport"))) { #optional property not found
            $IntelVtdCoherencySupport = $null
        } else {
            $IntelVtdCoherencySupport = $JsonParameters.PSobject.Properties["IntelVtdCoherencySupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IntelVtdInterruptRemapping"))) { #optional property not found
            $IntelVtdInterruptRemapping = $null
        } else {
            $IntelVtdInterruptRemapping = $JsonParameters.PSobject.Properties["IntelVtdInterruptRemapping"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IntelVtdPassThroughDmaSupport"))) { #optional property not found
            $IntelVtdPassThroughDmaSupport = $null
        } else {
            $IntelVtdPassThroughDmaSupport = $JsonParameters.PSobject.Properties["IntelVtdPassThroughDmaSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IntelVtdatsSupport"))) { #optional property not found
            $IntelVtdatsSupport = $null
        } else {
            $IntelVtdatsSupport = $JsonParameters.PSobject.Properties["IntelVtdatsSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IohErrorEnable"))) { #optional property not found
            $IohErrorEnable = $null
        } else {
            $IohErrorEnable = $JsonParameters.PSobject.Properties["IohErrorEnable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IohResource"))) { #optional property not found
            $IohResource = $null
        } else {
            $IohResource = $JsonParameters.PSobject.Properties["IohResource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IpPrefetch"))) { #optional property not found
            $IpPrefetch = $null
        } else {
            $IpPrefetch = $JsonParameters.PSobject.Properties["IpPrefetch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ipv4http"))) { #optional property not found
            $Ipv4http = $null
        } else {
            $Ipv4http = $JsonParameters.PSobject.Properties["Ipv4http"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ipv4pxe"))) { #optional property not found
            $Ipv4pxe = $null
        } else {
            $Ipv4pxe = $JsonParameters.PSobject.Properties["Ipv4pxe"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ipv6http"))) { #optional property not found
            $Ipv6http = $null
        } else {
            $Ipv6http = $JsonParameters.PSobject.Properties["Ipv6http"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ipv6pxe"))) { #optional property not found
            $Ipv6pxe = $null
        } else {
            $Ipv6pxe = $JsonParameters.PSobject.Properties["Ipv6pxe"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "KtiPrefetch"))) { #optional property not found
            $KtiPrefetch = $null
        } else {
            $KtiPrefetch = $JsonParameters.PSobject.Properties["KtiPrefetch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LegacyOsRedirection"))) { #optional property not found
            $LegacyOsRedirection = $null
        } else {
            $LegacyOsRedirection = $JsonParameters.PSobject.Properties["LegacyOsRedirection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LegacyUsbSupport"))) { #optional property not found
            $LegacyUsbSupport = $null
        } else {
            $LegacyUsbSupport = $JsonParameters.PSobject.Properties["LegacyUsbSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LlcPrefetch"))) { #optional property not found
            $LlcPrefetch = $null
        } else {
            $LlcPrefetch = $JsonParameters.PSobject.Properties["LlcPrefetch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LomPort0state"))) { #optional property not found
            $LomPort0state = $null
        } else {
            $LomPort0state = $JsonParameters.PSobject.Properties["LomPort0state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LomPort1state"))) { #optional property not found
            $LomPort1state = $null
        } else {
            $LomPort1state = $JsonParameters.PSobject.Properties["LomPort1state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LomPort2state"))) { #optional property not found
            $LomPort2state = $null
        } else {
            $LomPort2state = $JsonParameters.PSobject.Properties["LomPort2state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LomPort3state"))) { #optional property not found
            $LomPort3state = $null
        } else {
            $LomPort3state = $JsonParameters.PSobject.Properties["LomPort3state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LomPortsAllState"))) { #optional property not found
            $LomPortsAllState = $null
        } else {
            $LomPortsAllState = $JsonParameters.PSobject.Properties["LomPortsAllState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LvDdrMode"))) { #optional property not found
            $LvDdrMode = $null
        } else {
            $LvDdrMode = $JsonParameters.PSobject.Properties["LvDdrMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MakeDeviceNonBootable"))) { #optional property not found
            $MakeDeviceNonBootable = $null
        } else {
            $MakeDeviceNonBootable = $JsonParameters.PSobject.Properties["MakeDeviceNonBootable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemoryInterLeave"))) { #optional property not found
            $MemoryInterLeave = $null
        } else {
            $MemoryInterLeave = $JsonParameters.PSobject.Properties["MemoryInterLeave"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemoryMappedIoAbove4gb"))) { #optional property not found
            $MemoryMappedIoAbove4gb = $null
        } else {
            $MemoryMappedIoAbove4gb = $JsonParameters.PSobject.Properties["MemoryMappedIoAbove4gb"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemoryRefreshRate"))) { #optional property not found
            $MemoryRefreshRate = $null
        } else {
            $MemoryRefreshRate = $JsonParameters.PSobject.Properties["MemoryRefreshRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemorySizeLimit"))) { #optional property not found
            $MemorySizeLimit = $null
        } else {
            $MemorySizeLimit = $JsonParameters.PSobject.Properties["MemorySizeLimit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemoryThermalThrottling"))) { #optional property not found
            $MemoryThermalThrottling = $null
        } else {
            $MemoryThermalThrottling = $JsonParameters.PSobject.Properties["MemoryThermalThrottling"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MirroringMode"))) { #optional property not found
            $MirroringMode = $null
        } else {
            $MirroringMode = $JsonParameters.PSobject.Properties["MirroringMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MmcfgBase"))) { #optional property not found
            $MmcfgBase = $null
        } else {
            $MmcfgBase = $JsonParameters.PSobject.Properties["MmcfgBase"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NetworkStack"))) { #optional property not found
            $NetworkStack = $null
        } else {
            $NetworkStack = $JsonParameters.PSobject.Properties["NetworkStack"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NumaOptimized"))) { #optional property not found
            $NumaOptimized = $null
        } else {
            $NumaOptimized = $JsonParameters.PSobject.Properties["NumaOptimized"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NvmdimmPerformConfig"))) { #optional property not found
            $NvmdimmPerformConfig = $null
        } else {
            $NvmdimmPerformConfig = $JsonParameters.PSobject.Properties["NvmdimmPerformConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Onboard10gbitLom"))) { #optional property not found
            $Onboard10gbitLom = $null
        } else {
            $Onboard10gbitLom = $JsonParameters.PSobject.Properties["Onboard10gbitLom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OnboardGbitLom"))) { #optional property not found
            $OnboardGbitLom = $null
        } else {
            $OnboardGbitLom = $JsonParameters.PSobject.Properties["OnboardGbitLom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OnboardScuStorageSupport"))) { #optional property not found
            $OnboardScuStorageSupport = $null
        } else {
            $OnboardScuStorageSupport = $JsonParameters.PSobject.Properties["OnboardScuStorageSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OnboardScuStorageSwStack"))) { #optional property not found
            $OnboardScuStorageSwStack = $null
        } else {
            $OnboardScuStorageSwStack = $JsonParameters.PSobject.Properties["OnboardScuStorageSwStack"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OsBootWatchdogTimer"))) { #optional property not found
            $OsBootWatchdogTimer = $null
        } else {
            $OsBootWatchdogTimer = $JsonParameters.PSobject.Properties["OsBootWatchdogTimer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OsBootWatchdogTimerPolicy"))) { #optional property not found
            $OsBootWatchdogTimerPolicy = $null
        } else {
            $OsBootWatchdogTimerPolicy = $JsonParameters.PSobject.Properties["OsBootWatchdogTimerPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OsBootWatchdogTimerTimeout"))) { #optional property not found
            $OsBootWatchdogTimerTimeout = $null
        } else {
            $OsBootWatchdogTimerTimeout = $JsonParameters.PSobject.Properties["OsBootWatchdogTimerTimeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OutOfBandMgmtPort"))) { #optional property not found
            $OutOfBandMgmtPort = $null
        } else {
            $OutOfBandMgmtPort = $JsonParameters.PSobject.Properties["OutOfBandMgmtPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PackageCstateLimit"))) { #optional property not found
            $PackageCstateLimit = $null
        } else {
            $PackageCstateLimit = $JsonParameters.PSobject.Properties["PackageCstateLimit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PanicHighWatermark"))) { #optional property not found
            $PanicHighWatermark = $null
        } else {
            $PanicHighWatermark = $JsonParameters.PSobject.Properties["PanicHighWatermark"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PartialMirrorModeConfig"))) { #optional property not found
            $PartialMirrorModeConfig = $null
        } else {
            $PartialMirrorModeConfig = $JsonParameters.PSobject.Properties["PartialMirrorModeConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PartialMirrorPercent"))) { #optional property not found
            $PartialMirrorPercent = $null
        } else {
            $PartialMirrorPercent = $JsonParameters.PSobject.Properties["PartialMirrorPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PartialMirrorValue1"))) { #optional property not found
            $PartialMirrorValue1 = $null
        } else {
            $PartialMirrorValue1 = $JsonParameters.PSobject.Properties["PartialMirrorValue1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PartialMirrorValue2"))) { #optional property not found
            $PartialMirrorValue2 = $null
        } else {
            $PartialMirrorValue2 = $JsonParameters.PSobject.Properties["PartialMirrorValue2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PartialMirrorValue3"))) { #optional property not found
            $PartialMirrorValue3 = $null
        } else {
            $PartialMirrorValue3 = $JsonParameters.PSobject.Properties["PartialMirrorValue3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PartialMirrorValue4"))) { #optional property not found
            $PartialMirrorValue4 = $null
        } else {
            $PartialMirrorValue4 = $JsonParameters.PSobject.Properties["PartialMirrorValue4"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PatrolScrub"))) { #optional property not found
            $PatrolScrub = $null
        } else {
            $PatrolScrub = $JsonParameters.PSobject.Properties["PatrolScrub"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PatrolScrubDuration"))) { #optional property not found
            $PatrolScrubDuration = $null
        } else {
            $PatrolScrubDuration = $JsonParameters.PSobject.Properties["PatrolScrubDuration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcIeRasSupport"))) { #optional property not found
            $PcIeRasSupport = $null
        } else {
            $PcIeRasSupport = $JsonParameters.PSobject.Properties["PcIeRasSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcIeSsdHotPlugSupport"))) { #optional property not found
            $PcIeSsdHotPlugSupport = $null
        } else {
            $PcIeSsdHotPlugSupport = $JsonParameters.PSobject.Properties["PcIeSsdHotPlugSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PchUsb30mode"))) { #optional property not found
            $PchUsb30mode = $null
        } else {
            $PchUsb30mode = $JsonParameters.PSobject.Properties["PchUsb30mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PciOptionRoMs"))) { #optional property not found
            $PciOptionRoMs = $null
        } else {
            $PciOptionRoMs = $JsonParameters.PSobject.Properties["PciOptionRoMs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PciRomClp"))) { #optional property not found
            $PciRomClp = $null
        } else {
            $PciRomClp = $JsonParameters.PSobject.Properties["PciRomClp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieAriSupport"))) { #optional property not found
            $PcieAriSupport = $null
        } else {
            $PcieAriSupport = $JsonParameters.PSobject.Properties["PcieAriSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PciePllSsc"))) { #optional property not found
            $PciePllSsc = $null
        } else {
            $PciePllSsc = $JsonParameters.PSobject.Properties["PciePllSsc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotMstorraidOptionRom"))) { #optional property not found
            $PcieSlotMstorraidOptionRom = $null
        } else {
            $PcieSlotMstorraidOptionRom = $JsonParameters.PSobject.Properties["PcieSlotMstorraidOptionRom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme1linkSpeed"))) { #optional property not found
            $PcieSlotNvme1linkSpeed = $null
        } else {
            $PcieSlotNvme1linkSpeed = $JsonParameters.PSobject.Properties["PcieSlotNvme1linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme1optionRom"))) { #optional property not found
            $PcieSlotNvme1optionRom = $null
        } else {
            $PcieSlotNvme1optionRom = $JsonParameters.PSobject.Properties["PcieSlotNvme1optionRom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme2linkSpeed"))) { #optional property not found
            $PcieSlotNvme2linkSpeed = $null
        } else {
            $PcieSlotNvme2linkSpeed = $JsonParameters.PSobject.Properties["PcieSlotNvme2linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme2optionRom"))) { #optional property not found
            $PcieSlotNvme2optionRom = $null
        } else {
            $PcieSlotNvme2optionRom = $JsonParameters.PSobject.Properties["PcieSlotNvme2optionRom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme3linkSpeed"))) { #optional property not found
            $PcieSlotNvme3linkSpeed = $null
        } else {
            $PcieSlotNvme3linkSpeed = $JsonParameters.PSobject.Properties["PcieSlotNvme3linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme3optionRom"))) { #optional property not found
            $PcieSlotNvme3optionRom = $null
        } else {
            $PcieSlotNvme3optionRom = $JsonParameters.PSobject.Properties["PcieSlotNvme3optionRom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme4linkSpeed"))) { #optional property not found
            $PcieSlotNvme4linkSpeed = $null
        } else {
            $PcieSlotNvme4linkSpeed = $JsonParameters.PSobject.Properties["PcieSlotNvme4linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme4optionRom"))) { #optional property not found
            $PcieSlotNvme4optionRom = $null
        } else {
            $PcieSlotNvme4optionRom = $JsonParameters.PSobject.Properties["PcieSlotNvme4optionRom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme5linkSpeed"))) { #optional property not found
            $PcieSlotNvme5linkSpeed = $null
        } else {
            $PcieSlotNvme5linkSpeed = $JsonParameters.PSobject.Properties["PcieSlotNvme5linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme5optionRom"))) { #optional property not found
            $PcieSlotNvme5optionRom = $null
        } else {
            $PcieSlotNvme5optionRom = $JsonParameters.PSobject.Properties["PcieSlotNvme5optionRom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme6linkSpeed"))) { #optional property not found
            $PcieSlotNvme6linkSpeed = $null
        } else {
            $PcieSlotNvme6linkSpeed = $JsonParameters.PSobject.Properties["PcieSlotNvme6linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PcieSlotNvme6optionRom"))) { #optional property not found
            $PcieSlotNvme6optionRom = $null
        } else {
            $PcieSlotNvme6optionRom = $JsonParameters.PSobject.Properties["PcieSlotNvme6optionRom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PopSupport"))) { #optional property not found
            $PopSupport = $null
        } else {
            $PopSupport = $JsonParameters.PSobject.Properties["PopSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PostErrorPause"))) { #optional property not found
            $PostErrorPause = $null
        } else {
            $PostErrorPause = $JsonParameters.PSobject.Properties["PostErrorPause"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProcessorC1e"))) { #optional property not found
            $ProcessorC1e = $null
        } else {
            $ProcessorC1e = $JsonParameters.PSobject.Properties["ProcessorC1e"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProcessorC3report"))) { #optional property not found
            $ProcessorC3report = $null
        } else {
            $ProcessorC3report = $JsonParameters.PSobject.Properties["ProcessorC3report"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProcessorC6report"))) { #optional property not found
            $ProcessorC6report = $null
        } else {
            $ProcessorC6report = $JsonParameters.PSobject.Properties["ProcessorC6report"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProcessorCstate"))) { #optional property not found
            $ProcessorCstate = $null
        } else {
            $ProcessorCstate = $JsonParameters.PSobject.Properties["ProcessorCstate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Psata"))) { #optional property not found
            $Psata = $null
        } else {
            $Psata = $JsonParameters.PSobject.Properties["Psata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PstateCoordType"))) { #optional property not found
            $PstateCoordType = $null
        } else {
            $PstateCoordType = $JsonParameters.PSobject.Properties["PstateCoordType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PuttyKeyPad"))) { #optional property not found
            $PuttyKeyPad = $null
        } else {
            $PuttyKeyPad = $JsonParameters.PSobject.Properties["PuttyKeyPad"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PwrPerfTuning"))) { #optional property not found
            $PwrPerfTuning = $null
        } else {
            $PwrPerfTuning = $JsonParameters.PSobject.Properties["PwrPerfTuning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QpiLinkFrequency"))) { #optional property not found
            $QpiLinkFrequency = $null
        } else {
            $QpiLinkFrequency = $JsonParameters.PSobject.Properties["QpiLinkFrequency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QpiLinkSpeed"))) { #optional property not found
            $QpiLinkSpeed = $null
        } else {
            $QpiLinkSpeed = $JsonParameters.PSobject.Properties["QpiLinkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "QpiSnoopMode"))) { #optional property not found
            $QpiSnoopMode = $null
        } else {
            $QpiSnoopMode = $JsonParameters.PSobject.Properties["QpiSnoopMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RankInterLeave"))) { #optional property not found
            $RankInterLeave = $null
        } else {
            $RankInterLeave = $JsonParameters.PSobject.Properties["RankInterLeave"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RedirectionAfterPost"))) { #optional property not found
            $RedirectionAfterPost = $null
        } else {
            $RedirectionAfterPost = $JsonParameters.PSobject.Properties["RedirectionAfterPost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SataModeSelect"))) { #optional property not found
            $SataModeSelect = $null
        } else {
            $SataModeSelect = $JsonParameters.PSobject.Properties["SataModeSelect"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SelectMemoryRasConfiguration"))) { #optional property not found
            $SelectMemoryRasConfiguration = $null
        } else {
            $SelectMemoryRasConfiguration = $JsonParameters.PSobject.Properties["SelectMemoryRasConfiguration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SelectPprType"))) { #optional property not found
            $SelectPprType = $null
        } else {
            $SelectPprType = $JsonParameters.PSobject.Properties["SelectPprType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SerialPortAenable"))) { #optional property not found
            $SerialPortAenable = $null
        } else {
            $SerialPortAenable = $JsonParameters.PSobject.Properties["SerialPortAenable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Sev"))) { #optional property not found
            $Sev = $null
        } else {
            $Sev = $JsonParameters.PSobject.Properties["Sev"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SinglePctlEnable"))) { #optional property not found
            $SinglePctlEnable = $null
        } else {
            $SinglePctlEnable = $JsonParameters.PSobject.Properties["SinglePctlEnable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot10linkSpeed"))) { #optional property not found
            $Slot10linkSpeed = $null
        } else {
            $Slot10linkSpeed = $JsonParameters.PSobject.Properties["Slot10linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot10state"))) { #optional property not found
            $Slot10state = $null
        } else {
            $Slot10state = $JsonParameters.PSobject.Properties["Slot10state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot11linkSpeed"))) { #optional property not found
            $Slot11linkSpeed = $null
        } else {
            $Slot11linkSpeed = $JsonParameters.PSobject.Properties["Slot11linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot11state"))) { #optional property not found
            $Slot11state = $null
        } else {
            $Slot11state = $JsonParameters.PSobject.Properties["Slot11state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot12linkSpeed"))) { #optional property not found
            $Slot12linkSpeed = $null
        } else {
            $Slot12linkSpeed = $JsonParameters.PSobject.Properties["Slot12linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot12state"))) { #optional property not found
            $Slot12state = $null
        } else {
            $Slot12state = $JsonParameters.PSobject.Properties["Slot12state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot13state"))) { #optional property not found
            $Slot13state = $null
        } else {
            $Slot13state = $JsonParameters.PSobject.Properties["Slot13state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot14state"))) { #optional property not found
            $Slot14state = $null
        } else {
            $Slot14state = $JsonParameters.PSobject.Properties["Slot14state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot1linkSpeed"))) { #optional property not found
            $Slot1linkSpeed = $null
        } else {
            $Slot1linkSpeed = $JsonParameters.PSobject.Properties["Slot1linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot1state"))) { #optional property not found
            $Slot1state = $null
        } else {
            $Slot1state = $JsonParameters.PSobject.Properties["Slot1state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot2linkSpeed"))) { #optional property not found
            $Slot2linkSpeed = $null
        } else {
            $Slot2linkSpeed = $JsonParameters.PSobject.Properties["Slot2linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot2state"))) { #optional property not found
            $Slot2state = $null
        } else {
            $Slot2state = $JsonParameters.PSobject.Properties["Slot2state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot3linkSpeed"))) { #optional property not found
            $Slot3linkSpeed = $null
        } else {
            $Slot3linkSpeed = $JsonParameters.PSobject.Properties["Slot3linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot3state"))) { #optional property not found
            $Slot3state = $null
        } else {
            $Slot3state = $JsonParameters.PSobject.Properties["Slot3state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot4linkSpeed"))) { #optional property not found
            $Slot4linkSpeed = $null
        } else {
            $Slot4linkSpeed = $JsonParameters.PSobject.Properties["Slot4linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot4state"))) { #optional property not found
            $Slot4state = $null
        } else {
            $Slot4state = $JsonParameters.PSobject.Properties["Slot4state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot5linkSpeed"))) { #optional property not found
            $Slot5linkSpeed = $null
        } else {
            $Slot5linkSpeed = $JsonParameters.PSobject.Properties["Slot5linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot5state"))) { #optional property not found
            $Slot5state = $null
        } else {
            $Slot5state = $JsonParameters.PSobject.Properties["Slot5state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot6linkSpeed"))) { #optional property not found
            $Slot6linkSpeed = $null
        } else {
            $Slot6linkSpeed = $JsonParameters.PSobject.Properties["Slot6linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot6state"))) { #optional property not found
            $Slot6state = $null
        } else {
            $Slot6state = $JsonParameters.PSobject.Properties["Slot6state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot7linkSpeed"))) { #optional property not found
            $Slot7linkSpeed = $null
        } else {
            $Slot7linkSpeed = $JsonParameters.PSobject.Properties["Slot7linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot7state"))) { #optional property not found
            $Slot7state = $null
        } else {
            $Slot7state = $JsonParameters.PSobject.Properties["Slot7state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot8linkSpeed"))) { #optional property not found
            $Slot8linkSpeed = $null
        } else {
            $Slot8linkSpeed = $JsonParameters.PSobject.Properties["Slot8linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot8state"))) { #optional property not found
            $Slot8state = $null
        } else {
            $Slot8state = $JsonParameters.PSobject.Properties["Slot8state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot9linkSpeed"))) { #optional property not found
            $Slot9linkSpeed = $null
        } else {
            $Slot9linkSpeed = $JsonParameters.PSobject.Properties["Slot9linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Slot9state"))) { #optional property not found
            $Slot9state = $null
        } else {
            $Slot9state = $JsonParameters.PSobject.Properties["Slot9state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotFlomLinkSpeed"))) { #optional property not found
            $SlotFlomLinkSpeed = $null
        } else {
            $SlotFlomLinkSpeed = $JsonParameters.PSobject.Properties["SlotFlomLinkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotFrontNvme1linkSpeed"))) { #optional property not found
            $SlotFrontNvme1linkSpeed = $null
        } else {
            $SlotFrontNvme1linkSpeed = $JsonParameters.PSobject.Properties["SlotFrontNvme1linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotFrontNvme2linkSpeed"))) { #optional property not found
            $SlotFrontNvme2linkSpeed = $null
        } else {
            $SlotFrontNvme2linkSpeed = $JsonParameters.PSobject.Properties["SlotFrontNvme2linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotFrontSlot5linkSpeed"))) { #optional property not found
            $SlotFrontSlot5linkSpeed = $null
        } else {
            $SlotFrontSlot5linkSpeed = $JsonParameters.PSobject.Properties["SlotFrontSlot5linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotFrontSlot6linkSpeed"))) { #optional property not found
            $SlotFrontSlot6linkSpeed = $null
        } else {
            $SlotFrontSlot6linkSpeed = $JsonParameters.PSobject.Properties["SlotFrontSlot6linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotGpu1state"))) { #optional property not found
            $SlotGpu1state = $null
        } else {
            $SlotGpu1state = $JsonParameters.PSobject.Properties["SlotGpu1state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotGpu2state"))) { #optional property not found
            $SlotGpu2state = $null
        } else {
            $SlotGpu2state = $JsonParameters.PSobject.Properties["SlotGpu2state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotGpu3state"))) { #optional property not found
            $SlotGpu3state = $null
        } else {
            $SlotGpu3state = $JsonParameters.PSobject.Properties["SlotGpu3state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotGpu4state"))) { #optional property not found
            $SlotGpu4state = $null
        } else {
            $SlotGpu4state = $JsonParameters.PSobject.Properties["SlotGpu4state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotGpu5state"))) { #optional property not found
            $SlotGpu5state = $null
        } else {
            $SlotGpu5state = $JsonParameters.PSobject.Properties["SlotGpu5state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotGpu6state"))) { #optional property not found
            $SlotGpu6state = $null
        } else {
            $SlotGpu6state = $JsonParameters.PSobject.Properties["SlotGpu6state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotGpu7state"))) { #optional property not found
            $SlotGpu7state = $null
        } else {
            $SlotGpu7state = $JsonParameters.PSobject.Properties["SlotGpu7state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotGpu8state"))) { #optional property not found
            $SlotGpu8state = $null
        } else {
            $SlotGpu8state = $JsonParameters.PSobject.Properties["SlotGpu8state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotHbaLinkSpeed"))) { #optional property not found
            $SlotHbaLinkSpeed = $null
        } else {
            $SlotHbaLinkSpeed = $JsonParameters.PSobject.Properties["SlotHbaLinkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotHbaState"))) { #optional property not found
            $SlotHbaState = $null
        } else {
            $SlotHbaState = $JsonParameters.PSobject.Properties["SlotHbaState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotLom1link"))) { #optional property not found
            $SlotLom1link = $null
        } else {
            $SlotLom1link = $JsonParameters.PSobject.Properties["SlotLom1link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotLom2link"))) { #optional property not found
            $SlotLom2link = $null
        } else {
            $SlotLom2link = $JsonParameters.PSobject.Properties["SlotLom2link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotMezzState"))) { #optional property not found
            $SlotMezzState = $null
        } else {
            $SlotMezzState = $JsonParameters.PSobject.Properties["SlotMezzState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotMlomLinkSpeed"))) { #optional property not found
            $SlotMlomLinkSpeed = $null
        } else {
            $SlotMlomLinkSpeed = $JsonParameters.PSobject.Properties["SlotMlomLinkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotMlomState"))) { #optional property not found
            $SlotMlomState = $null
        } else {
            $SlotMlomState = $JsonParameters.PSobject.Properties["SlotMlomState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotMraidLinkSpeed"))) { #optional property not found
            $SlotMraidLinkSpeed = $null
        } else {
            $SlotMraidLinkSpeed = $JsonParameters.PSobject.Properties["SlotMraidLinkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotMraidState"))) { #optional property not found
            $SlotMraidState = $null
        } else {
            $SlotMraidState = $JsonParameters.PSobject.Properties["SlotMraidState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN10state"))) { #optional property not found
            $SlotN10state = $null
        } else {
            $SlotN10state = $JsonParameters.PSobject.Properties["SlotN10state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN11state"))) { #optional property not found
            $SlotN11state = $null
        } else {
            $SlotN11state = $JsonParameters.PSobject.Properties["SlotN11state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN12state"))) { #optional property not found
            $SlotN12state = $null
        } else {
            $SlotN12state = $JsonParameters.PSobject.Properties["SlotN12state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN13state"))) { #optional property not found
            $SlotN13state = $null
        } else {
            $SlotN13state = $JsonParameters.PSobject.Properties["SlotN13state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN14state"))) { #optional property not found
            $SlotN14state = $null
        } else {
            $SlotN14state = $JsonParameters.PSobject.Properties["SlotN14state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN15state"))) { #optional property not found
            $SlotN15state = $null
        } else {
            $SlotN15state = $JsonParameters.PSobject.Properties["SlotN15state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN16state"))) { #optional property not found
            $SlotN16state = $null
        } else {
            $SlotN16state = $JsonParameters.PSobject.Properties["SlotN16state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN17state"))) { #optional property not found
            $SlotN17state = $null
        } else {
            $SlotN17state = $JsonParameters.PSobject.Properties["SlotN17state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN18state"))) { #optional property not found
            $SlotN18state = $null
        } else {
            $SlotN18state = $JsonParameters.PSobject.Properties["SlotN18state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN19state"))) { #optional property not found
            $SlotN19state = $null
        } else {
            $SlotN19state = $JsonParameters.PSobject.Properties["SlotN19state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN1state"))) { #optional property not found
            $SlotN1state = $null
        } else {
            $SlotN1state = $JsonParameters.PSobject.Properties["SlotN1state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN20state"))) { #optional property not found
            $SlotN20state = $null
        } else {
            $SlotN20state = $JsonParameters.PSobject.Properties["SlotN20state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN21state"))) { #optional property not found
            $SlotN21state = $null
        } else {
            $SlotN21state = $JsonParameters.PSobject.Properties["SlotN21state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN22state"))) { #optional property not found
            $SlotN22state = $null
        } else {
            $SlotN22state = $JsonParameters.PSobject.Properties["SlotN22state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN23state"))) { #optional property not found
            $SlotN23state = $null
        } else {
            $SlotN23state = $JsonParameters.PSobject.Properties["SlotN23state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN24state"))) { #optional property not found
            $SlotN24state = $null
        } else {
            $SlotN24state = $JsonParameters.PSobject.Properties["SlotN24state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN2state"))) { #optional property not found
            $SlotN2state = $null
        } else {
            $SlotN2state = $JsonParameters.PSobject.Properties["SlotN2state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN3state"))) { #optional property not found
            $SlotN3state = $null
        } else {
            $SlotN3state = $JsonParameters.PSobject.Properties["SlotN3state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN4state"))) { #optional property not found
            $SlotN4state = $null
        } else {
            $SlotN4state = $JsonParameters.PSobject.Properties["SlotN4state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN5state"))) { #optional property not found
            $SlotN5state = $null
        } else {
            $SlotN5state = $JsonParameters.PSobject.Properties["SlotN5state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN6state"))) { #optional property not found
            $SlotN6state = $null
        } else {
            $SlotN6state = $JsonParameters.PSobject.Properties["SlotN6state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN7state"))) { #optional property not found
            $SlotN7state = $null
        } else {
            $SlotN7state = $JsonParameters.PSobject.Properties["SlotN7state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN8state"))) { #optional property not found
            $SlotN8state = $null
        } else {
            $SlotN8state = $JsonParameters.PSobject.Properties["SlotN8state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotN9state"))) { #optional property not found
            $SlotN9state = $null
        } else {
            $SlotN9state = $JsonParameters.PSobject.Properties["SlotN9state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRaidLinkSpeed"))) { #optional property not found
            $SlotRaidLinkSpeed = $null
        } else {
            $SlotRaidLinkSpeed = $JsonParameters.PSobject.Properties["SlotRaidLinkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRaidState"))) { #optional property not found
            $SlotRaidState = $null
        } else {
            $SlotRaidState = $JsonParameters.PSobject.Properties["SlotRaidState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRearNvme1linkSpeed"))) { #optional property not found
            $SlotRearNvme1linkSpeed = $null
        } else {
            $SlotRearNvme1linkSpeed = $JsonParameters.PSobject.Properties["SlotRearNvme1linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRearNvme1state"))) { #optional property not found
            $SlotRearNvme1state = $null
        } else {
            $SlotRearNvme1state = $JsonParameters.PSobject.Properties["SlotRearNvme1state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRearNvme2linkSpeed"))) { #optional property not found
            $SlotRearNvme2linkSpeed = $null
        } else {
            $SlotRearNvme2linkSpeed = $JsonParameters.PSobject.Properties["SlotRearNvme2linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRearNvme2state"))) { #optional property not found
            $SlotRearNvme2state = $null
        } else {
            $SlotRearNvme2state = $JsonParameters.PSobject.Properties["SlotRearNvme2state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRearNvme3state"))) { #optional property not found
            $SlotRearNvme3state = $null
        } else {
            $SlotRearNvme3state = $JsonParameters.PSobject.Properties["SlotRearNvme3state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRearNvme4state"))) { #optional property not found
            $SlotRearNvme4state = $null
        } else {
            $SlotRearNvme4state = $JsonParameters.PSobject.Properties["SlotRearNvme4state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRearNvme5state"))) { #optional property not found
            $SlotRearNvme5state = $null
        } else {
            $SlotRearNvme5state = $JsonParameters.PSobject.Properties["SlotRearNvme5state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRearNvme6state"))) { #optional property not found
            $SlotRearNvme6state = $null
        } else {
            $SlotRearNvme6state = $JsonParameters.PSobject.Properties["SlotRearNvme6state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRearNvme7state"))) { #optional property not found
            $SlotRearNvme7state = $null
        } else {
            $SlotRearNvme7state = $JsonParameters.PSobject.Properties["SlotRearNvme7state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRearNvme8state"))) { #optional property not found
            $SlotRearNvme8state = $null
        } else {
            $SlotRearNvme8state = $JsonParameters.PSobject.Properties["SlotRearNvme8state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRiser1linkSpeed"))) { #optional property not found
            $SlotRiser1linkSpeed = $null
        } else {
            $SlotRiser1linkSpeed = $JsonParameters.PSobject.Properties["SlotRiser1linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRiser1slot1linkSpeed"))) { #optional property not found
            $SlotRiser1slot1linkSpeed = $null
        } else {
            $SlotRiser1slot1linkSpeed = $JsonParameters.PSobject.Properties["SlotRiser1slot1linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRiser1slot2linkSpeed"))) { #optional property not found
            $SlotRiser1slot2linkSpeed = $null
        } else {
            $SlotRiser1slot2linkSpeed = $JsonParameters.PSobject.Properties["SlotRiser1slot2linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRiser1slot3linkSpeed"))) { #optional property not found
            $SlotRiser1slot3linkSpeed = $null
        } else {
            $SlotRiser1slot3linkSpeed = $JsonParameters.PSobject.Properties["SlotRiser1slot3linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRiser2linkSpeed"))) { #optional property not found
            $SlotRiser2linkSpeed = $null
        } else {
            $SlotRiser2linkSpeed = $JsonParameters.PSobject.Properties["SlotRiser2linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRiser2slot4linkSpeed"))) { #optional property not found
            $SlotRiser2slot4linkSpeed = $null
        } else {
            $SlotRiser2slot4linkSpeed = $JsonParameters.PSobject.Properties["SlotRiser2slot4linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRiser2slot5linkSpeed"))) { #optional property not found
            $SlotRiser2slot5linkSpeed = $null
        } else {
            $SlotRiser2slot5linkSpeed = $JsonParameters.PSobject.Properties["SlotRiser2slot5linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotRiser2slot6linkSpeed"))) { #optional property not found
            $SlotRiser2slot6linkSpeed = $null
        } else {
            $SlotRiser2slot6linkSpeed = $JsonParameters.PSobject.Properties["SlotRiser2slot6linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotSasState"))) { #optional property not found
            $SlotSasState = $null
        } else {
            $SlotSasState = $JsonParameters.PSobject.Properties["SlotSasState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotSsdSlot1linkSpeed"))) { #optional property not found
            $SlotSsdSlot1linkSpeed = $null
        } else {
            $SlotSsdSlot1linkSpeed = $JsonParameters.PSobject.Properties["SlotSsdSlot1linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SlotSsdSlot2linkSpeed"))) { #optional property not found
            $SlotSsdSlot2linkSpeed = $null
        } else {
            $SlotSsdSlot2linkSpeed = $JsonParameters.PSobject.Properties["SlotSsdSlot2linkSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Smee"))) { #optional property not found
            $Smee = $null
        } else {
            $Smee = $JsonParameters.PSobject.Properties["Smee"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SmtMode"))) { #optional property not found
            $SmtMode = $null
        } else {
            $SmtMode = $JsonParameters.PSobject.Properties["SmtMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Snc"))) { #optional property not found
            $Snc = $null
        } else {
            $Snc = $JsonParameters.PSobject.Properties["Snc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SnoopyModeFor2lm"))) { #optional property not found
            $SnoopyModeFor2lm = $null
        } else {
            $SnoopyModeFor2lm = $JsonParameters.PSobject.Properties["SnoopyModeFor2lm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SnoopyModeForAd"))) { #optional property not found
            $SnoopyModeForAd = $null
        } else {
            $SnoopyModeForAd = $JsonParameters.PSobject.Properties["SnoopyModeForAd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SparingMode"))) { #optional property not found
            $SparingMode = $null
        } else {
            $SparingMode = $JsonParameters.PSobject.Properties["SparingMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SrIov"))) { #optional property not found
            $SrIov = $null
        } else {
            $SrIov = $JsonParameters.PSobject.Properties["SrIov"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "StreamerPrefetch"))) { #optional property not found
            $StreamerPrefetch = $null
        } else {
            $StreamerPrefetch = $JsonParameters.PSobject.Properties["StreamerPrefetch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SvmMode"))) { #optional property not found
            $SvmMode = $null
        } else {
            $SvmMode = $JsonParameters.PSobject.Properties["SvmMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TerminalType"))) { #optional property not found
            $TerminalType = $null
        } else {
            $TerminalType = $JsonParameters.PSobject.Properties["TerminalType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TpmControl"))) { #optional property not found
            $TpmControl = $null
        } else {
            $TpmControl = $JsonParameters.PSobject.Properties["TpmControl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TpmSupport"))) { #optional property not found
            $TpmSupport = $null
        } else {
            $TpmSupport = $JsonParameters.PSobject.Properties["TpmSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Tsme"))) { #optional property not found
            $Tsme = $null
        } else {
            $Tsme = $JsonParameters.PSobject.Properties["Tsme"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "TxtSupport"))) { #optional property not found
            $TxtSupport = $null
        } else {
            $TxtSupport = $JsonParameters.PSobject.Properties["TxtSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UcsmBootOrderRule"))) { #optional property not found
            $UcsmBootOrderRule = $null
        } else {
            $UcsmBootOrderRule = $JsonParameters.PSobject.Properties["UcsmBootOrderRule"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UfsDisable"))) { #optional property not found
            $UfsDisable = $null
        } else {
            $UfsDisable = $JsonParameters.PSobject.Properties["UfsDisable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UsbEmul6064"))) { #optional property not found
            $UsbEmul6064 = $null
        } else {
            $UsbEmul6064 = $JsonParameters.PSobject.Properties["UsbEmul6064"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UsbPortFront"))) { #optional property not found
            $UsbPortFront = $null
        } else {
            $UsbPortFront = $JsonParameters.PSobject.Properties["UsbPortFront"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UsbPortInternal"))) { #optional property not found
            $UsbPortInternal = $null
        } else {
            $UsbPortInternal = $JsonParameters.PSobject.Properties["UsbPortInternal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UsbPortKvm"))) { #optional property not found
            $UsbPortKvm = $null
        } else {
            $UsbPortKvm = $JsonParameters.PSobject.Properties["UsbPortKvm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UsbPortRear"))) { #optional property not found
            $UsbPortRear = $null
        } else {
            $UsbPortRear = $JsonParameters.PSobject.Properties["UsbPortRear"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UsbPortSdCard"))) { #optional property not found
            $UsbPortSdCard = $null
        } else {
            $UsbPortSdCard = $JsonParameters.PSobject.Properties["UsbPortSdCard"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UsbPortVmedia"))) { #optional property not found
            $UsbPortVmedia = $null
        } else {
            $UsbPortVmedia = $JsonParameters.PSobject.Properties["UsbPortVmedia"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UsbXhciSupport"))) { #optional property not found
            $UsbXhciSupport = $null
        } else {
            $UsbXhciSupport = $JsonParameters.PSobject.Properties["UsbXhciSupport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VgaPriority"))) { #optional property not found
            $VgaPriority = $null
        } else {
            $VgaPriority = $JsonParameters.PSobject.Properties["VgaPriority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VmdEnable"))) { #optional property not found
            $VmdEnable = $null
        } else {
            $VmdEnable = $JsonParameters.PSobject.Properties["VmdEnable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "WorkLoadConfig"))) { #optional property not found
            $WorkLoadConfig = $null
        } else {
            $WorkLoadConfig = $JsonParameters.PSobject.Properties["WorkLoadConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "XptPrefetch"))) { #optional property not found
            $XptPrefetch = $null
        } else {
            $XptPrefetch = $JsonParameters.PSobject.Properties["XptPrefetch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Organization"))) { #optional property not found
            $Organization = $null
        } else {
            $Organization = $JsonParameters.PSobject.Properties["Organization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Profiles"))) { #optional property not found
            $Profiles = $null
        } else {
            $Profiles = $JsonParameters.PSobject.Properties["Profiles"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AcsControlGpu1state" = ${AcsControlGpu1state}
            "AcsControlGpu2state" = ${AcsControlGpu2state}
            "AcsControlGpu3state" = ${AcsControlGpu3state}
            "AcsControlGpu4state" = ${AcsControlGpu4state}
            "AcsControlGpu5state" = ${AcsControlGpu5state}
            "AcsControlGpu6state" = ${AcsControlGpu6state}
            "AcsControlGpu7state" = ${AcsControlGpu7state}
            "AcsControlGpu8state" = ${AcsControlGpu8state}
            "AcsControlSlot11state" = ${AcsControlSlot11state}
            "AcsControlSlot12state" = ${AcsControlSlot12state}
            "AcsControlSlot13state" = ${AcsControlSlot13state}
            "AcsControlSlot14state" = ${AcsControlSlot14state}
            "AdjacentCacheLinePrefetch" = ${AdjacentCacheLinePrefetch}
            "AdvancedMemTest" = ${AdvancedMemTest}
            "AllUsbDevices" = ${AllUsbDevices}
            "Altitude" = ${Altitude}
            "AspmSupport" = ${AspmSupport}
            "AssertNmiOnPerr" = ${AssertNmiOnPerr}
            "AssertNmiOnSerr" = ${AssertNmiOnSerr}
            "AutoCcState" = ${AutoCcState}
            "AutonumousCstateEnable" = ${AutonumousCstateEnable}
            "BaudRate" = ${BaudRate}
            "BmeDmaMitigation" = ${BmeDmaMitigation}
            "BootOptionNumRetry" = ${BootOptionNumRetry}
            "BootOptionReCoolDown" = ${BootOptionReCoolDown}
            "BootOptionRetry" = ${BootOptionRetry}
            "BootPerformanceMode" = ${BootPerformanceMode}
            "CbsCmnCpuCpb" = ${CbsCmnCpuCpb}
            "CbsCmnCpuGenDowncoreCtrl" = ${CbsCmnCpuGenDowncoreCtrl}
            "CbsCmnCpuGlobalCstateCtrl" = ${CbsCmnCpuGlobalCstateCtrl}
            "CbsCmnCpuL1streamHwPrefetcher" = ${CbsCmnCpuL1streamHwPrefetcher}
            "CbsCmnCpuL2streamHwPrefetcher" = ${CbsCmnCpuL2streamHwPrefetcher}
            "CbsCmnDeterminismSlider" = ${CbsCmnDeterminismSlider}
            "CbsCmnGnbNbIommu" = ${CbsCmnGnbNbIommu}
            "CbsCmnMemCtrlBankGroupSwapDdr4" = ${CbsCmnMemCtrlBankGroupSwapDdr4}
            "CbsCmnMemMapBankInterleaveDdr4" = ${CbsCmnMemMapBankInterleaveDdr4}
            "CbsCmncTdpCtl" = ${CbsCmncTdpCtl}
            "CbsDfCmnMemIntlv" = ${CbsDfCmnMemIntlv}
            "CbsDfCmnMemIntlvSize" = ${CbsDfCmnMemIntlvSize}
            "CdnEnable" = ${CdnEnable}
            "CdnSupport" = ${CdnSupport}
            "ChannelInterLeave" = ${ChannelInterLeave}
            "CiscoAdaptiveMemTraining" = ${CiscoAdaptiveMemTraining}
            "CiscoDebugLevel" = ${CiscoDebugLevel}
            "CiscoOpromLaunchOptimization" = ${CiscoOpromLaunchOptimization}
            "CkeLowPolicy" = ${CkeLowPolicy}
            "ClosedLoopThermThrotl" = ${ClosedLoopThermThrotl}
            "CmciEnable" = ${CmciEnable}
            "ConfigTdp" = ${ConfigTdp}
            "ConfigTdpLevel" = ${ConfigTdpLevel}
            "ConsoleRedirection" = ${ConsoleRedirection}
            "CoreMultiProcessing" = ${CoreMultiProcessing}
            "CpuEnergyPerformance" = ${CpuEnergyPerformance}
            "CpuFrequencyFloor" = ${CpuFrequencyFloor}
            "CpuPerformance" = ${CpuPerformance}
            "CpuPowerManagement" = ${CpuPowerManagement}
            "CrQos" = ${CrQos}
            "CrfastgoConfig" = ${CrfastgoConfig}
            "DcpmmFirmwareDowngrade" = ${DcpmmFirmwareDowngrade}
            "DemandScrub" = ${DemandScrub}
            "DirectCacheAccess" = ${DirectCacheAccess}
            "DramClockThrottling" = ${DramClockThrottling}
            "DramRefreshRate" = ${DramRefreshRate}
            "DramSwThermalThrottling" = ${DramSwThermalThrottling}
            "EnableClockSpreadSpec" = ${EnableClockSpreadSpec}
            "EnergyEfficientTurbo" = ${EnergyEfficientTurbo}
            "EngPerfTuning" = ${EngPerfTuning}
            "EnhancedIntelSpeedStepTech" = ${EnhancedIntelSpeedStepTech}
            "EppEnable" = ${EppEnable}
            "EppProfile" = ${EppProfile}
            "ExecuteDisableBit" = ${ExecuteDisableBit}
            "ExtendedApic" = ${ExtendedApic}
            "FlowControl" = ${FlowControl}
            "Frb2enable" = ${Frb2enable}
            "HardwarePrefetch" = ${HardwarePrefetch}
            "HwpmEnable" = ${HwpmEnable}
            "ImcInterleave" = ${ImcInterleave}
            "IntelHyperThreadingTech" = ${IntelHyperThreadingTech}
            "IntelSpeedSelect" = ${IntelSpeedSelect}
            "IntelTurboBoostTech" = ${IntelTurboBoostTech}
            "IntelVirtualizationTechnology" = ${IntelVirtualizationTechnology}
            "IntelVtForDirectedIo" = ${IntelVtForDirectedIo}
            "IntelVtdCoherencySupport" = ${IntelVtdCoherencySupport}
            "IntelVtdInterruptRemapping" = ${IntelVtdInterruptRemapping}
            "IntelVtdPassThroughDmaSupport" = ${IntelVtdPassThroughDmaSupport}
            "IntelVtdatsSupport" = ${IntelVtdatsSupport}
            "IohErrorEnable" = ${IohErrorEnable}
            "IohResource" = ${IohResource}
            "IpPrefetch" = ${IpPrefetch}
            "Ipv4http" = ${Ipv4http}
            "Ipv4pxe" = ${Ipv4pxe}
            "Ipv6http" = ${Ipv6http}
            "Ipv6pxe" = ${Ipv6pxe}
            "KtiPrefetch" = ${KtiPrefetch}
            "LegacyOsRedirection" = ${LegacyOsRedirection}
            "LegacyUsbSupport" = ${LegacyUsbSupport}
            "LlcPrefetch" = ${LlcPrefetch}
            "LomPort0state" = ${LomPort0state}
            "LomPort1state" = ${LomPort1state}
            "LomPort2state" = ${LomPort2state}
            "LomPort3state" = ${LomPort3state}
            "LomPortsAllState" = ${LomPortsAllState}
            "LvDdrMode" = ${LvDdrMode}
            "MakeDeviceNonBootable" = ${MakeDeviceNonBootable}
            "MemoryInterLeave" = ${MemoryInterLeave}
            "MemoryMappedIoAbove4gb" = ${MemoryMappedIoAbove4gb}
            "MemoryRefreshRate" = ${MemoryRefreshRate}
            "MemorySizeLimit" = ${MemorySizeLimit}
            "MemoryThermalThrottling" = ${MemoryThermalThrottling}
            "MirroringMode" = ${MirroringMode}
            "MmcfgBase" = ${MmcfgBase}
            "NetworkStack" = ${NetworkStack}
            "NumaOptimized" = ${NumaOptimized}
            "NvmdimmPerformConfig" = ${NvmdimmPerformConfig}
            "Onboard10gbitLom" = ${Onboard10gbitLom}
            "OnboardGbitLom" = ${OnboardGbitLom}
            "OnboardScuStorageSupport" = ${OnboardScuStorageSupport}
            "OnboardScuStorageSwStack" = ${OnboardScuStorageSwStack}
            "OsBootWatchdogTimer" = ${OsBootWatchdogTimer}
            "OsBootWatchdogTimerPolicy" = ${OsBootWatchdogTimerPolicy}
            "OsBootWatchdogTimerTimeout" = ${OsBootWatchdogTimerTimeout}
            "OutOfBandMgmtPort" = ${OutOfBandMgmtPort}
            "PackageCstateLimit" = ${PackageCstateLimit}
            "PanicHighWatermark" = ${PanicHighWatermark}
            "PartialMirrorModeConfig" = ${PartialMirrorModeConfig}
            "PartialMirrorPercent" = ${PartialMirrorPercent}
            "PartialMirrorValue1" = ${PartialMirrorValue1}
            "PartialMirrorValue2" = ${PartialMirrorValue2}
            "PartialMirrorValue3" = ${PartialMirrorValue3}
            "PartialMirrorValue4" = ${PartialMirrorValue4}
            "PatrolScrub" = ${PatrolScrub}
            "PatrolScrubDuration" = ${PatrolScrubDuration}
            "PcIeRasSupport" = ${PcIeRasSupport}
            "PcIeSsdHotPlugSupport" = ${PcIeSsdHotPlugSupport}
            "PchUsb30mode" = ${PchUsb30mode}
            "PciOptionRoMs" = ${PciOptionRoMs}
            "PciRomClp" = ${PciRomClp}
            "PcieAriSupport" = ${PcieAriSupport}
            "PciePllSsc" = ${PciePllSsc}
            "PcieSlotMstorraidOptionRom" = ${PcieSlotMstorraidOptionRom}
            "PcieSlotNvme1linkSpeed" = ${PcieSlotNvme1linkSpeed}
            "PcieSlotNvme1optionRom" = ${PcieSlotNvme1optionRom}
            "PcieSlotNvme2linkSpeed" = ${PcieSlotNvme2linkSpeed}
            "PcieSlotNvme2optionRom" = ${PcieSlotNvme2optionRom}
            "PcieSlotNvme3linkSpeed" = ${PcieSlotNvme3linkSpeed}
            "PcieSlotNvme3optionRom" = ${PcieSlotNvme3optionRom}
            "PcieSlotNvme4linkSpeed" = ${PcieSlotNvme4linkSpeed}
            "PcieSlotNvme4optionRom" = ${PcieSlotNvme4optionRom}
            "PcieSlotNvme5linkSpeed" = ${PcieSlotNvme5linkSpeed}
            "PcieSlotNvme5optionRom" = ${PcieSlotNvme5optionRom}
            "PcieSlotNvme6linkSpeed" = ${PcieSlotNvme6linkSpeed}
            "PcieSlotNvme6optionRom" = ${PcieSlotNvme6optionRom}
            "PopSupport" = ${PopSupport}
            "PostErrorPause" = ${PostErrorPause}
            "ProcessorC1e" = ${ProcessorC1e}
            "ProcessorC3report" = ${ProcessorC3report}
            "ProcessorC6report" = ${ProcessorC6report}
            "ProcessorCstate" = ${ProcessorCstate}
            "Psata" = ${Psata}
            "PstateCoordType" = ${PstateCoordType}
            "PuttyKeyPad" = ${PuttyKeyPad}
            "PwrPerfTuning" = ${PwrPerfTuning}
            "QpiLinkFrequency" = ${QpiLinkFrequency}
            "QpiLinkSpeed" = ${QpiLinkSpeed}
            "QpiSnoopMode" = ${QpiSnoopMode}
            "RankInterLeave" = ${RankInterLeave}
            "RedirectionAfterPost" = ${RedirectionAfterPost}
            "SataModeSelect" = ${SataModeSelect}
            "SelectMemoryRasConfiguration" = ${SelectMemoryRasConfiguration}
            "SelectPprType" = ${SelectPprType}
            "SerialPortAenable" = ${SerialPortAenable}
            "Sev" = ${Sev}
            "SinglePctlEnable" = ${SinglePctlEnable}
            "Slot10linkSpeed" = ${Slot10linkSpeed}
            "Slot10state" = ${Slot10state}
            "Slot11linkSpeed" = ${Slot11linkSpeed}
            "Slot11state" = ${Slot11state}
            "Slot12linkSpeed" = ${Slot12linkSpeed}
            "Slot12state" = ${Slot12state}
            "Slot13state" = ${Slot13state}
            "Slot14state" = ${Slot14state}
            "Slot1linkSpeed" = ${Slot1linkSpeed}
            "Slot1state" = ${Slot1state}
            "Slot2linkSpeed" = ${Slot2linkSpeed}
            "Slot2state" = ${Slot2state}
            "Slot3linkSpeed" = ${Slot3linkSpeed}
            "Slot3state" = ${Slot3state}
            "Slot4linkSpeed" = ${Slot4linkSpeed}
            "Slot4state" = ${Slot4state}
            "Slot5linkSpeed" = ${Slot5linkSpeed}
            "Slot5state" = ${Slot5state}
            "Slot6linkSpeed" = ${Slot6linkSpeed}
            "Slot6state" = ${Slot6state}
            "Slot7linkSpeed" = ${Slot7linkSpeed}
            "Slot7state" = ${Slot7state}
            "Slot8linkSpeed" = ${Slot8linkSpeed}
            "Slot8state" = ${Slot8state}
            "Slot9linkSpeed" = ${Slot9linkSpeed}
            "Slot9state" = ${Slot9state}
            "SlotFlomLinkSpeed" = ${SlotFlomLinkSpeed}
            "SlotFrontNvme1linkSpeed" = ${SlotFrontNvme1linkSpeed}
            "SlotFrontNvme2linkSpeed" = ${SlotFrontNvme2linkSpeed}
            "SlotFrontSlot5linkSpeed" = ${SlotFrontSlot5linkSpeed}
            "SlotFrontSlot6linkSpeed" = ${SlotFrontSlot6linkSpeed}
            "SlotGpu1state" = ${SlotGpu1state}
            "SlotGpu2state" = ${SlotGpu2state}
            "SlotGpu3state" = ${SlotGpu3state}
            "SlotGpu4state" = ${SlotGpu4state}
            "SlotGpu5state" = ${SlotGpu5state}
            "SlotGpu6state" = ${SlotGpu6state}
            "SlotGpu7state" = ${SlotGpu7state}
            "SlotGpu8state" = ${SlotGpu8state}
            "SlotHbaLinkSpeed" = ${SlotHbaLinkSpeed}
            "SlotHbaState" = ${SlotHbaState}
            "SlotLom1link" = ${SlotLom1link}
            "SlotLom2link" = ${SlotLom2link}
            "SlotMezzState" = ${SlotMezzState}
            "SlotMlomLinkSpeed" = ${SlotMlomLinkSpeed}
            "SlotMlomState" = ${SlotMlomState}
            "SlotMraidLinkSpeed" = ${SlotMraidLinkSpeed}
            "SlotMraidState" = ${SlotMraidState}
            "SlotN10state" = ${SlotN10state}
            "SlotN11state" = ${SlotN11state}
            "SlotN12state" = ${SlotN12state}
            "SlotN13state" = ${SlotN13state}
            "SlotN14state" = ${SlotN14state}
            "SlotN15state" = ${SlotN15state}
            "SlotN16state" = ${SlotN16state}
            "SlotN17state" = ${SlotN17state}
            "SlotN18state" = ${SlotN18state}
            "SlotN19state" = ${SlotN19state}
            "SlotN1state" = ${SlotN1state}
            "SlotN20state" = ${SlotN20state}
            "SlotN21state" = ${SlotN21state}
            "SlotN22state" = ${SlotN22state}
            "SlotN23state" = ${SlotN23state}
            "SlotN24state" = ${SlotN24state}
            "SlotN2state" = ${SlotN2state}
            "SlotN3state" = ${SlotN3state}
            "SlotN4state" = ${SlotN4state}
            "SlotN5state" = ${SlotN5state}
            "SlotN6state" = ${SlotN6state}
            "SlotN7state" = ${SlotN7state}
            "SlotN8state" = ${SlotN8state}
            "SlotN9state" = ${SlotN9state}
            "SlotRaidLinkSpeed" = ${SlotRaidLinkSpeed}
            "SlotRaidState" = ${SlotRaidState}
            "SlotRearNvme1linkSpeed" = ${SlotRearNvme1linkSpeed}
            "SlotRearNvme1state" = ${SlotRearNvme1state}
            "SlotRearNvme2linkSpeed" = ${SlotRearNvme2linkSpeed}
            "SlotRearNvme2state" = ${SlotRearNvme2state}
            "SlotRearNvme3state" = ${SlotRearNvme3state}
            "SlotRearNvme4state" = ${SlotRearNvme4state}
            "SlotRearNvme5state" = ${SlotRearNvme5state}
            "SlotRearNvme6state" = ${SlotRearNvme6state}
            "SlotRearNvme7state" = ${SlotRearNvme7state}
            "SlotRearNvme8state" = ${SlotRearNvme8state}
            "SlotRiser1linkSpeed" = ${SlotRiser1linkSpeed}
            "SlotRiser1slot1linkSpeed" = ${SlotRiser1slot1linkSpeed}
            "SlotRiser1slot2linkSpeed" = ${SlotRiser1slot2linkSpeed}
            "SlotRiser1slot3linkSpeed" = ${SlotRiser1slot3linkSpeed}
            "SlotRiser2linkSpeed" = ${SlotRiser2linkSpeed}
            "SlotRiser2slot4linkSpeed" = ${SlotRiser2slot4linkSpeed}
            "SlotRiser2slot5linkSpeed" = ${SlotRiser2slot5linkSpeed}
            "SlotRiser2slot6linkSpeed" = ${SlotRiser2slot6linkSpeed}
            "SlotSasState" = ${SlotSasState}
            "SlotSsdSlot1linkSpeed" = ${SlotSsdSlot1linkSpeed}
            "SlotSsdSlot2linkSpeed" = ${SlotSsdSlot2linkSpeed}
            "Smee" = ${Smee}
            "SmtMode" = ${SmtMode}
            "Snc" = ${Snc}
            "SnoopyModeFor2lm" = ${SnoopyModeFor2lm}
            "SnoopyModeForAd" = ${SnoopyModeForAd}
            "SparingMode" = ${SparingMode}
            "SrIov" = ${SrIov}
            "StreamerPrefetch" = ${StreamerPrefetch}
            "SvmMode" = ${SvmMode}
            "TerminalType" = ${TerminalType}
            "TpmControl" = ${TpmControl}
            "TpmSupport" = ${TpmSupport}
            "Tsme" = ${Tsme}
            "TxtSupport" = ${TxtSupport}
            "UcsmBootOrderRule" = ${UcsmBootOrderRule}
            "UfsDisable" = ${UfsDisable}
            "UsbEmul6064" = ${UsbEmul6064}
            "UsbPortFront" = ${UsbPortFront}
            "UsbPortInternal" = ${UsbPortInternal}
            "UsbPortKvm" = ${UsbPortKvm}
            "UsbPortRear" = ${UsbPortRear}
            "UsbPortSdCard" = ${UsbPortSdCard}
            "UsbPortVmedia" = ${UsbPortVmedia}
            "UsbXhciSupport" = ${UsbXhciSupport}
            "VgaPriority" = ${VgaPriority}
            "VmdEnable" = ${VmdEnable}
            "WorkLoadConfig" = ${WorkLoadConfig}
            "XptPrefetch" = ${XptPrefetch}
            "Organization" = ${Organization}
            "Profiles" = ${Profiles}
        }

        return $PSO
    }

}

