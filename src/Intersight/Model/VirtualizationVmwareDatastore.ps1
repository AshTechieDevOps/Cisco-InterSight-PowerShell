#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The VMware Datastore entity with its attributes. Each Datastore belongs to a Datacenter and maybe attached to VMs.

.PARAMETER Moid
The unique identifier of this Managed Object instance.
.PARAMETER Owners
No description available.
.PARAMETER Tags
No description available.
.PARAMETER VersionContext
No description available.
.PARAMETER Parent
No description available.
.PARAMETER RegisteredDevice
No description available.
.PARAMETER Capacity
No description available.
.PARAMETER HostCount
Number of hosts attached to or supported-by this datastore.
.PARAMETER Identity
The internally generated identity of this datastore. This entity is not manipulated by users. It aids in uniquely identifying the datastore object. For VMware, this is a MOR (managed object reference).
.PARAMETER Name
Name of this datastore supplied by user. It is not the identity of the datastore. The name is subject to user manipulations.
.PARAMETER Type
A string indicating the type of the datastore (VMFS, NFS, etc).
.PARAMETER VmCount
Number of virtual machines relying on (using) this datastore.
.PARAMETER Accessible
Shows if this datastore is accessible.
.PARAMETER MaintenanceMode
Indicates if the datastore is in maintenance mode. Will be set to True, when in maintenance mode.
.PARAMETER MultipleHostAccess
Indicates if this datastore is connected to multiple hosts.
.PARAMETER Status
Datastore health status, as reported by the hypervisor platform.
.PARAMETER ThinProvisioningSupported
Indicates if this datastore supports thin provisioning for files.
.PARAMETER UnCommitted
Space uncommitted in this datastore in bytes.
.PARAMETER Url
The URL to access this datastore (example - 'ds:///vmfs/volumes/562a4e8a-0eeb5372-dd61-78baf9cb9afa/').
.PARAMETER Cluster
No description available.
.PARAMETER Datacenter
No description available.
.OUTPUTS

VirtualizationVmwareDatastore<PSCustomObject>
#>

function Initialize-IntersightVirtualizationVmwareDatastore {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Moid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Owners},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VersionContext},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RegisteredDevice},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Capacity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${HostCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Identity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Unknown", "VMFS", "NFS", "vSAN", "VirtualVolume")]
        [String]
        ${Type} = "Unknown",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VmCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Accessible},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MaintenanceMode},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MultipleHostAccess},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Unknown", "Degraded", "Critical", "Ok")]
        [String]
        ${Status} = "Unknown",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ThinProvisioningSupported},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UnCommitted},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cluster},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Datacenter}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightVirtualizationVmwareDatastore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        
        $PSO = [PSCustomObject]@{
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Parent" = ${Parent}
            "RegisteredDevice" = ${RegisteredDevice}
            "Capacity" = ${Capacity}
            "HostCount" = ${HostCount}
            "Identity" = ${Identity}
            "Name" = ${Name}
            "Type" = ${Type}
            "VmCount" = ${VmCount}
            "Accessible" = ${Accessible}
            "MaintenanceMode" = ${MaintenanceMode}
            "MultipleHostAccess" = ${MultipleHostAccess}
            "Status" = ${Status}
            "ThinProvisioningSupported" = ${ThinProvisioningSupported}
            "UnCommitted" = ${UnCommitted}
            "Url" = ${Url}
            "Cluster" = ${Cluster}
            "Datacenter" = ${Datacenter}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VirtualizationVmwareDatastore<PSCustomObject>

.DESCRIPTION

Convert from JSON to VirtualizationVmwareDatastore<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VirtualizationVmwareDatastore<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToVirtualizationVmwareDatastore {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightVirtualizationVmwareDatastore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightVirtualizationVmwareDatastore
        $AllProperties = ("AccountMoid", "ClassId", "CreateTime", "DomainGroupMoid", "ModTime", "Moid", "ObjectType", "Owners", "SharedScope", "Tags", "VersionContext", "Ancestors", "Parent", "PermissionResources", "DisplayNames", "RegisteredDevice", "Capacity", "HostCount", "Identity", "Name", "Type", "VmCount", "Accessible", "MaintenanceMode", "MultipleHostAccess", "Status", "ThinProvisioningSupported", "UnCommitted", "Url", "Cluster", "Datacenter", "Hosts")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AccountMoid"))) { #optional property not found
            $AccountMoid = $null
        } else {
            $AccountMoid = $JsonParameters.PSobject.Properties["AccountMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CreateTime"))) { #optional property not found
            $CreateTime = $null
        } else {
            $CreateTime = $JsonParameters.PSobject.Properties["CreateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DomainGroupMoid"))) { #optional property not found
            $DomainGroupMoid = $null
        } else {
            $DomainGroupMoid = $JsonParameters.PSobject.Properties["DomainGroupMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ModTime"))) { #optional property not found
            $ModTime = $null
        } else {
            $ModTime = $JsonParameters.PSobject.Properties["ModTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Moid"))) { #optional property not found
            $Moid = $null
        } else {
            $Moid = $JsonParameters.PSobject.Properties["Moid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Owners"))) { #optional property not found
            $Owners = $null
        } else {
            $Owners = $JsonParameters.PSobject.Properties["Owners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SharedScope"))) { #optional property not found
            $SharedScope = $null
        } else {
            $SharedScope = $JsonParameters.PSobject.Properties["SharedScope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["Tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VersionContext"))) { #optional property not found
            $VersionContext = $null
        } else {
            $VersionContext = $JsonParameters.PSobject.Properties["VersionContext"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ancestors"))) { #optional property not found
            $Ancestors = $null
        } else {
            $Ancestors = $JsonParameters.PSobject.Properties["Ancestors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["Parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PermissionResources"))) { #optional property not found
            $PermissionResources = $null
        } else {
            $PermissionResources = $JsonParameters.PSobject.Properties["PermissionResources"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DisplayNames"))) { #optional property not found
            $DisplayNames = $null
        } else {
            $DisplayNames = $JsonParameters.PSobject.Properties["DisplayNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RegisteredDevice"))) { #optional property not found
            $RegisteredDevice = $null
        } else {
            $RegisteredDevice = $JsonParameters.PSobject.Properties["RegisteredDevice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Capacity"))) { #optional property not found
            $Capacity = $null
        } else {
            $Capacity = $JsonParameters.PSobject.Properties["Capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HostCount"))) { #optional property not found
            $HostCount = $null
        } else {
            $HostCount = $JsonParameters.PSobject.Properties["HostCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Identity"))) { #optional property not found
            $Identity = $null
        } else {
            $Identity = $JsonParameters.PSobject.Properties["Identity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["Type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VmCount"))) { #optional property not found
            $VmCount = $null
        } else {
            $VmCount = $JsonParameters.PSobject.Properties["VmCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Accessible"))) { #optional property not found
            $Accessible = $null
        } else {
            $Accessible = $JsonParameters.PSobject.Properties["Accessible"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MaintenanceMode"))) { #optional property not found
            $MaintenanceMode = $null
        } else {
            $MaintenanceMode = $JsonParameters.PSobject.Properties["MaintenanceMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MultipleHostAccess"))) { #optional property not found
            $MultipleHostAccess = $null
        } else {
            $MultipleHostAccess = $JsonParameters.PSobject.Properties["MultipleHostAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["Status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ThinProvisioningSupported"))) { #optional property not found
            $ThinProvisioningSupported = $null
        } else {
            $ThinProvisioningSupported = $JsonParameters.PSobject.Properties["ThinProvisioningSupported"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UnCommitted"))) { #optional property not found
            $UnCommitted = $null
        } else {
            $UnCommitted = $JsonParameters.PSobject.Properties["UnCommitted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["Url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Cluster"))) { #optional property not found
            $Cluster = $null
        } else {
            $Cluster = $JsonParameters.PSobject.Properties["Cluster"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Datacenter"))) { #optional property not found
            $Datacenter = $null
        } else {
            $Datacenter = $JsonParameters.PSobject.Properties["Datacenter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Hosts"))) { #optional property not found
            $Hosts = $null
        } else {
            $Hosts = $JsonParameters.PSobject.Properties["Hosts"].value
        }

        $PSO = [PSCustomObject]@{
            "AccountMoid" = ${AccountMoid}
            "ClassId" = ${ClassId}
            "CreateTime" = ${CreateTime}
            "DomainGroupMoid" = ${DomainGroupMoid}
            "ModTime" = ${ModTime}
            "Moid" = ${Moid}
            "ObjectType" = ${ObjectType}
            "Owners" = ${Owners}
            "SharedScope" = ${SharedScope}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Ancestors" = ${Ancestors}
            "Parent" = ${Parent}
            "PermissionResources" = ${PermissionResources}
            "DisplayNames" = ${DisplayNames}
            "RegisteredDevice" = ${RegisteredDevice}
            "Capacity" = ${Capacity}
            "HostCount" = ${HostCount}
            "Identity" = ${Identity}
            "Name" = ${Name}
            "Type" = ${Type}
            "VmCount" = ${VmCount}
            "Accessible" = ${Accessible}
            "MaintenanceMode" = ${MaintenanceMode}
            "MultipleHostAccess" = ${MultipleHostAccess}
            "Status" = ${Status}
            "ThinProvisioningSupported" = ${ThinProvisioningSupported}
            "UnCommitted" = ${UnCommitted}
            "Url" = ${Url}
            "Cluster" = ${Cluster}
            "Datacenter" = ${Datacenter}
            "Hosts" = ${Hosts}
        }

        return $PSO
    }

}

