#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

This models a single SSH session from Intersight connected endpoint to a remote server. Multiple SSH operations can be run sequentially over a single SSH session.

.PARAMETER ObjectType
The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.
.PARAMETER Body
The optional request body that is sent as part of this API request. The request body can contain a golang template that can be populated with task input parameters and previous API output parameters.
.PARAMETER ContentType
Intersight Orchestrator, with the support of response parser specification, can extract the values from API responses and map them to task output parameters. The value extraction is supported for response content types XML and JSON. The type of the content that gets passed as payload and response in this API.
.PARAMETER Name
A reference name for this API request within the batch API request. This name shall be used to map the API output parameters to subsequent API input parameters within a batch API task.
.PARAMETER Outcomes
All the possible outcomes of this API are captured here. Outcomes property is a collection property of type workflow.Outcome objects. The outcomes can be mapped to the message to be shown. The outcomes are evaluated in the order they are given. At the end of the outcomes list, an catchall success/fail outcome can be added with condition as 'true'. This is an optional property and if not specified the task will be marked as success.
.PARAMETER ResponseSpec
No description available.
.PARAMETER SkipOnCondition
The skip expression, if provided, allows the batch API executor to skip the api execution when the given expression evaluates to true. The expression is given as such a golang template that has to be evaluated to a final content true/false. The expression is an optional and in case not provided, the API will always be executed.
.PARAMETER StartDelay
The delay in seconds after which the API needs to be executed. By default, the given API is executed immediately. Specifying a start delay adds to the delay to execution. Start Delay is not supported for the first API in the Batch and cumulative delay of all the APIs in the Batch should not exceed the task time out.
.PARAMETER Timeout
The duration in seconds by which the API response is expected from the API target. If the end point does not respond for the API request within this timeout duration, the task will be marked as failed.
.PARAMETER FileTransferToRemote
No description available.
.PARAMETER MessageType
The type of SSH message to send to the remote server.
.PARAMETER SshCommand
No description available.
.PARAMETER SshConfiguration
No description available.
.OUTPUTS

WorkflowSshSession<PSCustomObject>
#>

function Initialize-IntersightWorkflowSshSession {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ObjectType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("json", "xml", "text")]
        [String]
        ${ContentType} = "json",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Outcomes},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ResponseSpec},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SkipOnCondition},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${StartDelay},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Timeout},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FileTransferToRemote},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ExecuteCommand", "NewSession", "FileTransfer", "CloseSession")]
        [String]
        ${MessageType} = "ExecuteCommand",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SshCommand},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SshConfiguration}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightWorkflowSshSession' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ObjectType" = ${ObjectType}
            "Body" = ${Body}
            "ContentType" = ${ContentType}
            "Name" = ${Name}
            "Outcomes" = ${Outcomes}
            "ResponseSpec" = ${ResponseSpec}
            "SkipOnCondition" = ${SkipOnCondition}
            "StartDelay" = ${StartDelay}
            "Timeout" = ${Timeout}
            "FileTransferToRemote" = ${FileTransferToRemote}
            "MessageType" = ${MessageType}
            "SshCommand" = ${SshCommand}
            "SshConfiguration" = ${SshConfiguration}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowSshSession<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowSshSession<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowSshSession<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToWorkflowSshSession {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightWorkflowSshSession' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightWorkflowSshSession
        $AllProperties = ("ClassId", "ObjectType", "Body", "ContentType", "Name", "Outcomes", "ResponseSpec", "SkipOnCondition", "StartDelay", "Timeout", "FileTransferToRemote", "MessageType", "SshCommand", "SshConfiguration")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Body"))) { #optional property not found
            $Body = $null
        } else {
            $Body = $JsonParameters.PSobject.Properties["Body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ContentType"))) { #optional property not found
            $ContentType = $null
        } else {
            $ContentType = $JsonParameters.PSobject.Properties["ContentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Outcomes"))) { #optional property not found
            $Outcomes = $null
        } else {
            $Outcomes = $JsonParameters.PSobject.Properties["Outcomes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ResponseSpec"))) { #optional property not found
            $ResponseSpec = $null
        } else {
            $ResponseSpec = $JsonParameters.PSobject.Properties["ResponseSpec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SkipOnCondition"))) { #optional property not found
            $SkipOnCondition = $null
        } else {
            $SkipOnCondition = $JsonParameters.PSobject.Properties["SkipOnCondition"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "StartDelay"))) { #optional property not found
            $StartDelay = $null
        } else {
            $StartDelay = $JsonParameters.PSobject.Properties["StartDelay"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Timeout"))) { #optional property not found
            $Timeout = $null
        } else {
            $Timeout = $JsonParameters.PSobject.Properties["Timeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FileTransferToRemote"))) { #optional property not found
            $FileTransferToRemote = $null
        } else {
            $FileTransferToRemote = $JsonParameters.PSobject.Properties["FileTransferToRemote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MessageType"))) { #optional property not found
            $MessageType = $null
        } else {
            $MessageType = $JsonParameters.PSobject.Properties["MessageType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SshCommand"))) { #optional property not found
            $SshCommand = $null
        } else {
            $SshCommand = $JsonParameters.PSobject.Properties["SshCommand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SshConfiguration"))) { #optional property not found
            $SshConfiguration = $null
        } else {
            $SshConfiguration = $JsonParameters.PSobject.Properties["SshConfiguration"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Body" = ${Body}
            "ContentType" = ${ContentType}
            "Name" = ${Name}
            "Outcomes" = ${Outcomes}
            "ResponseSpec" = ${ResponseSpec}
            "SkipOnCondition" = ${SkipOnCondition}
            "StartDelay" = ${StartDelay}
            "Timeout" = ${Timeout}
            "FileTransferToRemote" = ${FileTransferToRemote}
            "MessageType" = ${MessageType}
            "SshCommand" = ${SshCommand}
            "SshConfiguration" = ${SshConfiguration}
        }

        return $PSO
    }

}

