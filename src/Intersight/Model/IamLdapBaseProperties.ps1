#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Base settings of LDAP required while configuring LDAP policy.

.PARAMETER ObjectType
The concrete type of this complex type. The ObjectType property must be set explicitly by API clients when the type is ambiguous. In all other cases, the  ObjectType is optional.  The type is ambiguous when a managed object contains an array of nested documents, and the documents in the array are heterogeneous, i.e. the array can contain nested documents of different types.
.PARAMETER Attribute
Role and locale information of the user.
.PARAMETER BaseDn
Base Distinguished Name (DN). Starting point from where server will search for users and groups.
.PARAMETER BindDn
Distinguished Name (DN) of the user, that is used to authenticate against LDAP servers.
.PARAMETER BindMethod
Authentication method to access LDAP servers.
.PARAMETER Domain
The IPv4 domain that all users must be in.
.PARAMETER EnableEncryption
If enabled, the endpoint encrypts all information it sends to the LDAP server.
.PARAMETER EnableGroupAuthorization
If enabled, user authorization is also done at the group level for LDAP users not in the local user database.
.PARAMETER VarFilter
Criteria to identify entries in search requests.
.PARAMETER GroupAttribute
Groups to which an LDAP entry belongs.
.PARAMETER NestedGroupSearchDepth
Search depth to look for a nested LDAP group in an LDAP group map.
.PARAMETER Password
Password of the user, that is used to authenticate.
.PARAMETER Timeout
LDAP authentication timeout duration, in seconds.
.OUTPUTS

IamLdapBaseProperties<PSCustomObject>
#>

function Initialize-IntersightIamLdapBaseProperties {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ObjectType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9][a-zA-Z0-9\\-\\.]*[a-zA-Z0-9\\-]$")]
        [String]
        ${Attribute},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BaseDn},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BindDn},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("LoginCredentials", "Anonymous", "ConfiguredCredentials")]
        [String]
        ${BindMethod} = "LoginCredentials",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(([a-zA-Z0-9])|([a-zA-Z0-9][a-zA-Z0-9\\.\\-]*[a-zA-Z0-9]))$")]
        [String]
        ${Domain},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableEncryption},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableGroupAuthorization},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9(][a-zA-Z0-9_#@$%&\\-\\^|()*=:!,.]*[a-zA-Z0-9\\-)]$")]
        [String]
        ${VarFilter},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9][a-zA-Z0-9_#@$%&\\-\\^]*[a-zA-Z0-9\\-]$")]
        [String]
        ${GroupAttribute},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NestedGroupSearchDepth},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[\\S+]{0,254}$")]
        [String]
        ${Password},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Timeout}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightIamLdapBaseProperties' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        if (!$BaseDn -and $BaseDn.length -gt 254) {
            throw "invalid value for 'BaseDn', the character length must be smaller than or equal to 254."
        }

        if (!$BindDn -and $BindDn.length -gt 254) {
            throw "invalid value for 'BindDn', the character length must be smaller than or equal to 254."
        }

        if (!$BindDn -and $BindDn.length -lt 0) {
            throw "invalid value for 'BindDn', the character length must be great than or equal to 0."
        }

        if (!$Domain -and $Domain.length -gt 255) {
            throw "invalid value for 'Domain', the character length must be smaller than or equal to 255."
        }

        if (!$NestedGroupSearchDepth -and $NestedGroupSearchDepth -gt 128) {
          throw "invalid value for 'NestedGroupSearchDepth', must be smaller than or equal to 128."
        }

        if (!$NestedGroupSearchDepth -and $NestedGroupSearchDepth -lt 1) {
          throw "invalid value for 'NestedGroupSearchDepth', must be greater than or equal to 1."
        }

        if (!$Timeout -and $Timeout -gt 180) {
          throw "invalid value for 'Timeout', must be smaller than or equal to 180."
        }

        if (!$Timeout -and $Timeout -lt 0) {
          throw "invalid value for 'Timeout', must be greater than or equal to 0."
        }

        
        $PSO = [PSCustomObject]@{
            "ObjectType" = ${ObjectType}
            "Attribute" = ${Attribute}
            "BaseDn" = ${BaseDn}
            "BindDn" = ${BindDn}
            "BindMethod" = ${BindMethod}
            "Domain" = ${Domain}
            "EnableEncryption" = ${EnableEncryption}
            "EnableGroupAuthorization" = ${EnableGroupAuthorization}
            "Filter" = ${VarFilter}
            "GroupAttribute" = ${GroupAttribute}
            "NestedGroupSearchDepth" = ${NestedGroupSearchDepth}
            "Password" = ${Password}
            "Timeout" = ${Timeout}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IamLdapBaseProperties<PSCustomObject>

.DESCRIPTION

Convert from JSON to IamLdapBaseProperties<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IamLdapBaseProperties<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToIamLdapBaseProperties {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightIamLdapBaseProperties' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightIamLdapBaseProperties
        $AllProperties = ("ClassId", "ObjectType", "Attribute", "BaseDn", "BindDn", "BindMethod", "Domain", "EnableEncryption", "EnableGroupAuthorization", "Filter", "GroupAttribute", "IsPasswordSet", "NestedGroupSearchDepth", "Password", "Timeout")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Attribute"))) { #optional property not found
            $Attribute = $null
        } else {
            $Attribute = $JsonParameters.PSobject.Properties["Attribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BaseDn"))) { #optional property not found
            $BaseDn = $null
        } else {
            $BaseDn = $JsonParameters.PSobject.Properties["BaseDn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BindDn"))) { #optional property not found
            $BindDn = $null
        } else {
            $BindDn = $JsonParameters.PSobject.Properties["BindDn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BindMethod"))) { #optional property not found
            $BindMethod = $null
        } else {
            $BindMethod = $JsonParameters.PSobject.Properties["BindMethod"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["Domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EnableEncryption"))) { #optional property not found
            $EnableEncryption = $null
        } else {
            $EnableEncryption = $JsonParameters.PSobject.Properties["EnableEncryption"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "EnableGroupAuthorization"))) { #optional property not found
            $EnableGroupAuthorization = $null
        } else {
            $EnableGroupAuthorization = $JsonParameters.PSobject.Properties["EnableGroupAuthorization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Filter"))) { #optional property not found
            $VarFilter = $null
        } else {
            $VarFilter = $JsonParameters.PSobject.Properties["Filter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "GroupAttribute"))) { #optional property not found
            $GroupAttribute = $null
        } else {
            $GroupAttribute = $JsonParameters.PSobject.Properties["GroupAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IsPasswordSet"))) { #optional property not found
            $IsPasswordSet = $null
        } else {
            $IsPasswordSet = $JsonParameters.PSobject.Properties["IsPasswordSet"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NestedGroupSearchDepth"))) { #optional property not found
            $NestedGroupSearchDepth = $null
        } else {
            $NestedGroupSearchDepth = $JsonParameters.PSobject.Properties["NestedGroupSearchDepth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["Password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Timeout"))) { #optional property not found
            $Timeout = $null
        } else {
            $Timeout = $JsonParameters.PSobject.Properties["Timeout"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Attribute" = ${Attribute}
            "BaseDn" = ${BaseDn}
            "BindDn" = ${BindDn}
            "BindMethod" = ${BindMethod}
            "Domain" = ${Domain}
            "EnableEncryption" = ${EnableEncryption}
            "EnableGroupAuthorization" = ${EnableGroupAuthorization}
            "Filter" = ${VarFilter}
            "GroupAttribute" = ${GroupAttribute}
            "IsPasswordSet" = ${IsPasswordSet}
            "NestedGroupSearchDepth" = ${NestedGroupSearchDepth}
            "Password" = ${Password}
            "Timeout" = ${Timeout}
        }

        return $PSO
    }

}

