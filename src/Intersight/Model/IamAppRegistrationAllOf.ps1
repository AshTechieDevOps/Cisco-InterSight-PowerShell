#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-12-08T20:53:20Z.
# Version: 1.0.9-2908
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'iam.AppRegistration', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER ClientName
App Registration name specified by user.
.PARAMETER ClientSecret
The OAuth2 client secret. The value of this property is generated when grantType includes 'client-credentials'. Otherwise, no client-secret is generated.
.PARAMETER ClientType
The type of the OAuth2 client (public or confidential), as specified in https://tools.ietf.org/html/rfc6749#section-2.1. * `public` - Clients incapable of maintaining the confidentiality of their credentials.This includes clients executing on the device used by the resource owner,such as mobile applications, installed native application or a webbrowser-based application. * `confidential` - Clients capable of maintaining the confidentiality of their credentials.For example, this could be a client implemented on a secure server withrestricted access to the client credentials.To maintain the confidentiality of the OAuth2 credentials, two use cases areconsidered.1) The application is running as a service within Intersight. The application automatically   obtains the OAuth2 credentials when the application starts and the credentials are not   exposed to the end-user.   Because end-users (even account administrators) do not have access the OAuth2 credentials,   they cannot take the credentials with them when they leave their organization.2) The application is under the control of a ""trusted"" end-user. For example,   the end-user may create a native application running outside Intersight. The application   uses OAuth2 credentials to interact with the Intersight API. In that case, the Intersight   account administrator may generate OAuth2 credentials with a registered application   using ""client_credentials"" grant type.   In that case, the end-user is responsible for maintaining the confidentiality of the   OAuth2 credentials. If the end-user leaves the organization, you should revoke the   credentials and issue new Oauth2 credentials.Here is a possible workflow for handling OAuth2 tokens.1) User Alice (Intersight Account Administrator) logins to Intersight and deploys an Intersight   application that requires an OAuth2 token.2) Intersight automatically deploys the application. The application is assigned a OAuth2 token,   possibly linked to Alice. The application must NOT expose the OAuth2 secret to Alice, otherwise   Alice would be able to use the token after she leaves the company.3) The application can make API calls to Intersight using its assigned OAuth2 token. For example,   the application could make weekly scheduled API calls to Intersight.4) Separately, Alice may also get OAuth2 tokens that she can use to make API calls from the   Intersight SDK through the northbound API. In that case, Alice will get the associated OAuth2   secrets, but not the one assigned in step #2.5) Alice leaves the organization. The OAuth2 tokens assigned in step #2 must retain their validity   even after Alice has left the organization. Because the OAuth2 secrets were never shared with   Alice, there is no risk Alice can reuse the OAuth2 secrets.   On the other hand, the OAuth2 tokens assigned in step #4 must be invalidated because Alice had   the OAuth2 tokens in her possession.
.PARAMETER Description
Description of the application.
.PARAMETER GrantTypes
No description available.
.PARAMETER RedirectUris
No description available.
.PARAMETER RenewClientSecret
Set value to true to renew the client-secret. Applicable to client_credentials grant type.
.PARAMETER ResponseTypes
No description available.
.PARAMETER Revoke
Used to trigger update the revocationTimestamp value. If UI sent updating request with the Revoke value is true, then update RevocationTimestamp.
.PARAMETER Account
No description available.
.PARAMETER Permission
No description available.
.PARAMETER Roles
An array of relationships to iamRole resources.
.PARAMETER User
No description available.
.OUTPUTS

IamAppRegistrationAllOf<PSCustomObject>
#>

function Initialize-IntersightIamAppRegistrationAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("iam.AppRegistration")]
        [String]
        ${ClassId} = "iam.AppRegistration",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("iam.AppRegistration")]
        [String]
        ${ObjectType} = "iam.AppRegistration",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientSecret},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("public", "confidential")]
        [String]
        ${ClientType} = "public",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("authorization_code", "refresh_token", "client_credentials", "implicit", "password", "urn:ietf:params:oauth:grant-type:jwt-bearer", "urn:ietf:params:oauth:grant-type:saml2-bearer")]
        [String[]]
        ${GrantTypes},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RedirectUris},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RenewClientSecret} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("code", "token")]
        [String[]]
        ${ResponseTypes},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Revoke} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Account},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Permission},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Roles},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${User}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightIamAppRegistrationAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "ClientName" = ${ClientName}
            "ClientSecret" = ${ClientSecret}
            "ClientType" = ${ClientType}
            "Description" = ${Description}
            "GrantTypes" = ${GrantTypes}
            "RedirectUris" = ${RedirectUris}
            "RenewClientSecret" = ${RenewClientSecret}
            "ResponseTypes" = ${ResponseTypes}
            "Revoke" = ${Revoke}
            "Account" = ${Account}
            "Permission" = ${Permission}
            "Roles" = ${Roles}
            "User" = ${User}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IamAppRegistrationAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to IamAppRegistrationAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IamAppRegistrationAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToIamAppRegistrationAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightIamAppRegistrationAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightIamAppRegistrationAllOf
        $AllProperties = ("ClassId", "ObjectType", "ClientId", "ClientName", "ClientSecret", "ClientType", "Description", "GrantTypes", "RedirectUris", "RenewClientSecret", "ResponseTypes", "RevocationTimestamp", "Revoke", "Account", "OauthTokens", "Permission", "Roles", "User")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClientId"))) { #optional property not found
            $ClientId = $null
        } else {
            $ClientId = $JsonParameters.PSobject.Properties["ClientId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClientName"))) { #optional property not found
            $ClientName = $null
        } else {
            $ClientName = $JsonParameters.PSobject.Properties["ClientName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClientSecret"))) { #optional property not found
            $ClientSecret = $null
        } else {
            $ClientSecret = $JsonParameters.PSobject.Properties["ClientSecret"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClientType"))) { #optional property not found
            $ClientType = $null
        } else {
            $ClientType = $JsonParameters.PSobject.Properties["ClientType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["Description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "GrantTypes"))) { #optional property not found
            $GrantTypes = $null
        } else {
            $GrantTypes = $JsonParameters.PSobject.Properties["GrantTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RedirectUris"))) { #optional property not found
            $RedirectUris = $null
        } else {
            $RedirectUris = $JsonParameters.PSobject.Properties["RedirectUris"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RenewClientSecret"))) { #optional property not found
            $RenewClientSecret = $null
        } else {
            $RenewClientSecret = $JsonParameters.PSobject.Properties["RenewClientSecret"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ResponseTypes"))) { #optional property not found
            $ResponseTypes = $null
        } else {
            $ResponseTypes = $JsonParameters.PSobject.Properties["ResponseTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RevocationTimestamp"))) { #optional property not found
            $RevocationTimestamp = $null
        } else {
            $RevocationTimestamp = $JsonParameters.PSobject.Properties["RevocationTimestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Revoke"))) { #optional property not found
            $Revoke = $null
        } else {
            $Revoke = $JsonParameters.PSobject.Properties["Revoke"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["Account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OauthTokens"))) { #optional property not found
            $OauthTokens = $null
        } else {
            $OauthTokens = $JsonParameters.PSobject.Properties["OauthTokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Permission"))) { #optional property not found
            $Permission = $null
        } else {
            $Permission = $JsonParameters.PSobject.Properties["Permission"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Roles"))) { #optional property not found
            $Roles = $null
        } else {
            $Roles = $JsonParameters.PSobject.Properties["Roles"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "User"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["User"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "ClientId" = ${ClientId}
            "ClientName" = ${ClientName}
            "ClientSecret" = ${ClientSecret}
            "ClientType" = ${ClientType}
            "Description" = ${Description}
            "GrantTypes" = ${GrantTypes}
            "RedirectUris" = ${RedirectUris}
            "RenewClientSecret" = ${RenewClientSecret}
            "ResponseTypes" = ${ResponseTypes}
            "RevocationTimestamp" = ${RevocationTimestamp}
            "Revoke" = ${Revoke}
            "Account" = ${Account}
            "OauthTokens" = ${OauthTokens}
            "Permission" = ${Permission}
            "Roles" = ${Roles}
            "User" = ${User}
        }

        return $PSO
    }

}

