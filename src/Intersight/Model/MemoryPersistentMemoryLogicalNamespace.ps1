#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-12-08T20:53:20Z.
# Version: 1.0.9-2908
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Persistent Memory Namespace specification that needs to be applied to the associated servers through this policy. This would result in the creation, modification, or deletion of a Namespace on the servers.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER Capacity
Capacity of this Namespace that is created or modified.
.PARAMETER Mode
Mode of this Namespace that is created or modified. * `raw` - The raw mode of Persistent Memory Namespace. * `block` - The block mode of Persistent Memory Namespace.
.PARAMETER Name
Name of this Namespace to be created on the server.
.PARAMETER SocketId
Socket ID of the region on which this Namespace has to be created or modified. * `1` - The first CPU socket in a server. * `2` - The second CPU socket in a server. * `3` - The third CPU socket in a server. * `4` - The fourth CPU socket in a server.
.PARAMETER SocketMemoryId
Socket Memory ID of the region on which this Namespace has to be created or modified. * `Not Applicable` - The socket memory ID is not applicable if app-direct persistent memory type is selected in the goal. * `2` - The second socket memory ID within a socket in a server. * `4` - The fourth socket memory ID within a socket in a server. * `6` - The sixth socket memory ID within a socket in a server. * `8` - The eighth socket memory ID within a socket in a server. * `10` - The tenth socket memory ID within a socket in a server. * `12` - The twelfth socket memory ID within a socket in a server.
.OUTPUTS

MemoryPersistentMemoryLogicalNamespace<PSCustomObject>
#>

function Initialize-IntersightMemoryPersistentMemoryLogicalNamespace {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("memory.PersistentMemoryLogicalNamespace")]
        [String]
        ${ClassId} = "memory.PersistentMemoryLogicalNamespace",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("memory.PersistentMemoryLogicalNamespace")]
        [String]
        ${ObjectType} = "memory.PersistentMemoryLogicalNamespace",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Capacity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("raw", "block")]
        [String]
        ${Mode} = "raw",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9#_-][a-zA-Z0-9#_ -]*$")]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("1", "2", "3", "4")]
        [System.Nullable[Int32]]
        ${SocketId} = 1,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Not Applicable", "2", "4", "6", "8", "10", "12")]
        [String]
        ${SocketMemoryId} = "Not Applicable"
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightMemoryPersistentMemoryLogicalNamespace' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        if ($Capacity -and $Capacity -gt 9223372036854775807) {
          throw "invalid value for 'Capacity', must be smaller than or equal to 9223372036854775807."
        }

        if ($Capacity -and $Capacity -lt 1) {
          throw "invalid value for 'Capacity', must be greater than or equal to 1."
        }

        if (!$Name -and $Name.length -gt 63) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 63."
        }

        if (!$Name -and $Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Capacity" = ${Capacity}
            "Mode" = ${Mode}
            "Name" = ${Name}
            "SocketId" = ${SocketId}
            "SocketMemoryId" = ${SocketMemoryId}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MemoryPersistentMemoryLogicalNamespace<PSCustomObject>

.DESCRIPTION

Convert from JSON to MemoryPersistentMemoryLogicalNamespace<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MemoryPersistentMemoryLogicalNamespace<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToMemoryPersistentMemoryLogicalNamespace {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightMemoryPersistentMemoryLogicalNamespace' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightMemoryPersistentMemoryLogicalNamespace
        $AllProperties = ("ClassId", "ObjectType", "Capacity", "Mode", "Name", "SocketId", "SocketMemoryId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Capacity"))) { #optional property not found
            $Capacity = $null
        } else {
            $Capacity = $JsonParameters.PSobject.Properties["Capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["Mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SocketId"))) { #optional property not found
            $SocketId = $null
        } else {
            $SocketId = $JsonParameters.PSobject.Properties["SocketId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SocketMemoryId"))) { #optional property not found
            $SocketMemoryId = $null
        } else {
            $SocketMemoryId = $JsonParameters.PSobject.Properties["SocketMemoryId"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Capacity" = ${Capacity}
            "Mode" = ${Mode}
            "Name" = ${Name}
            "SocketId" = ${SocketId}
            "SocketMemoryId" = ${SocketMemoryId}
        }

        return $PSO
    }

}

