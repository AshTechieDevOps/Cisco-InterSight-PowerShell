#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-12-08T20:53:20Z.
# Version: 1.0.9-2908
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'connector.Url', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER ForceQuery
Flag to append a query to the url even if rawQuery is empty.
.PARAMETER Fragment
The fragment identifier component of a URI allows indirect identification of a secondary resource by reference to a primary resource and additional identifying information. The identified secondary resource may be some portion or subset of the primary resource, some view on representations of the primary resource, or some other resource defined or described by those representations. A fragment identifier component is indicated by the presence of a number sign (""#"") character and terminated by the end of the URI.
.PARAMETER VarHost
The host name identifies the host that holds the resource. The host can be an IP or a hostname that is resolvable by the dns server configured on the platform.
.PARAMETER Opaque
A URI is opaque if, and only if, it is absolute and its scheme-specific part does not begin with a slash character ('/'). An opaque URI has a scheme, a scheme-specific part, and possibly a fragment; all other components are undefined.
.PARAMETER Path
The path identifies the specific resource in the host that the web client wants to access. Value is the decoded form of the path. e.g. '/foo/bar'.
.PARAMETER RawPath
The URI encoded form of the path property. e.g. '%2Fapi%2Fv1%2F'.
.PARAMETER RawQuery
The query component, as defined in RFC 3986, contains non-hierarchical data that, along with data in the path component, serves to identify a resource within the scope of the URI's scheme and naming authority (if any). The query component is indicated by the first question mark character and terminated by a number sign character or by the end of the URI. The rawQuery contains the URIs encoded query component, excluding the ? character.
.PARAMETER Scheme
The scheme identifies the protocol to be used to access the resource on the Internet. It can be HTTP (without SSL) or HTTPS (with SSL).
.OUTPUTS

ConnectorUrlAllOf<PSCustomObject>
#>

function Initialize-IntersightConnectorUrlAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("connector.Url")]
        [String]
        ${ClassId} = "connector.Url",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("connector.Url")]
        [String]
        ${ObjectType} = "connector.Url",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ForceQuery},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Fragment},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarHost},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Opaque},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Path},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RawPath},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RawQuery},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Scheme}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightConnectorUrlAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "ForceQuery" = ${ForceQuery}
            "Fragment" = ${Fragment}
            "Host" = ${VarHost}
            "Opaque" = ${Opaque}
            "Path" = ${Path}
            "RawPath" = ${RawPath}
            "RawQuery" = ${RawQuery}
            "Scheme" = ${Scheme}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConnectorUrlAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConnectorUrlAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConnectorUrlAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToConnectorUrlAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightConnectorUrlAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightConnectorUrlAllOf
        $AllProperties = ("ClassId", "ObjectType", "ForceQuery", "Fragment", "Host", "Opaque", "Path", "RawPath", "RawQuery", "Scheme")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ForceQuery"))) { #optional property not found
            $ForceQuery = $null
        } else {
            $ForceQuery = $JsonParameters.PSobject.Properties["ForceQuery"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Fragment"))) { #optional property not found
            $Fragment = $null
        } else {
            $Fragment = $JsonParameters.PSobject.Properties["Fragment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Host"))) { #optional property not found
            $VarHost = $null
        } else {
            $VarHost = $JsonParameters.PSobject.Properties["Host"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Opaque"))) { #optional property not found
            $Opaque = $null
        } else {
            $Opaque = $JsonParameters.PSobject.Properties["Opaque"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Path"))) { #optional property not found
            $Path = $null
        } else {
            $Path = $JsonParameters.PSobject.Properties["Path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RawPath"))) { #optional property not found
            $RawPath = $null
        } else {
            $RawPath = $JsonParameters.PSobject.Properties["RawPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RawQuery"))) { #optional property not found
            $RawQuery = $null
        } else {
            $RawQuery = $JsonParameters.PSobject.Properties["RawQuery"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Scheme"))) { #optional property not found
            $Scheme = $null
        } else {
            $Scheme = $JsonParameters.PSobject.Properties["Scheme"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "ForceQuery" = ${ForceQuery}
            "Fragment" = ${Fragment}
            "Host" = ${VarHost}
            "Opaque" = ${Opaque}
            "Path" = ${Path}
            "RawPath" = ${RawPath}
            "RawQuery" = ${RawQuery}
            "Scheme" = ${Scheme}
        }

        return $PSO
    }

}

