#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-12-08T20:53:20Z.
# Version: 1.0.9-2908
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Type to represent the Best Effort QoS class.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER AdminState
Administrative state for this QoS class. * `Disabled` - Admin configured Disabled State. * `Enabled` - Admin configured Enabled State.
.PARAMETER BandwidthPercent
Percentage of bandwidth received by the traffic tagged with this QoS.
.PARAMETER Cos
Class of service received by the traffic tagged with this QoS.
.PARAMETER Mtu
Maximum transmission unit (MTU) is the largest size packet or frame, that can be sent in a packet- or frame-based network such as the Internet. User can select from the following: 1. Any value between 1500 and 9216 2. 'Normal' (default) mapping to a value of 1500. 3. 'FC' mapping to a value of 2240.
.PARAMETER MulticastOptimize
If enabled, this QoS class will be optimized to send multiple packets.
.PARAMETER Name
The 'name' of this QoS Class. * `Best Effort` - QoS Priority for Best-effort traffic. * `FC` - QoS Priority for FC traffic. * `Platinum` - QoS Priority for Platinum traffic. * `Gold` - QoS Priority for Gold traffic. * `Silver` - QoS Priority for Silver traffic. * `Bronze` - QoS Priority for Bronze traffic.
.PARAMETER PacketDrop
If enabled, this QoS class will allow packet drops within an acceptable limit.
.PARAMETER Weight
The weight of the QoS Class controls the distribution of bandwidth between QoS Classes, with the same priority after the Guarantees for the QoS Classes are reached.
.OUTPUTS

FabricQosClass<PSCustomObject>
#>

function Initialize-IntersightFabricQosClass {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("fabric.QosClass")]
        [String]
        ${ClassId} = "fabric.QosClass",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("fabric.QosClass")]
        [String]
        ${ObjectType} = "fabric.QosClass",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Disabled", "Enabled")]
        [String]
        ${AdminState} = "Disabled",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BandwidthPercent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Cos},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Mtu} = 1500,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MulticastOptimize} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Best Effort", "FC", "Platinum", "Gold", "Silver", "Bronze")]
        [String]
        ${Name} = "Best Effort",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PacketDrop} = $true,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Weight}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightFabricQosClass' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        if ($BandwidthPercent -and $BandwidthPercent -gt 100) {
          throw "invalid value for 'BandwidthPercent', must be smaller than or equal to 100."
        }

        if ($BandwidthPercent -and $BandwidthPercent -lt 0) {
          throw "invalid value for 'BandwidthPercent', must be greater than or equal to 0."
        }

        if ($Cos -and $Cos -gt 255) {
          throw "invalid value for 'Cos', must be smaller than or equal to 255."
        }

        if ($Cos -and $Cos -lt 0) {
          throw "invalid value for 'Cos', must be greater than or equal to 0."
        }

        if ($Mtu -and $Mtu -gt 9216) {
          throw "invalid value for 'Mtu', must be smaller than or equal to 9216."
        }

        if ($Mtu -and $Mtu -lt 1500) {
          throw "invalid value for 'Mtu', must be greater than or equal to 1500."
        }

        if ($Weight -and $Weight -gt 10) {
          throw "invalid value for 'Weight', must be smaller than or equal to 10."
        }

        if ($Weight -and $Weight -lt 0) {
          throw "invalid value for 'Weight', must be greater than or equal to 0."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AdminState" = ${AdminState}
            "BandwidthPercent" = ${BandwidthPercent}
            "Cos" = ${Cos}
            "Mtu" = ${Mtu}
            "MulticastOptimize" = ${MulticastOptimize}
            "Name" = ${Name}
            "PacketDrop" = ${PacketDrop}
            "Weight" = ${Weight}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FabricQosClass<PSCustomObject>

.DESCRIPTION

Convert from JSON to FabricQosClass<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FabricQosClass<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToFabricQosClass {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightFabricQosClass' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightFabricQosClass
        $AllProperties = ("ClassId", "ObjectType", "AdminState", "BandwidthPercent", "Cos", "Mtu", "MulticastOptimize", "Name", "PacketDrop", "Weight")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AdminState"))) { #optional property not found
            $AdminState = $null
        } else {
            $AdminState = $JsonParameters.PSobject.Properties["AdminState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "BandwidthPercent"))) { #optional property not found
            $BandwidthPercent = $null
        } else {
            $BandwidthPercent = $JsonParameters.PSobject.Properties["BandwidthPercent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Cos"))) { #optional property not found
            $Cos = $null
        } else {
            $Cos = $JsonParameters.PSobject.Properties["Cos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["Mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MulticastOptimize"))) { #optional property not found
            $MulticastOptimize = $null
        } else {
            $MulticastOptimize = $JsonParameters.PSobject.Properties["MulticastOptimize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PacketDrop"))) { #optional property not found
            $PacketDrop = $null
        } else {
            $PacketDrop = $JsonParameters.PSobject.Properties["PacketDrop"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["Weight"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AdminState" = ${AdminState}
            "BandwidthPercent" = ${BandwidthPercent}
            "Cos" = ${Cos}
            "Mtu" = ${Mtu}
            "MulticastOptimize" = ${MulticastOptimize}
            "Name" = ${Name}
            "PacketDrop" = ${PacketDrop}
            "Weight" = ${Weight}
        }

        return $PSO
    }

}

