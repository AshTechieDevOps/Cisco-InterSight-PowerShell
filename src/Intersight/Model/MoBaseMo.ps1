#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-12-08T20:53:20Z.
# Version: 1.0.9-2908
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The base abstract class for all Cisco Intersight managed objects.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
.PARAMETER Moid
The unique identifier of this Managed Object instance.
.PARAMETER Owners
No description available.
.PARAMETER Tags
No description available.
.PARAMETER VersionContext
No description available.
.PARAMETER Parent
No description available.
.OUTPUTS

MoBaseMo<PSCustomObject>
#>

function Initialize-IntersightMoBaseMo {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("aaa.AuditRecord", "access.Policy", "adapter.ConfigPolicy", "adapter.ExtEthInterface", "adapter.HostEthInterface", "adapter.HostFcInterface", "adapter.HostIscsiInterface", "adapter.Unit", "appliance.AppStatus", "appliance.Backup", "appliance.BackupPolicy", "appliance.CertificateSetting", "appliance.DataExportPolicy", "appliance.DeviceCertificate", "appliance.DeviceClaim", "appliance.DiagSetting", "appliance.ExternalSyslogSetting", "appliance.FileSystemStatus", "appliance.GroupStatus", "appliance.ImageBundle", "appliance.NodeInfo", "appliance.NodeStatus", "appliance.ReleaseNote", "appliance.Restore", "appliance.SetupInfo", "appliance.SystemInfo", "appliance.SystemStatus", "appliance.Upgrade", "appliance.UpgradePolicy", "asset.ClusterMember", "asset.DeviceClaim", "asset.DeviceConfiguration", "asset.DeviceConnectorManager", "asset.DeviceContractInformation", "asset.DeviceRegistration", "asset.SubscriptionDeviceContractInformation", "asset.Target", "bios.BootDevice", "bios.BootMode", "bios.Policy", "bios.SystemBootOrder", "bios.Unit", "boot.CddDevice", "boot.DeviceBootMode", "boot.HddDevice", "boot.IscsiDevice", "boot.NvmeDevice", "boot.PchStorageDevice", "boot.PrecisionPolicy", "boot.PxeDevice", "boot.SanDevice", "boot.SdDevice", "boot.UefiShellDevice", "boot.UsbDevice", "boot.VmediaDevice", "capability.AdapterUnitDescriptor", "capability.Catalog", "capability.ChassisDescriptor", "capability.ChassisManufacturingDef", "capability.CimcFirmwareDescriptor", "capability.EquipmentPhysicalDef", "capability.EquipmentSlotArray", "capability.FanModuleDescriptor", "capability.FanModuleManufacturingDef", "capability.IoCardCapabilityDef", "capability.IoCardDescriptor", "capability.IoCardManufacturingDef", "capability.PortGroupAggregationDef", "capability.PsuDescriptor", "capability.PsuManufacturingDef", "capability.SiocModuleCapabilityDef", "capability.SiocModuleDescriptor", "capability.SiocModuleManufacturingDef", "capability.SwitchCapability", "capability.SwitchDescriptor", "capability.SwitchManufacturingDef", "comm.HttpProxyPolicy", "compute.Blade", "compute.BladeIdentity", "compute.Board", "compute.PhysicalSummary", "compute.RackUnit", "compute.RackUnitIdentity", "compute.ServerSetting", "cond.Alarm", "cond.AlarmAggregation", "cond.HclStatus", "cond.HclStatusDetail", "cond.HclStatusJob", "config.ExportedItem", "config.Exporter", "config.ImportedItem", "config.Importer", "connectorpack.ConnectorPackUpgrade", "connectorpack.UpgradeImpact", "deviceconnector.Policy", "equipment.Chassis", "equipment.ChassisIdentity", "equipment.ChassisOperation", "equipment.DeviceSummary", "equipment.Fan", "equipment.FanModule", "equipment.Fex", "equipment.FexIdentity", "equipment.FexOperation", "equipment.IdentitySummary", "equipment.IoCard", "equipment.IoCardOperation", "equipment.IoExpander", "equipment.LocatorLed", "equipment.Psu", "equipment.PsuControl", "equipment.RackEnclosure", "equipment.RackEnclosureSlot", "equipment.SharedIoModule", "equipment.SwitchCard", "equipment.SystemIoController", "equipment.Tpm", "equipment.Transceiver", "ether.HostPort", "ether.NetworkPort", "ether.PhysicalPort", "ether.PortChannel", "externalsite.Authorization", "fabric.ConfigChangeDetail", "fabric.ConfigResult", "fabric.ConfigResultEntry", "fabric.EstimateImpact", "fabric.EthNetworkControlPolicy", "fabric.EthNetworkGroupPolicy", "fabric.EthNetworkPolicy", "fabric.FcNetworkPolicy", "fabric.FcUplinkPcRole", "fabric.FcUplinkRole", "fabric.FcoeUplinkPcRole", "fabric.FcoeUplinkRole", "fabric.MulticastPolicy", "fabric.PcMember", "fabric.PcOperation", "fabric.PortMode", "fabric.PortOperation", "fabric.PortPolicy", "fabric.ServerRole", "fabric.SwitchClusterProfile", "fabric.SwitchControlPolicy", "fabric.SwitchProfile", "fabric.SystemQosPolicy", "fabric.UplinkPcRole", "fabric.UplinkRole", "fabric.Vlan", "fabric.Vsan", "fault.Instance", "fc.PhysicalPort", "fc.PortChannel", "fcpool.FcBlock", "fcpool.Lease", "fcpool.Pool", "fcpool.PoolMember", "fcpool.Universe", "feedback.FeedbackPost", "firmware.BiosDescriptor", "firmware.BoardControllerDescriptor", "firmware.ChassisUpgrade", "firmware.CimcDescriptor", "firmware.DimmDescriptor", "firmware.Distributable", "firmware.DistributableMeta", "firmware.DriveDescriptor", "firmware.DriverDistributable", "firmware.Eula", "firmware.FirmwareSummary", "firmware.GpuDescriptor", "firmware.HbaDescriptor", "firmware.IomDescriptor", "firmware.MswitchDescriptor", "firmware.NxosDescriptor", "firmware.PcieDescriptor", "firmware.PsuDescriptor", "firmware.RunningFirmware", "firmware.SasExpanderDescriptor", "firmware.ServerConfigurationUtilityDistributable", "firmware.StorageControllerDescriptor", "firmware.SwitchUpgrade", "firmware.Upgrade", "firmware.UpgradeImpact", "firmware.UpgradeImpactStatus", "firmware.UpgradeStatus", "forecast.Catalog", "forecast.Definition", "forecast.Instance", "graphics.Card", "graphics.Controller", "hcl.CompatibilityStatus", "hcl.DriverImage", "hcl.ExemptedCatalog", "hcl.HyperflexSoftwareCompatibilityInfo", "hcl.OperatingSystem", "hcl.OperatingSystemVendor", "hcl.SupportedDriverName", "hyperflex.Alarm", "hyperflex.AppCatalog", "hyperflex.AutoSupportPolicy", "hyperflex.CapabilityInfo", "hyperflex.CiscoHypervisorManager", "hyperflex.Cluster", "hyperflex.ClusterHealthCheckExecutionSnapshot", "hyperflex.ClusterNetworkPolicy", "hyperflex.ClusterProfile", "hyperflex.ClusterStoragePolicy", "hyperflex.ConfigResult", "hyperflex.ConfigResultEntry", "hyperflex.DevicePackageDownloadState", "hyperflex.ExtFcStoragePolicy", "hyperflex.ExtIscsiStoragePolicy", "hyperflex.FeatureLimitExternal", "hyperflex.FeatureLimitInternal", "hyperflex.Health", "hyperflex.HealthCheckDefinition", "hyperflex.HealthCheckExecution", "hyperflex.HealthCheckExecutionSnapshot", "hyperflex.HealthCheckPackageChecksum", "hyperflex.HxapCluster", "hyperflex.HxapDatacenter", "hyperflex.HxapEvent", "hyperflex.HxapHost", "hyperflex.HxapVirtualDisk", "hyperflex.HxapVirtualMachine", "hyperflex.HxdpVersion", "hyperflex.LocalCredentialPolicy", "hyperflex.Node", "hyperflex.NodeConfigPolicy", "hyperflex.NodeProfile", "hyperflex.ProxySettingPolicy", "hyperflex.ServerFirmwareVersion", "hyperflex.ServerFirmwareVersionEntry", "hyperflex.ServerModel", "hyperflex.SoftwareVersionPolicy", "hyperflex.SysConfigPolicy", "hyperflex.UcsmConfigPolicy", "hyperflex.VcenterConfigPolicy", "iaas.ConnectorPack", "iaas.DeviceStatus", "iaas.DiagnosticMessages", "iaas.LicenseInfo", "iaas.MostRunTasks", "iaas.ServiceRequest", "iaas.UcsdInfo", "iaas.UcsdManagedInfra", "iaas.UcsdMessages", "iam.Account", "iam.AccountExperience", "iam.ApiKey", "iam.AppRegistration", "iam.Certificate", "iam.CertificateRequest", "iam.DomainGroup", "iam.EndPointPrivilege", "iam.EndPointRole", "iam.EndPointUser", "iam.EndPointUserPolicy", "iam.EndPointUserRole", "iam.Idp", "iam.IdpReference", "iam.IpAccessManagement", "iam.IpAddress", "iam.LdapGroup", "iam.LdapPolicy", "iam.LdapProvider", "iam.LocalUserPassword", "iam.OAuthToken", "iam.Permission", "iam.PrivateKeySpec", "iam.Privilege", "iam.PrivilegeSet", "iam.Qualifier", "iam.ResourceLimits", "iam.ResourcePermission", "iam.ResourceRoles", "iam.Role", "iam.SecurityHolder", "iam.ServiceProvider", "iam.Session", "iam.SessionLimits", "iam.System", "iam.TrustPoint", "iam.User", "iam.UserGroup", "iam.UserPreference", "inventory.DeviceInfo", "inventory.DnMoBinding", "inventory.GenericInventory", "inventory.GenericInventoryHolder", "inventory.Request", "ipmioverlan.Policy", "ippool.IpLease", "ippool.Pool", "ippool.PoolMember", "ippool.ShadowBlock", "ippool.ShadowPool", "ippool.Universe", "iwotenant.TenantStatus", "kubernetes.AciCniApic", "kubernetes.AciCniProfile", "kubernetes.AciCniTenantClusterAllocation", "kubernetes.Addon", "kubernetes.AddonDefinition", "kubernetes.AddonPolicy", "kubernetes.AddonRepository", "kubernetes.Catalog", "kubernetes.Cluster", "kubernetes.ClusterProfile", "kubernetes.ContainerRuntimePolicy", "kubernetes.DaemonSet", "kubernetes.Deployment", "kubernetes.Ingress", "kubernetes.NetworkPolicy", "kubernetes.Node", "kubernetes.NodeGroupProfile", "kubernetes.Pod", "kubernetes.Service", "kubernetes.StatefulSet", "kubernetes.SysConfigPolicy", "kubernetes.TrustedRegistriesPolicy", "kubernetes.Version", "kubernetes.VersionPolicy", "kubernetes.VirtualMachineInfrastructureProvider", "kubernetes.VirtualMachineInstanceType", "kubernetes.VirtualMachineNodeProfile", "kvm.KvmSession", "kvm.Policy", "kvm.VmConsole", "license.AccountLicenseData", "license.CustomerOp", "license.IwoCustomerOp", "license.IwoLicenseCount", "license.LicenseInfo", "license.LicenseReservationOp", "license.SmartlicenseToken", "ls.ServiceProfile", "macpool.IdBlock", "macpool.Lease", "macpool.Pool", "macpool.PoolMember", "macpool.Universe", "management.Controller", "management.Entity", "management.Interface", "memory.Array", "memory.PersistentMemoryConfigResult", "memory.PersistentMemoryConfiguration", "memory.PersistentMemoryNamespace", "memory.PersistentMemoryNamespaceConfigResult", "memory.PersistentMemoryPolicy", "memory.PersistentMemoryRegion", "memory.PersistentMemoryUnit", "memory.Unit", "meta.Definition", "network.Element", "network.ElementSummary", "network.FcZoneInfo", "network.VlanPortInfo", "networkconfig.Policy", "niaapi.ApicCcoPost", "niaapi.ApicFieldNotice", "niaapi.ApicHweol", "niaapi.ApicLatestMaintainedRelease", "niaapi.ApicReleaseRecommend", "niaapi.ApicSweol", "niaapi.DcnmCcoPost", "niaapi.DcnmFieldNotice", "niaapi.DcnmHweol", "niaapi.DcnmLatestMaintainedRelease", "niaapi.DcnmReleaseRecommend", "niaapi.DcnmSweol", "niaapi.FileDownloader", "niaapi.NiaMetadata", "niaapi.VersionRegex", "niatelemetry.AppDetails", "niatelemetry.Epg", "niatelemetry.Fault", "niatelemetry.Lc", "niatelemetry.NexusDashboardControllerDetails", "niatelemetry.NexusDashboardDetails", "niatelemetry.NexusDashboardMemoryDetails", "niatelemetry.NexusDashboards", "niatelemetry.NiaFeatureUsage", "niatelemetry.NiaInventory", "niatelemetry.NiaLicenseState", "niatelemetry.Tenant", "ntp.Policy", "organization.Organization", "os.Catalog", "os.ConfigurationFile", "os.Distribution", "os.Install", "os.OsSupport", "os.SupportedVersion", "os.TemplateFile", "os.ValidInstallTarget", "pci.CoprocessorCard", "pci.Device", "pci.Link", "pci.Switch", "port.Group", "port.MacBinding", "port.SubGroup", "processor.Unit", "recovery.BackupConfigPolicy", "recovery.BackupProfile", "recovery.ConfigResult", "recovery.ConfigResultEntry", "recovery.OnDemandBackup", "recovery.Restore", "recovery.ScheduleConfigPolicy", "resource.Group", "resource.GroupMember", "resource.LicenseResourceCount", "resource.Membership", "resource.MembershipHolder", "sdcard.Policy", "sdwan.Profile", "sdwan.RouterNode", "sdwan.RouterPolicy", "sdwan.VmanageAccountPolicy", "search.SearchItem", "search.SuggestItem", "search.TagItem", "security.Unit", "server.ConfigChangeDetail", "server.ConfigImport", "server.ConfigResult", "server.ConfigResultEntry", "server.Profile", "smtp.Policy", "snmp.Policy", "software.ApplianceDistributable", "software.HclMeta", "software.HyperflexBundleDistributable", "software.HyperflexDistributable", "software.SolutionDistributable", "software.UcsdBundleDistributable", "software.UcsdDistributable", "softwarerepository.Authorization", "softwarerepository.CachedImage", "softwarerepository.Catalog", "softwarerepository.CategoryMapper", "softwarerepository.CategoryMapperModel", "softwarerepository.CategorySupportConstraint", "softwarerepository.DownloadSpec", "softwarerepository.OperatingSystemFile", "softwarerepository.Release", "sol.Policy", "ssh.Policy", "storage.Controller", "storage.DiskGroup", "storage.DiskGroupPolicy", "storage.Enclosure", "storage.EnclosureDisk", "storage.EnclosureDiskSlotEp", "storage.FlexFlashController", "storage.FlexFlashControllerProps", "storage.FlexFlashPhysicalDrive", "storage.FlexFlashVirtualDrive", "storage.FlexUtilController", "storage.FlexUtilPhysicalDrive", "storage.FlexUtilVirtualDrive", "storage.HitachiArray", "storage.HitachiController", "storage.HitachiDisk", "storage.HitachiHost", "storage.HitachiHostLun", "storage.HitachiParityGroup", "storage.HitachiPool", "storage.HitachiPort", "storage.HitachiVolume", "storage.HyperFlexStorageContainer", "storage.HyperFlexVolume", "storage.Item", "storage.PhysicalDisk", "storage.PhysicalDiskExtension", "storage.PhysicalDiskUsage", "storage.PureArray", "storage.PureController", "storage.PureDisk", "storage.PureHost", "storage.PureHostGroup", "storage.PureHostLun", "storage.PurePort", "storage.PureProtectionGroup", "storage.PureProtectionGroupSnapshot", "storage.PureReplicationSchedule", "storage.PureSnapshotSchedule", "storage.PureVolume", "storage.PureVolumeSnapshot", "storage.SasExpander", "storage.SasPort", "storage.Span", "storage.StoragePolicy", "storage.VdMemberEp", "storage.VirtualDrive", "storage.VirtualDriveContainer", "storage.VirtualDriveExtension", "syslog.Policy", "tam.AdvisoryCount", "tam.AdvisoryDefinition", "tam.AdvisoryInfo", "tam.AdvisoryInstance", "tam.SecurityAdvisory", "task.HitachiScopedInventory", "task.PureScopedInventory", "techsupportmanagement.Download", "techsupportmanagement.TechSupportBundle", "techsupportmanagement.TechSupportStatus", "terminal.AuditLog", "top.System", "ucsd.BackupInfo", "uuidpool.Block", "uuidpool.Pool", "uuidpool.PoolMember", "uuidpool.Universe", "uuidpool.UuidLease", "virtualization.Host", "virtualization.VirtualDisk", "virtualization.VirtualMachine", "virtualization.VmwareCluster", "virtualization.VmwareDatacenter", "virtualization.VmwareDatastore", "virtualization.VmwareHost", "virtualization.VmwareVcenter", "virtualization.VmwareVirtualMachine", "vmedia.Policy", "vnic.EthAdapterPolicy", "vnic.EthIf", "vnic.EthNetworkPolicy", "vnic.EthQosPolicy", "vnic.FcAdapterPolicy", "vnic.FcIf", "vnic.FcNetworkPolicy", "vnic.FcQosPolicy", "vnic.LanConnectivityPolicy", "vnic.LcpStatus", "vnic.SanConnectivityPolicy", "vnic.ScpStatus", "vrf.Vrf", "workflow.BatchApiExecutor", "workflow.BuildTaskMeta", "workflow.BuildTaskMetaOwner", "workflow.Catalog", "workflow.CustomDataTypeDefinition", "workflow.ErrorResponseHandler", "workflow.PendingDynamicWorkflowInfo", "workflow.RollbackWorkflow", "workflow.TaskDefinition", "workflow.TaskInfo", "workflow.TaskMetadata", "workflow.WorkflowDefinition", "workflow.WorkflowInfo", "workflow.WorkflowMeta", "workflow.WorkflowMetadata")]
        [String]
        ${ClassId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("aaa.AuditRecord", "access.Policy", "adapter.ConfigPolicy", "adapter.ExtEthInterface", "adapter.HostEthInterface", "adapter.HostFcInterface", "adapter.HostIscsiInterface", "adapter.Unit", "appliance.AppStatus", "appliance.Backup", "appliance.BackupPolicy", "appliance.CertificateSetting", "appliance.DataExportPolicy", "appliance.DeviceCertificate", "appliance.DeviceClaim", "appliance.DiagSetting", "appliance.ExternalSyslogSetting", "appliance.FileSystemStatus", "appliance.GroupStatus", "appliance.ImageBundle", "appliance.NodeInfo", "appliance.NodeStatus", "appliance.ReleaseNote", "appliance.Restore", "appliance.SetupInfo", "appliance.SystemInfo", "appliance.SystemStatus", "appliance.Upgrade", "appliance.UpgradePolicy", "asset.ClusterMember", "asset.DeviceClaim", "asset.DeviceConfiguration", "asset.DeviceConnectorManager", "asset.DeviceContractInformation", "asset.DeviceRegistration", "asset.SubscriptionDeviceContractInformation", "asset.Target", "bios.BootDevice", "bios.BootMode", "bios.Policy", "bios.SystemBootOrder", "bios.Unit", "boot.CddDevice", "boot.DeviceBootMode", "boot.HddDevice", "boot.IscsiDevice", "boot.NvmeDevice", "boot.PchStorageDevice", "boot.PrecisionPolicy", "boot.PxeDevice", "boot.SanDevice", "boot.SdDevice", "boot.UefiShellDevice", "boot.UsbDevice", "boot.VmediaDevice", "capability.AdapterUnitDescriptor", "capability.Catalog", "capability.ChassisDescriptor", "capability.ChassisManufacturingDef", "capability.CimcFirmwareDescriptor", "capability.EquipmentPhysicalDef", "capability.EquipmentSlotArray", "capability.FanModuleDescriptor", "capability.FanModuleManufacturingDef", "capability.IoCardCapabilityDef", "capability.IoCardDescriptor", "capability.IoCardManufacturingDef", "capability.PortGroupAggregationDef", "capability.PsuDescriptor", "capability.PsuManufacturingDef", "capability.SiocModuleCapabilityDef", "capability.SiocModuleDescriptor", "capability.SiocModuleManufacturingDef", "capability.SwitchCapability", "capability.SwitchDescriptor", "capability.SwitchManufacturingDef", "comm.HttpProxyPolicy", "compute.Blade", "compute.BladeIdentity", "compute.Board", "compute.PhysicalSummary", "compute.RackUnit", "compute.RackUnitIdentity", "compute.ServerSetting", "cond.Alarm", "cond.AlarmAggregation", "cond.HclStatus", "cond.HclStatusDetail", "cond.HclStatusJob", "config.ExportedItem", "config.Exporter", "config.ImportedItem", "config.Importer", "connectorpack.ConnectorPackUpgrade", "connectorpack.UpgradeImpact", "deviceconnector.Policy", "equipment.Chassis", "equipment.ChassisIdentity", "equipment.ChassisOperation", "equipment.DeviceSummary", "equipment.Fan", "equipment.FanModule", "equipment.Fex", "equipment.FexIdentity", "equipment.FexOperation", "equipment.IdentitySummary", "equipment.IoCard", "equipment.IoCardOperation", "equipment.IoExpander", "equipment.LocatorLed", "equipment.Psu", "equipment.PsuControl", "equipment.RackEnclosure", "equipment.RackEnclosureSlot", "equipment.SharedIoModule", "equipment.SwitchCard", "equipment.SystemIoController", "equipment.Tpm", "equipment.Transceiver", "ether.HostPort", "ether.NetworkPort", "ether.PhysicalPort", "ether.PortChannel", "externalsite.Authorization", "fabric.ConfigChangeDetail", "fabric.ConfigResult", "fabric.ConfigResultEntry", "fabric.EstimateImpact", "fabric.EthNetworkControlPolicy", "fabric.EthNetworkGroupPolicy", "fabric.EthNetworkPolicy", "fabric.FcNetworkPolicy", "fabric.FcUplinkPcRole", "fabric.FcUplinkRole", "fabric.FcoeUplinkPcRole", "fabric.FcoeUplinkRole", "fabric.MulticastPolicy", "fabric.PcMember", "fabric.PcOperation", "fabric.PortMode", "fabric.PortOperation", "fabric.PortPolicy", "fabric.ServerRole", "fabric.SwitchClusterProfile", "fabric.SwitchControlPolicy", "fabric.SwitchProfile", "fabric.SystemQosPolicy", "fabric.UplinkPcRole", "fabric.UplinkRole", "fabric.Vlan", "fabric.Vsan", "fault.Instance", "fc.PhysicalPort", "fc.PortChannel", "fcpool.FcBlock", "fcpool.Lease", "fcpool.Pool", "fcpool.PoolMember", "fcpool.Universe", "feedback.FeedbackPost", "firmware.BiosDescriptor", "firmware.BoardControllerDescriptor", "firmware.ChassisUpgrade", "firmware.CimcDescriptor", "firmware.DimmDescriptor", "firmware.Distributable", "firmware.DistributableMeta", "firmware.DriveDescriptor", "firmware.DriverDistributable", "firmware.Eula", "firmware.FirmwareSummary", "firmware.GpuDescriptor", "firmware.HbaDescriptor", "firmware.IomDescriptor", "firmware.MswitchDescriptor", "firmware.NxosDescriptor", "firmware.PcieDescriptor", "firmware.PsuDescriptor", "firmware.RunningFirmware", "firmware.SasExpanderDescriptor", "firmware.ServerConfigurationUtilityDistributable", "firmware.StorageControllerDescriptor", "firmware.SwitchUpgrade", "firmware.Upgrade", "firmware.UpgradeImpact", "firmware.UpgradeImpactStatus", "firmware.UpgradeStatus", "forecast.Catalog", "forecast.Definition", "forecast.Instance", "graphics.Card", "graphics.Controller", "hcl.CompatibilityStatus", "hcl.DriverImage", "hcl.ExemptedCatalog", "hcl.HyperflexSoftwareCompatibilityInfo", "hcl.OperatingSystem", "hcl.OperatingSystemVendor", "hcl.SupportedDriverName", "hyperflex.Alarm", "hyperflex.AppCatalog", "hyperflex.AutoSupportPolicy", "hyperflex.CapabilityInfo", "hyperflex.CiscoHypervisorManager", "hyperflex.Cluster", "hyperflex.ClusterHealthCheckExecutionSnapshot", "hyperflex.ClusterNetworkPolicy", "hyperflex.ClusterProfile", "hyperflex.ClusterStoragePolicy", "hyperflex.ConfigResult", "hyperflex.ConfigResultEntry", "hyperflex.DevicePackageDownloadState", "hyperflex.ExtFcStoragePolicy", "hyperflex.ExtIscsiStoragePolicy", "hyperflex.FeatureLimitExternal", "hyperflex.FeatureLimitInternal", "hyperflex.Health", "hyperflex.HealthCheckDefinition", "hyperflex.HealthCheckExecution", "hyperflex.HealthCheckExecutionSnapshot", "hyperflex.HealthCheckPackageChecksum", "hyperflex.HxapCluster", "hyperflex.HxapDatacenter", "hyperflex.HxapEvent", "hyperflex.HxapHost", "hyperflex.HxapVirtualDisk", "hyperflex.HxapVirtualMachine", "hyperflex.HxdpVersion", "hyperflex.LocalCredentialPolicy", "hyperflex.Node", "hyperflex.NodeConfigPolicy", "hyperflex.NodeProfile", "hyperflex.ProxySettingPolicy", "hyperflex.ServerFirmwareVersion", "hyperflex.ServerFirmwareVersionEntry", "hyperflex.ServerModel", "hyperflex.SoftwareVersionPolicy", "hyperflex.SysConfigPolicy", "hyperflex.UcsmConfigPolicy", "hyperflex.VcenterConfigPolicy", "iaas.ConnectorPack", "iaas.DeviceStatus", "iaas.DiagnosticMessages", "iaas.LicenseInfo", "iaas.MostRunTasks", "iaas.ServiceRequest", "iaas.UcsdInfo", "iaas.UcsdManagedInfra", "iaas.UcsdMessages", "iam.Account", "iam.AccountExperience", "iam.ApiKey", "iam.AppRegistration", "iam.Certificate", "iam.CertificateRequest", "iam.DomainGroup", "iam.EndPointPrivilege", "iam.EndPointRole", "iam.EndPointUser", "iam.EndPointUserPolicy", "iam.EndPointUserRole", "iam.Idp", "iam.IdpReference", "iam.IpAccessManagement", "iam.IpAddress", "iam.LdapGroup", "iam.LdapPolicy", "iam.LdapProvider", "iam.LocalUserPassword", "iam.OAuthToken", "iam.Permission", "iam.PrivateKeySpec", "iam.Privilege", "iam.PrivilegeSet", "iam.Qualifier", "iam.ResourceLimits", "iam.ResourcePermission", "iam.ResourceRoles", "iam.Role", "iam.SecurityHolder", "iam.ServiceProvider", "iam.Session", "iam.SessionLimits", "iam.System", "iam.TrustPoint", "iam.User", "iam.UserGroup", "iam.UserPreference", "inventory.DeviceInfo", "inventory.DnMoBinding", "inventory.GenericInventory", "inventory.GenericInventoryHolder", "inventory.Request", "ipmioverlan.Policy", "ippool.IpLease", "ippool.Pool", "ippool.PoolMember", "ippool.ShadowBlock", "ippool.ShadowPool", "ippool.Universe", "iwotenant.TenantStatus", "kubernetes.AciCniApic", "kubernetes.AciCniProfile", "kubernetes.AciCniTenantClusterAllocation", "kubernetes.Addon", "kubernetes.AddonDefinition", "kubernetes.AddonPolicy", "kubernetes.AddonRepository", "kubernetes.Catalog", "kubernetes.Cluster", "kubernetes.ClusterProfile", "kubernetes.ContainerRuntimePolicy", "kubernetes.DaemonSet", "kubernetes.Deployment", "kubernetes.Ingress", "kubernetes.NetworkPolicy", "kubernetes.Node", "kubernetes.NodeGroupProfile", "kubernetes.Pod", "kubernetes.Service", "kubernetes.StatefulSet", "kubernetes.SysConfigPolicy", "kubernetes.TrustedRegistriesPolicy", "kubernetes.Version", "kubernetes.VersionPolicy", "kubernetes.VirtualMachineInfrastructureProvider", "kubernetes.VirtualMachineInstanceType", "kubernetes.VirtualMachineNodeProfile", "kvm.KvmSession", "kvm.Policy", "kvm.VmConsole", "license.AccountLicenseData", "license.CustomerOp", "license.IwoCustomerOp", "license.IwoLicenseCount", "license.LicenseInfo", "license.LicenseReservationOp", "license.SmartlicenseToken", "ls.ServiceProfile", "macpool.IdBlock", "macpool.Lease", "macpool.Pool", "macpool.PoolMember", "macpool.Universe", "management.Controller", "management.Entity", "management.Interface", "memory.Array", "memory.PersistentMemoryConfigResult", "memory.PersistentMemoryConfiguration", "memory.PersistentMemoryNamespace", "memory.PersistentMemoryNamespaceConfigResult", "memory.PersistentMemoryPolicy", "memory.PersistentMemoryRegion", "memory.PersistentMemoryUnit", "memory.Unit", "meta.Definition", "network.Element", "network.ElementSummary", "network.FcZoneInfo", "network.VlanPortInfo", "networkconfig.Policy", "niaapi.ApicCcoPost", "niaapi.ApicFieldNotice", "niaapi.ApicHweol", "niaapi.ApicLatestMaintainedRelease", "niaapi.ApicReleaseRecommend", "niaapi.ApicSweol", "niaapi.DcnmCcoPost", "niaapi.DcnmFieldNotice", "niaapi.DcnmHweol", "niaapi.DcnmLatestMaintainedRelease", "niaapi.DcnmReleaseRecommend", "niaapi.DcnmSweol", "niaapi.FileDownloader", "niaapi.NiaMetadata", "niaapi.VersionRegex", "niatelemetry.AppDetails", "niatelemetry.Epg", "niatelemetry.Fault", "niatelemetry.Lc", "niatelemetry.NexusDashboardControllerDetails", "niatelemetry.NexusDashboardDetails", "niatelemetry.NexusDashboardMemoryDetails", "niatelemetry.NexusDashboards", "niatelemetry.NiaFeatureUsage", "niatelemetry.NiaInventory", "niatelemetry.NiaLicenseState", "niatelemetry.Tenant", "ntp.Policy", "organization.Organization", "os.Catalog", "os.ConfigurationFile", "os.Distribution", "os.Install", "os.OsSupport", "os.SupportedVersion", "os.TemplateFile", "os.ValidInstallTarget", "pci.CoprocessorCard", "pci.Device", "pci.Link", "pci.Switch", "port.Group", "port.MacBinding", "port.SubGroup", "processor.Unit", "recovery.BackupConfigPolicy", "recovery.BackupProfile", "recovery.ConfigResult", "recovery.ConfigResultEntry", "recovery.OnDemandBackup", "recovery.Restore", "recovery.ScheduleConfigPolicy", "resource.Group", "resource.GroupMember", "resource.LicenseResourceCount", "resource.Membership", "resource.MembershipHolder", "sdcard.Policy", "sdwan.Profile", "sdwan.RouterNode", "sdwan.RouterPolicy", "sdwan.VmanageAccountPolicy", "search.SearchItem", "search.SuggestItem", "search.TagItem", "security.Unit", "server.ConfigChangeDetail", "server.ConfigImport", "server.ConfigResult", "server.ConfigResultEntry", "server.Profile", "smtp.Policy", "snmp.Policy", "software.ApplianceDistributable", "software.HclMeta", "software.HyperflexBundleDistributable", "software.HyperflexDistributable", "software.SolutionDistributable", "software.UcsdBundleDistributable", "software.UcsdDistributable", "softwarerepository.Authorization", "softwarerepository.CachedImage", "softwarerepository.Catalog", "softwarerepository.CategoryMapper", "softwarerepository.CategoryMapperModel", "softwarerepository.CategorySupportConstraint", "softwarerepository.DownloadSpec", "softwarerepository.OperatingSystemFile", "softwarerepository.Release", "sol.Policy", "ssh.Policy", "storage.Controller", "storage.DiskGroup", "storage.DiskGroupPolicy", "storage.Enclosure", "storage.EnclosureDisk", "storage.EnclosureDiskSlotEp", "storage.FlexFlashController", "storage.FlexFlashControllerProps", "storage.FlexFlashPhysicalDrive", "storage.FlexFlashVirtualDrive", "storage.FlexUtilController", "storage.FlexUtilPhysicalDrive", "storage.FlexUtilVirtualDrive", "storage.HitachiArray", "storage.HitachiController", "storage.HitachiDisk", "storage.HitachiHost", "storage.HitachiHostLun", "storage.HitachiParityGroup", "storage.HitachiPool", "storage.HitachiPort", "storage.HitachiVolume", "storage.HyperFlexStorageContainer", "storage.HyperFlexVolume", "storage.Item", "storage.PhysicalDisk", "storage.PhysicalDiskExtension", "storage.PhysicalDiskUsage", "storage.PureArray", "storage.PureController", "storage.PureDisk", "storage.PureHost", "storage.PureHostGroup", "storage.PureHostLun", "storage.PurePort", "storage.PureProtectionGroup", "storage.PureProtectionGroupSnapshot", "storage.PureReplicationSchedule", "storage.PureSnapshotSchedule", "storage.PureVolume", "storage.PureVolumeSnapshot", "storage.SasExpander", "storage.SasPort", "storage.Span", "storage.StoragePolicy", "storage.VdMemberEp", "storage.VirtualDrive", "storage.VirtualDriveContainer", "storage.VirtualDriveExtension", "syslog.Policy", "tam.AdvisoryCount", "tam.AdvisoryDefinition", "tam.AdvisoryInfo", "tam.AdvisoryInstance", "tam.SecurityAdvisory", "task.HitachiScopedInventory", "task.PureScopedInventory", "techsupportmanagement.Download", "techsupportmanagement.TechSupportBundle", "techsupportmanagement.TechSupportStatus", "terminal.AuditLog", "top.System", "ucsd.BackupInfo", "uuidpool.Block", "uuidpool.Pool", "uuidpool.PoolMember", "uuidpool.Universe", "uuidpool.UuidLease", "virtualization.Host", "virtualization.VirtualDisk", "virtualization.VirtualMachine", "virtualization.VmwareCluster", "virtualization.VmwareDatacenter", "virtualization.VmwareDatastore", "virtualization.VmwareHost", "virtualization.VmwareVcenter", "virtualization.VmwareVirtualMachine", "vmedia.Policy", "vnic.EthAdapterPolicy", "vnic.EthIf", "vnic.EthNetworkPolicy", "vnic.EthQosPolicy", "vnic.FcAdapterPolicy", "vnic.FcIf", "vnic.FcNetworkPolicy", "vnic.FcQosPolicy", "vnic.LanConnectivityPolicy", "vnic.LcpStatus", "vnic.SanConnectivityPolicy", "vnic.ScpStatus", "vrf.Vrf", "workflow.BatchApiExecutor", "workflow.BuildTaskMeta", "workflow.BuildTaskMetaOwner", "workflow.Catalog", "workflow.CustomDataTypeDefinition", "workflow.ErrorResponseHandler", "workflow.PendingDynamicWorkflowInfo", "workflow.RollbackWorkflow", "workflow.TaskDefinition", "workflow.TaskInfo", "workflow.TaskMetadata", "workflow.WorkflowDefinition", "workflow.WorkflowInfo", "workflow.WorkflowMeta", "workflow.WorkflowMetadata")]
        [String]
        ${ObjectType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Moid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Owners},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VersionContext},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightMoBaseMo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Parent" = ${Parent}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MoBaseMo<PSCustomObject>

.DESCRIPTION

Convert from JSON to MoBaseMo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MoBaseMo<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToMoBaseMo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightMoBaseMo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightMoBaseMo
        $AllProperties = ("ClassId", "ObjectType", "AccountMoid", "CreateTime", "DomainGroupMoid", "ModTime", "Moid", "Owners", "SharedScope", "Tags", "VersionContext", "Ancestors", "Parent", "PermissionResources", "DisplayNames")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AccountMoid"))) { #optional property not found
            $AccountMoid = $null
        } else {
            $AccountMoid = $JsonParameters.PSobject.Properties["AccountMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CreateTime"))) { #optional property not found
            $CreateTime = $null
        } else {
            $CreateTime = $JsonParameters.PSobject.Properties["CreateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DomainGroupMoid"))) { #optional property not found
            $DomainGroupMoid = $null
        } else {
            $DomainGroupMoid = $JsonParameters.PSobject.Properties["DomainGroupMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ModTime"))) { #optional property not found
            $ModTime = $null
        } else {
            $ModTime = $JsonParameters.PSobject.Properties["ModTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Moid"))) { #optional property not found
            $Moid = $null
        } else {
            $Moid = $JsonParameters.PSobject.Properties["Moid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Owners"))) { #optional property not found
            $Owners = $null
        } else {
            $Owners = $JsonParameters.PSobject.Properties["Owners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SharedScope"))) { #optional property not found
            $SharedScope = $null
        } else {
            $SharedScope = $JsonParameters.PSobject.Properties["SharedScope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["Tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VersionContext"))) { #optional property not found
            $VersionContext = $null
        } else {
            $VersionContext = $JsonParameters.PSobject.Properties["VersionContext"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ancestors"))) { #optional property not found
            $Ancestors = $null
        } else {
            $Ancestors = $JsonParameters.PSobject.Properties["Ancestors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["Parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PermissionResources"))) { #optional property not found
            $PermissionResources = $null
        } else {
            $PermissionResources = $JsonParameters.PSobject.Properties["PermissionResources"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DisplayNames"))) { #optional property not found
            $DisplayNames = $null
        } else {
            $DisplayNames = $JsonParameters.PSobject.Properties["DisplayNames"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AccountMoid" = ${AccountMoid}
            "CreateTime" = ${CreateTime}
            "DomainGroupMoid" = ${DomainGroupMoid}
            "ModTime" = ${ModTime}
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "SharedScope" = ${SharedScope}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Ancestors" = ${Ancestors}
            "Parent" = ${Parent}
            "PermissionResources" = ${PermissionResources}
            "DisplayNames" = ${DisplayNames}
        }

        return $PSO
    }

}

