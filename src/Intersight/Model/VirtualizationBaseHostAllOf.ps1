#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'virtualization.BaseHost', excluding properties defined in parent classes.

.PARAMETER CpuInfo
No description available.
.PARAMETER HardwareInfo
No description available.
.PARAMETER HypervisorType
Identifies the broad type of the underlying hypervisor.
.PARAMETER Identity
The internally generated identity of this host. This entity is not manipulated by users. It aids in uniquely identifying the datacenter object. For VMware, this is an MOR (managed object reference).
.PARAMETER MaintenanceMode
Is this host in maintenance mode. Set to true or false.
.PARAMETER MemoryCapacity
No description available.
.PARAMETER Model
Commercial model information about this hardware.
.PARAMETER Name
Name of this host supplied by user. It is not the identity of the host. The name is subject to user manipulations.
.PARAMETER ProcessorCapacity
No description available.
.PARAMETER ProductInfo
No description available.
.PARAMETER Serial
Serial number of this host (internally generated).
.PARAMETER Status
Host health status, as reported by the hypervisor platform.
.PARAMETER UpTime
The uptime of the host, stored as Duration (from w3c).
.PARAMETER Uuid
Universally unique identity of this host (example b3d4483b-5560-9342-8309-b486c9236610). Internally generated.
.PARAMETER Vendor
Commercial vendor details of this hardware.
.OUTPUTS

VirtualizationBaseHostAllOf<PSCustomObject>
#>

function Initialize-IntersightVirtualizationBaseHostAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CpuInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HardwareInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Unknown", "ESXi", "HXAP")]
        [String]
        ${HypervisorType} = "Unknown",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Identity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MaintenanceMode},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MemoryCapacity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProcessorCapacity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProductInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Unknown", "Degraded", "Critical", "Ok")]
        [String]
        ${Status} = "Unknown",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpTime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")]
        [String]
        ${Uuid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vendor}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightVirtualizationBaseHostAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        
        $PSO = [PSCustomObject]@{
            "CpuInfo" = ${CpuInfo}
            "HardwareInfo" = ${HardwareInfo}
            "HypervisorType" = ${HypervisorType}
            "Identity" = ${Identity}
            "MaintenanceMode" = ${MaintenanceMode}
            "MemoryCapacity" = ${MemoryCapacity}
            "Model" = ${Model}
            "Name" = ${Name}
            "ProcessorCapacity" = ${ProcessorCapacity}
            "ProductInfo" = ${ProductInfo}
            "Serial" = ${Serial}
            "Status" = ${Status}
            "UpTime" = ${UpTime}
            "Uuid" = ${Uuid}
            "Vendor" = ${Vendor}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VirtualizationBaseHostAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to VirtualizationBaseHostAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VirtualizationBaseHostAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToVirtualizationBaseHostAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightVirtualizationBaseHostAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightVirtualizationBaseHostAllOf
        $AllProperties = ("CpuInfo", "HardwareInfo", "HypervisorType", "Identity", "MaintenanceMode", "MemoryCapacity", "Model", "Name", "ProcessorCapacity", "ProductInfo", "Serial", "Status", "UpTime", "Uuid", "Vendor")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CpuInfo"))) { #optional property not found
            $CpuInfo = $null
        } else {
            $CpuInfo = $JsonParameters.PSobject.Properties["CpuInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HardwareInfo"))) { #optional property not found
            $HardwareInfo = $null
        } else {
            $HardwareInfo = $JsonParameters.PSobject.Properties["HardwareInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HypervisorType"))) { #optional property not found
            $HypervisorType = $null
        } else {
            $HypervisorType = $JsonParameters.PSobject.Properties["HypervisorType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Identity"))) { #optional property not found
            $Identity = $null
        } else {
            $Identity = $JsonParameters.PSobject.Properties["Identity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MaintenanceMode"))) { #optional property not found
            $MaintenanceMode = $null
        } else {
            $MaintenanceMode = $JsonParameters.PSobject.Properties["MaintenanceMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemoryCapacity"))) { #optional property not found
            $MemoryCapacity = $null
        } else {
            $MemoryCapacity = $JsonParameters.PSobject.Properties["MemoryCapacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["Model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProcessorCapacity"))) { #optional property not found
            $ProcessorCapacity = $null
        } else {
            $ProcessorCapacity = $JsonParameters.PSobject.Properties["ProcessorCapacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProductInfo"))) { #optional property not found
            $ProductInfo = $null
        } else {
            $ProductInfo = $JsonParameters.PSobject.Properties["ProductInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["Serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["Status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UpTime"))) { #optional property not found
            $UpTime = $null
        } else {
            $UpTime = $JsonParameters.PSobject.Properties["UpTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["Uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Vendor"))) { #optional property not found
            $Vendor = $null
        } else {
            $Vendor = $JsonParameters.PSobject.Properties["Vendor"].value
        }

        $PSO = [PSCustomObject]@{
            "CpuInfo" = ${CpuInfo}
            "HardwareInfo" = ${HardwareInfo}
            "HypervisorType" = ${HypervisorType}
            "Identity" = ${Identity}
            "MaintenanceMode" = ${MaintenanceMode}
            "MemoryCapacity" = ${MemoryCapacity}
            "Model" = ${Model}
            "Name" = ${Name}
            "ProcessorCapacity" = ${ProcessorCapacity}
            "ProductInfo" = ${ProductInfo}
            "Serial" = ${Serial}
            "Status" = ${Status}
            "UpTime" = ${UpTime}
            "Uuid" = ${Uuid}
            "Vendor" = ${Vendor}
        }

        return $PSO
    }

}

