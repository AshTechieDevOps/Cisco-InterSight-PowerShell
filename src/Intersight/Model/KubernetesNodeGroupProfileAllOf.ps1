#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'kubernetes.NodeGroupProfile', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER Currentsize
Current number of nodes in this node group at any given point in time.
.PARAMETER Desiredsize
Desired number of nodes in this node group, same as minsize initially and is updated by the auto-scaler.
.PARAMETER Labels
No description available.
.PARAMETER Maxsize
Maximum number of nodes desired in this node group.
.PARAMETER Minsize
Minimum number of nodes desired in this node group.
.PARAMETER NodeType
The node type Master, Worker or EmbeddedMaster. * `Worker` - Node will be marked as a worker node. * `Master` - Node will be marked as a master node. * `EmbeddedMaster` - Node will be both a master and a worker.
.PARAMETER Taints
No description available.
.PARAMETER ClusterProfile
No description available.
.PARAMETER InfraProvider
No description available.
.PARAMETER IpPools
An array of relationships to ippoolPool resources.
.PARAMETER KubernetesVersion
No description available.
.PARAMETER Nodes
An array of relationships to kubernetesNodeProfile resources.
.OUTPUTS

KubernetesNodeGroupProfileAllOf<PSCustomObject>
#>

function Initialize-IntersightKubernetesNodeGroupProfileAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("kubernetes.NodeGroupProfile")]
        [String]
        ${ClassId} = "kubernetes.NodeGroupProfile",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("kubernetes.NodeGroupProfile")]
        [String]
        ${ObjectType} = "kubernetes.NodeGroupProfile",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Currentsize},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Desiredsize} = 3,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Labels},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Maxsize},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Minsize},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Worker", "Master", "EmbeddedMaster")]
        [String]
        ${NodeType} = "Worker",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Taints},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ClusterProfile},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InfraProvider},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${IpPools},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${KubernetesVersion},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Nodes}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightKubernetesNodeGroupProfileAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        if ($Desiredsize -and $Desiredsize -gt 128) {
          throw "invalid value for 'Desiredsize', must be smaller than or equal to 128."
        }

        if ($Desiredsize -and $Desiredsize -lt 1) {
          throw "invalid value for 'Desiredsize', must be greater than or equal to 1."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Currentsize" = ${Currentsize}
            "Desiredsize" = ${Desiredsize}
            "Labels" = ${Labels}
            "Maxsize" = ${Maxsize}
            "Minsize" = ${Minsize}
            "NodeType" = ${NodeType}
            "Taints" = ${Taints}
            "ClusterProfile" = ${ClusterProfile}
            "InfraProvider" = ${InfraProvider}
            "IpPools" = ${IpPools}
            "KubernetesVersion" = ${KubernetesVersion}
            "Nodes" = ${Nodes}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to KubernetesNodeGroupProfileAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to KubernetesNodeGroupProfileAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

KubernetesNodeGroupProfileAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToKubernetesNodeGroupProfileAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightKubernetesNodeGroupProfileAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightKubernetesNodeGroupProfileAllOf
        $AllProperties = ("ClassId", "ObjectType", "Currentsize", "Desiredsize", "Labels", "Maxsize", "Minsize", "NodeType", "Taints", "ClusterProfile", "InfraProvider", "IpPools", "KubernetesVersion", "Nodes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Currentsize"))) { #optional property not found
            $Currentsize = $null
        } else {
            $Currentsize = $JsonParameters.PSobject.Properties["Currentsize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Desiredsize"))) { #optional property not found
            $Desiredsize = $null
        } else {
            $Desiredsize = $JsonParameters.PSobject.Properties["Desiredsize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Labels"))) { #optional property not found
            $Labels = $null
        } else {
            $Labels = $JsonParameters.PSobject.Properties["Labels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Maxsize"))) { #optional property not found
            $Maxsize = $null
        } else {
            $Maxsize = $JsonParameters.PSobject.Properties["Maxsize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Minsize"))) { #optional property not found
            $Minsize = $null
        } else {
            $Minsize = $JsonParameters.PSobject.Properties["Minsize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "NodeType"))) { #optional property not found
            $NodeType = $null
        } else {
            $NodeType = $JsonParameters.PSobject.Properties["NodeType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Taints"))) { #optional property not found
            $Taints = $null
        } else {
            $Taints = $JsonParameters.PSobject.Properties["Taints"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClusterProfile"))) { #optional property not found
            $ClusterProfile = $null
        } else {
            $ClusterProfile = $JsonParameters.PSobject.Properties["ClusterProfile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InfraProvider"))) { #optional property not found
            $InfraProvider = $null
        } else {
            $InfraProvider = $JsonParameters.PSobject.Properties["InfraProvider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IpPools"))) { #optional property not found
            $IpPools = $null
        } else {
            $IpPools = $JsonParameters.PSobject.Properties["IpPools"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "KubernetesVersion"))) { #optional property not found
            $KubernetesVersion = $null
        } else {
            $KubernetesVersion = $JsonParameters.PSobject.Properties["KubernetesVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Nodes"))) { #optional property not found
            $Nodes = $null
        } else {
            $Nodes = $JsonParameters.PSobject.Properties["Nodes"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Currentsize" = ${Currentsize}
            "Desiredsize" = ${Desiredsize}
            "Labels" = ${Labels}
            "Maxsize" = ${Maxsize}
            "Minsize" = ${Minsize}
            "NodeType" = ${NodeType}
            "Taints" = ${Taints}
            "ClusterProfile" = ${ClusterProfile}
            "InfraProvider" = ${InfraProvider}
            "IpPools" = ${IpPools}
            "KubernetesVersion" = ${KubernetesVersion}
            "Nodes" = ${Nodes}
        }

        return $PSO
    }

}

