#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A HyperFlex Application Platform compute host entity that is part of HyperFlex compute cluster and probably runs VMs.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER Moid
The unique identifier of this Managed Object instance.
.PARAMETER Owners
No description available.
.PARAMETER Tags
No description available.
.PARAMETER VersionContext
No description available.
.PARAMETER Var0ClusterReplicationNetworkPolicy
No description available.
.PARAMETER Parent
No description available.
.PARAMETER RegisteredDevice
No description available.
.PARAMETER CpuInfo
No description available.
.PARAMETER HardwareInfo
No description available.
.PARAMETER HypervisorType
Identifies the broad type of the underlying hypervisor. * `ESXi` - The hypervisor running on the HyperFlex cluster is a Vmware ESXi hypervisor of any version. * `HyperFlexAp` - The hypervisor running on the HyperFlex cluster is Cisco HyperFlex Application Platform. * `Hyper-V` - The hypervisor running on the HyperFlex cluster is Microsoft Hyper-V. * `Unknown` - The hypervisor running on the HyperFlex cluster is not known.
.PARAMETER Identity
The internally generated identity of this host. This entity is not manipulated by users. It aids in uniquely identifying the datacenter object. For VMware, this is an MOR (managed object reference).
.PARAMETER MaintenanceMode
Is this host in maintenance mode. Set to true or false.
.PARAMETER MemoryCapacity
No description available.
.PARAMETER Model
Commercial model information about this hardware.
.PARAMETER Name
Name of this host supplied by user. It is not the identity of the host. The name is subject to user manipulations.
.PARAMETER ProcessorCapacity
No description available.
.PARAMETER ProductInfo
No description available.
.PARAMETER Serial
Serial number of this host (internally generated).
.PARAMETER Status
Host health status, as reported by the hypervisor platform. * `Unknown` - Entity status is unknown. * `Degraded` - State is degraded, and might impact normal operation of the entity. * `Critical` - Entity is in a critical state, impacting operations. * `Ok` - Entity status is in a stable state, operating normally.
.PARAMETER UpTime
The uptime of the host, stored as Duration (from w3c).
.PARAMETER Uuid
Universally unique identity of this host (example b3d4483b-5560-9342-8309-b486c9236610). Internally generated.
.PARAMETER Vendor
Commercial vendor details of this hardware.
.PARAMETER Age
Denotes age or life time of the Host in nano seconds.
.PARAMETER ClusterUuid
The UUID of the cluster to which this Host belongs to.
.PARAMETER FailureReason
Reason of the failure when host is in failed state.
.PARAMETER HwPowerState
Is the host Powered-up or Powered-down. * `Unknown` - The entity's power state is unknown. * `PoweredOn` - The entity is powered on. * `PoweredOff` - The entity is powered down. * `StandBy` - The entity is in standby mode. * `Paused` - The entity is in pause state.
.PARAMETER InternalIpAddress
Internal IP Address of the Host.
.PARAMETER ManagementIpAddress
Management IP Address of the Host.
.PARAMETER MasterRole
Is the role of this host is master in the cluster? true or false.
.PARAMETER Version
Product version of the Host.
.PARAMETER Cluster
No description available.
.PARAMETER ClusterMember
No description available.
.PARAMETER PhysicalServer
No description available.
.OUTPUTS

HyperflexHxapHost<PSCustomObject>
#>

function Initialize-IntersightHyperflexHxapHost {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("hyperflex.HxapHost")]
        [String]
        ${ClassId} = "hyperflex.HxapHost",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("hyperflex.HxapHost")]
        [String]
        ${ObjectType} = "hyperflex.HxapHost",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Moid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Owners},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VersionContext},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Var0ClusterReplicationNetworkPolicy},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RegisteredDevice},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CpuInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HardwareInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ESXi", "HyperFlexAp", "Hyper-V", "Unknown")]
        [String]
        ${HypervisorType} = "ESXi",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Identity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MaintenanceMode},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MemoryCapacity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProcessorCapacity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProductInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Unknown", "Degraded", "Critical", "Ok")]
        [String]
        ${Status} = "Unknown",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpTime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")]
        [String]
        ${Uuid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vendor},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Age},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClusterUuid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FailureReason},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Unknown", "PoweredOn", "PoweredOff", "StandBy", "Paused")]
        [String]
        ${HwPowerState} = "Unknown",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InternalIpAddress},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ManagementIpAddress},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MasterRole},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cluster},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ClusterMember},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PhysicalServer}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightHyperflexHxapHost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "_0_ClusterReplicationNetworkPolicy" = ${Var0ClusterReplicationNetworkPolicy}
            "Parent" = ${Parent}
            "RegisteredDevice" = ${RegisteredDevice}
            "CpuInfo" = ${CpuInfo}
            "HardwareInfo" = ${HardwareInfo}
            "HypervisorType" = ${HypervisorType}
            "Identity" = ${Identity}
            "MaintenanceMode" = ${MaintenanceMode}
            "MemoryCapacity" = ${MemoryCapacity}
            "Model" = ${Model}
            "Name" = ${Name}
            "ProcessorCapacity" = ${ProcessorCapacity}
            "ProductInfo" = ${ProductInfo}
            "Serial" = ${Serial}
            "Status" = ${Status}
            "UpTime" = ${UpTime}
            "Uuid" = ${Uuid}
            "Vendor" = ${Vendor}
            "Age" = ${Age}
            "ClusterUuid" = ${ClusterUuid}
            "FailureReason" = ${FailureReason}
            "HwPowerState" = ${HwPowerState}
            "InternalIpAddress" = ${InternalIpAddress}
            "ManagementIpAddress" = ${ManagementIpAddress}
            "MasterRole" = ${MasterRole}
            "Version" = ${Version}
            "Cluster" = ${Cluster}
            "ClusterMember" = ${ClusterMember}
            "PhysicalServer" = ${PhysicalServer}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HyperflexHxapHost<PSCustomObject>

.DESCRIPTION

Convert from JSON to HyperflexHxapHost<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HyperflexHxapHost<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToHyperflexHxapHost {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightHyperflexHxapHost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightHyperflexHxapHost
        $AllProperties = ("ClassId", "ObjectType", "AccountMoid", "CreateTime", "DomainGroupMoid", "ModTime", "Moid", "Owners", "SharedScope", "Tags", "VersionContext", "_0_ClusterReplicationNetworkPolicy", "Ancestors", "Parent", "PermissionResources", "DisplayNames", "RegisteredDevice", "CpuInfo", "HardwareInfo", "HypervisorType", "Identity", "MaintenanceMode", "MemoryCapacity", "Model", "Name", "ProcessorCapacity", "ProductInfo", "Serial", "Status", "UpTime", "Uuid", "Vendor", "Age", "ClusterUuid", "FailureReason", "HwPowerState", "InternalIpAddress", "ManagementIpAddress", "MasterRole", "Version", "Cluster", "ClusterMember", "PhysicalServer")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AccountMoid"))) { #optional property not found
            $AccountMoid = $null
        } else {
            $AccountMoid = $JsonParameters.PSobject.Properties["AccountMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CreateTime"))) { #optional property not found
            $CreateTime = $null
        } else {
            $CreateTime = $JsonParameters.PSobject.Properties["CreateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DomainGroupMoid"))) { #optional property not found
            $DomainGroupMoid = $null
        } else {
            $DomainGroupMoid = $JsonParameters.PSobject.Properties["DomainGroupMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ModTime"))) { #optional property not found
            $ModTime = $null
        } else {
            $ModTime = $JsonParameters.PSobject.Properties["ModTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Moid"))) { #optional property not found
            $Moid = $null
        } else {
            $Moid = $JsonParameters.PSobject.Properties["Moid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Owners"))) { #optional property not found
            $Owners = $null
        } else {
            $Owners = $JsonParameters.PSobject.Properties["Owners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SharedScope"))) { #optional property not found
            $SharedScope = $null
        } else {
            $SharedScope = $JsonParameters.PSobject.Properties["SharedScope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["Tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VersionContext"))) { #optional property not found
            $VersionContext = $null
        } else {
            $VersionContext = $JsonParameters.PSobject.Properties["VersionContext"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_0_ClusterReplicationNetworkPolicy"))) { #optional property not found
            $Var0ClusterReplicationNetworkPolicy = $null
        } else {
            $Var0ClusterReplicationNetworkPolicy = $JsonParameters.PSobject.Properties["_0_ClusterReplicationNetworkPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ancestors"))) { #optional property not found
            $Ancestors = $null
        } else {
            $Ancestors = $JsonParameters.PSobject.Properties["Ancestors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["Parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PermissionResources"))) { #optional property not found
            $PermissionResources = $null
        } else {
            $PermissionResources = $JsonParameters.PSobject.Properties["PermissionResources"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DisplayNames"))) { #optional property not found
            $DisplayNames = $null
        } else {
            $DisplayNames = $JsonParameters.PSobject.Properties["DisplayNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RegisteredDevice"))) { #optional property not found
            $RegisteredDevice = $null
        } else {
            $RegisteredDevice = $JsonParameters.PSobject.Properties["RegisteredDevice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CpuInfo"))) { #optional property not found
            $CpuInfo = $null
        } else {
            $CpuInfo = $JsonParameters.PSobject.Properties["CpuInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HardwareInfo"))) { #optional property not found
            $HardwareInfo = $null
        } else {
            $HardwareInfo = $JsonParameters.PSobject.Properties["HardwareInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HypervisorType"))) { #optional property not found
            $HypervisorType = $null
        } else {
            $HypervisorType = $JsonParameters.PSobject.Properties["HypervisorType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Identity"))) { #optional property not found
            $Identity = $null
        } else {
            $Identity = $JsonParameters.PSobject.Properties["Identity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MaintenanceMode"))) { #optional property not found
            $MaintenanceMode = $null
        } else {
            $MaintenanceMode = $JsonParameters.PSobject.Properties["MaintenanceMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MemoryCapacity"))) { #optional property not found
            $MemoryCapacity = $null
        } else {
            $MemoryCapacity = $JsonParameters.PSobject.Properties["MemoryCapacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["Model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProcessorCapacity"))) { #optional property not found
            $ProcessorCapacity = $null
        } else {
            $ProcessorCapacity = $JsonParameters.PSobject.Properties["ProcessorCapacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProductInfo"))) { #optional property not found
            $ProductInfo = $null
        } else {
            $ProductInfo = $JsonParameters.PSobject.Properties["ProductInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["Serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["Status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "UpTime"))) { #optional property not found
            $UpTime = $null
        } else {
            $UpTime = $JsonParameters.PSobject.Properties["UpTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["Uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Vendor"))) { #optional property not found
            $Vendor = $null
        } else {
            $Vendor = $JsonParameters.PSobject.Properties["Vendor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Age"))) { #optional property not found
            $Age = $null
        } else {
            $Age = $JsonParameters.PSobject.Properties["Age"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClusterUuid"))) { #optional property not found
            $ClusterUuid = $null
        } else {
            $ClusterUuid = $JsonParameters.PSobject.Properties["ClusterUuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FailureReason"))) { #optional property not found
            $FailureReason = $null
        } else {
            $FailureReason = $JsonParameters.PSobject.Properties["FailureReason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HwPowerState"))) { #optional property not found
            $HwPowerState = $null
        } else {
            $HwPowerState = $JsonParameters.PSobject.Properties["HwPowerState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InternalIpAddress"))) { #optional property not found
            $InternalIpAddress = $null
        } else {
            $InternalIpAddress = $JsonParameters.PSobject.Properties["InternalIpAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ManagementIpAddress"))) { #optional property not found
            $ManagementIpAddress = $null
        } else {
            $ManagementIpAddress = $JsonParameters.PSobject.Properties["ManagementIpAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MasterRole"))) { #optional property not found
            $MasterRole = $null
        } else {
            $MasterRole = $JsonParameters.PSobject.Properties["MasterRole"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["Version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Cluster"))) { #optional property not found
            $Cluster = $null
        } else {
            $Cluster = $JsonParameters.PSobject.Properties["Cluster"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClusterMember"))) { #optional property not found
            $ClusterMember = $null
        } else {
            $ClusterMember = $JsonParameters.PSobject.Properties["ClusterMember"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PhysicalServer"))) { #optional property not found
            $PhysicalServer = $null
        } else {
            $PhysicalServer = $JsonParameters.PSobject.Properties["PhysicalServer"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AccountMoid" = ${AccountMoid}
            "CreateTime" = ${CreateTime}
            "DomainGroupMoid" = ${DomainGroupMoid}
            "ModTime" = ${ModTime}
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "SharedScope" = ${SharedScope}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "_0_ClusterReplicationNetworkPolicy" = ${Var0ClusterReplicationNetworkPolicy}
            "Ancestors" = ${Ancestors}
            "Parent" = ${Parent}
            "PermissionResources" = ${PermissionResources}
            "DisplayNames" = ${DisplayNames}
            "RegisteredDevice" = ${RegisteredDevice}
            "CpuInfo" = ${CpuInfo}
            "HardwareInfo" = ${HardwareInfo}
            "HypervisorType" = ${HypervisorType}
            "Identity" = ${Identity}
            "MaintenanceMode" = ${MaintenanceMode}
            "MemoryCapacity" = ${MemoryCapacity}
            "Model" = ${Model}
            "Name" = ${Name}
            "ProcessorCapacity" = ${ProcessorCapacity}
            "ProductInfo" = ${ProductInfo}
            "Serial" = ${Serial}
            "Status" = ${Status}
            "UpTime" = ${UpTime}
            "Uuid" = ${Uuid}
            "Vendor" = ${Vendor}
            "Age" = ${Age}
            "ClusterUuid" = ${ClusterUuid}
            "FailureReason" = ${FailureReason}
            "HwPowerState" = ${HwPowerState}
            "InternalIpAddress" = ${InternalIpAddress}
            "ManagementIpAddress" = ${ManagementIpAddress}
            "MasterRole" = ${MasterRole}
            "Version" = ${Version}
            "Cluster" = ${Cluster}
            "ClusterMember" = ${ClusterMember}
            "PhysicalServer" = ${PhysicalServer}
        }

        return $PSO
    }

}

