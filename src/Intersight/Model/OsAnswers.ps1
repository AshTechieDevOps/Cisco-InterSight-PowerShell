#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

This MO captures the values for the most common set of fields in OS specific answer files. The values provided in this MO are used to construct the OS specific answer files (kickstart, seed, unattended xml) by replacing the fields/placeholders in selected os.ConfigurationFile content with the values of this MO properties.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER AnswerFile
If the source of the answers is a static file, the content of the file is stored as value in this property. The value is mandatory only when the 'Source' property has been set to 'File'.
.PARAMETER Hostname
Hostname to be configured for the server in the OS.
.PARAMETER IpConfigType
IP configuration type. Values are Static or Dynamic configuration of IP. In case of static IP configuration, IP address, gateway and other details need to be populated. In case of dynamic the IP configuration is obtained dynamically from DHCP. * `static` - In case of static IP configuraton, provide the details such as IP address, netmask, and gateway. * `DHCP` - In case of dynamic IP configuration, the IP address, netmask and gateway detailsare obtained from DHCP.
.PARAMETER IpConfiguration
No description available.
.PARAMETER IsRootPasswordCrypted
Enable to indicate Root Password provided is encrypted.
.PARAMETER Nameserver
IP address of the name server to be configured in the OS.
.PARAMETER ProductKey
The product key to be used for a specific version of Windows installation.
.PARAMETER RootPassword
Password configured for the root / administrator user in the OS. You can enter a plain text or an encrypted password. Intersight encrypts the plaintext password. Enable the Encrypted Password option to provide an encrypted password. For more details on encrypting passwords, see Help Center.
.PARAMETER Source
Answer values can be provided from three sources - Embedded in OS image, static file, or as placeholder values for an answer file template. Source of the answers is given as value, Embedded/File/Template. 'Embedded' option indicates that the answer file is embedded within the OS Image. 'File' option indicates that the answers are provided as a file. 'Template' indicates that the placeholders in the selected os.ConfigurationFile MO are replaced with values provided as os.Answers MO. * `None` - Indicates that answers is not sent and values must be populated from Install Template.   * `Embedded` - Indicates that the answer file is embedded within OS image. * `File` - Indicates that the answer file is a static content that has all thevalues populated. * `Template` - Indicates that the given answers are used to populate the answer filetemplate. The template allows the users to refer some server specificanswers as fields/placeholders and replace these placeholders with theactual values for each Server during OS installation using 'Answers' and'AdditionalParameters' properties in os.Install MO.The answer file templates can be created by users as os.ConfigurationFile objects.
.OUTPUTS

OsAnswers<PSCustomObject>
#>

function Initialize-IntersightOsAnswers {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("os.Answers")]
        [String]
        ${ClassId} = "os.Answers",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("os.Answers")]
        [String]
        ${ObjectType} = "os.Answers",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AnswerFile},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("static", "DHCP")]
        [String]
        ${IpConfigType} = "static",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IpConfiguration},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsRootPasswordCrypted},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nameserver},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProductKey},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RootPassword},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("None", "Embedded", "File", "Template")]
        [String]
        ${Source} = "None"
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightOsAnswers' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AnswerFile" = ${AnswerFile}
            "Hostname" = ${Hostname}
            "IpConfigType" = ${IpConfigType}
            "IpConfiguration" = ${IpConfiguration}
            "IsRootPasswordCrypted" = ${IsRootPasswordCrypted}
            "Nameserver" = ${Nameserver}
            "ProductKey" = ${ProductKey}
            "RootPassword" = ${RootPassword}
            "Source" = ${Source}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OsAnswers<PSCustomObject>

.DESCRIPTION

Convert from JSON to OsAnswers<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OsAnswers<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToOsAnswers {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightOsAnswers' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightOsAnswers
        $AllProperties = ("ClassId", "ObjectType", "AnswerFile", "Hostname", "IpConfigType", "IpConfiguration", "IsAnswerFileSet", "IsRootPasswordCrypted", "IsRootPasswordSet", "Nameserver", "ProductKey", "RootPassword", "Source")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AnswerFile"))) { #optional property not found
            $AnswerFile = $null
        } else {
            $AnswerFile = $JsonParameters.PSobject.Properties["AnswerFile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Hostname"))) { #optional property not found
            $Hostname = $null
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["Hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IpConfigType"))) { #optional property not found
            $IpConfigType = $null
        } else {
            $IpConfigType = $JsonParameters.PSobject.Properties["IpConfigType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IpConfiguration"))) { #optional property not found
            $IpConfiguration = $null
        } else {
            $IpConfiguration = $JsonParameters.PSobject.Properties["IpConfiguration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IsAnswerFileSet"))) { #optional property not found
            $IsAnswerFileSet = $null
        } else {
            $IsAnswerFileSet = $JsonParameters.PSobject.Properties["IsAnswerFileSet"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IsRootPasswordCrypted"))) { #optional property not found
            $IsRootPasswordCrypted = $null
        } else {
            $IsRootPasswordCrypted = $JsonParameters.PSobject.Properties["IsRootPasswordCrypted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IsRootPasswordSet"))) { #optional property not found
            $IsRootPasswordSet = $null
        } else {
            $IsRootPasswordSet = $JsonParameters.PSobject.Properties["IsRootPasswordSet"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Nameserver"))) { #optional property not found
            $Nameserver = $null
        } else {
            $Nameserver = $JsonParameters.PSobject.Properties["Nameserver"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ProductKey"))) { #optional property not found
            $ProductKey = $null
        } else {
            $ProductKey = $JsonParameters.PSobject.Properties["ProductKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RootPassword"))) { #optional property not found
            $RootPassword = $null
        } else {
            $RootPassword = $JsonParameters.PSobject.Properties["RootPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["Source"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AnswerFile" = ${AnswerFile}
            "Hostname" = ${Hostname}
            "IpConfigType" = ${IpConfigType}
            "IpConfiguration" = ${IpConfiguration}
            "IsAnswerFileSet" = ${IsAnswerFileSet}
            "IsRootPasswordCrypted" = ${IsRootPasswordCrypted}
            "IsRootPasswordSet" = ${IsRootPasswordSet}
            "Nameserver" = ${Nameserver}
            "ProductKey" = ${ProductKey}
            "RootPassword" = ${RootPassword}
            "Source" = ${Source}
        }

        return $PSO
    }

}

