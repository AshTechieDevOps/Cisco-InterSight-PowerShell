#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'content.BaseParameter', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
.PARAMETER AcceptSingleValue
The flag that allows single values in content to be extracted as a single element collection in case the parameter is of Collection type. This flag is applicable for parameters of type Collection only.
.PARAMETER ComplexType
The name of the complex type definition in case this is a complex parameter. The content.Grammar object must have a complex type, content.ComplexType, defined with the specified name in types collection property.
.PARAMETER ItemType
The type of the collection item in case this is a collection parameter. * `simple` - The parameter value to be extracted is of the type simple. All the common scalar typessuch as int, bool, string, etc are represented by the simple enum. * `string` - The parameter value to be extracted is of the string type. * `integer` - The parameter value to be extracted is of the number type. * `float` - The parameter value to be extracted is of the float number type. * `boolean` - The parameter value to be extracted is of the boolean type. * `json` - The parameter values to be extracted is of the generic JSON literal. JSON type is applicable only if the content to be parsed is of JSON type. * `complex` - The parameter value to be extracted is a complex parameter that itself isanother collection of simple/complex parameters. * `collection` - The parameter value to be extracted is a collection parameter whose item typeshall be either simple type or complex type.
.PARAMETER Name
The name of the parameter.
.PARAMETER Path
The content specific path information that identifies the parameter value within the content. The value is usually a XPath or JSONPath or a regular expression in case of text content.
.PARAMETER Type
The type of the parameter. Accepted values are simple, complex, collection. * `simple` - The parameter value to be extracted is of the type simple. All the common scalar typessuch as int, bool, string, etc are represented by the simple enum. * `string` - The parameter value to be extracted is of the string type. * `integer` - The parameter value to be extracted is of the number type. * `float` - The parameter value to be extracted is of the float number type. * `boolean` - The parameter value to be extracted is of the boolean type. * `json` - The parameter values to be extracted is of the generic JSON literal. JSON type is applicable only if the content to be parsed is of JSON type. * `complex` - The parameter value to be extracted is a complex parameter that itself isanother collection of simple/complex parameters. * `collection` - The parameter value to be extracted is a collection parameter whose item typeshall be either simple type or complex type.
.OUTPUTS

ContentBaseParameterAllOf<PSCustomObject>
#>

function Initialize-IntersightContentBaseParameterAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("content.Parameter", "content.TextParameter")]
        [String]
        ${ClassId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("content.Parameter", "content.TextParameter")]
        [String]
        ${ObjectType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AcceptSingleValue},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ComplexType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("simple", "string", "integer", "float", "boolean", "json", "complex", "collection")]
        [String]
        ${ItemType} = "simple",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9_.:-]{1,64}$")]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Path},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("simple", "string", "integer", "float", "boolean", "json", "complex", "collection")]
        [String]
        ${Type} = "simple"
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightContentBaseParameterAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AcceptSingleValue" = ${AcceptSingleValue}
            "ComplexType" = ${ComplexType}
            "ItemType" = ${ItemType}
            "Name" = ${Name}
            "Path" = ${Path}
            "Type" = ${Type}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ContentBaseParameterAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to ContentBaseParameterAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ContentBaseParameterAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToContentBaseParameterAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightContentBaseParameterAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightContentBaseParameterAllOf
        $AllProperties = ("ClassId", "ObjectType", "AcceptSingleValue", "ComplexType", "ItemType", "Name", "Path", "Type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AcceptSingleValue"))) { #optional property not found
            $AcceptSingleValue = $null
        } else {
            $AcceptSingleValue = $JsonParameters.PSobject.Properties["AcceptSingleValue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ComplexType"))) { #optional property not found
            $ComplexType = $null
        } else {
            $ComplexType = $JsonParameters.PSobject.Properties["ComplexType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ItemType"))) { #optional property not found
            $ItemType = $null
        } else {
            $ItemType = $JsonParameters.PSobject.Properties["ItemType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Path"))) { #optional property not found
            $Path = $null
        } else {
            $Path = $JsonParameters.PSobject.Properties["Path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["Type"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AcceptSingleValue" = ${AcceptSingleValue}
            "ComplexType" = ${ComplexType}
            "ItemType" = ${ItemType}
            "Name" = ${Name}
            "Path" = ${Path}
            "Type" = ${Type}
        }

        return $PSO
    }

}

