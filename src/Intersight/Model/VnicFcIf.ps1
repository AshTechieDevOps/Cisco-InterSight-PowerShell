#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-12-08T20:53:20Z.
# Version: 1.0.9-2908
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Virtual Fibre Channel Interface.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER Moid
The unique identifier of this Managed Object instance.
.PARAMETER Owners
No description available.
.PARAMETER Tags
No description available.
.PARAMETER VersionContext
No description available.
.PARAMETER Parent
No description available.
.PARAMETER Name
Name of the virtual fibre channel interface.
.PARAMETER Order
The order in which the virtual interface is brought up. The order assigned to an interface should be unique for all the Ethernet and Fibre-Channel interfaces on each PCI link on a VIC adapter. The maximum value of PCI order is limited by the number of virtual interfaces (Ethernet and Fibre-Channel) on each PCI link on a VIC adapter. All VIC adapters have a single PCI link except VIC 1385 which has two.
.PARAMETER PersistentBindings
Enables retention of LUN ID associations in memory until they are manually cleared.
.PARAMETER Placement
No description available.
.PARAMETER Type
VHBA Type configuration for SAN Connectivity Policy. This configuration is supported only on Cisco VIC 14XX series and higher series of adapters. * `fc-initiator` - The default value set for vHBA Type Configuration. Fc-initiator specifies vHBA as a consumer of storage. Enables SCSI commands to transfer data and status information between host and target storage systems. * `fc-nvme-initiator` - Fc-nvme-initiator specifies vHBA as a consumer of storage. Enables NVMe-based message commands to transfer data and status information between host and target storage systems. * `fc-nvme-target` - Fc-nvme-target specifies vHBA as a provider of storage volumes to initiators. Enables NVMe-based message commands to transfer data and status information between host and target storage systems. Currently tech-preview, only enabled with an asynchronous driver. * `fc-target` - Fc-target specifies vHBA as a provider of storage volumes to initiators. Enables SCSI commands to transfer data and status information between host and target storage systems. fc-target is enabled only with an asynchronous driver.
.PARAMETER FcAdapterPolicy
No description available.
.PARAMETER FcNetworkPolicy
No description available.
.PARAMETER FcQosPolicy
No description available.
.PARAMETER VarProfile
No description available.
.PARAMETER SanConnectivityPolicy
No description available.
.PARAMETER ScpVhba
No description available.
.PARAMETER SpVhbas
An array of relationships to vnicFcIf resources.
.PARAMETER WwpnLease
No description available.
.PARAMETER WwpnPool
No description available.
.OUTPUTS

VnicFcIf<PSCustomObject>
#>

function Initialize-IntersightVnicFcIf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("vnic.FcIf")]
        [String]
        ${ClassId} = "vnic.FcIf",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("vnic.FcIf")]
        [String]
        ${ObjectType} = "vnic.FcIf",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Moid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Owners},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VersionContext},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9\-\._:]+$")]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Order},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PersistentBindings},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Placement},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("fc-initiator", "fc-nvme-initiator", "fc-nvme-target", "fc-target")]
        [String]
        ${Type} = "fc-initiator",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FcAdapterPolicy},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FcNetworkPolicy},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FcQosPolicy},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarProfile},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SanConnectivityPolicy},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ScpVhba},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SpVhbas},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WwpnLease},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WwpnPool}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightVnicFcIf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        if (!$Name -and $Name.length -gt 31) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 31."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Parent" = ${Parent}
            "Name" = ${Name}
            "Order" = ${Order}
            "PersistentBindings" = ${PersistentBindings}
            "Placement" = ${Placement}
            "Type" = ${Type}
            "FcAdapterPolicy" = ${FcAdapterPolicy}
            "FcNetworkPolicy" = ${FcNetworkPolicy}
            "FcQosPolicy" = ${FcQosPolicy}
            "Profile" = ${VarProfile}
            "SanConnectivityPolicy" = ${SanConnectivityPolicy}
            "ScpVhba" = ${ScpVhba}
            "SpVhbas" = ${SpVhbas}
            "WwpnLease" = ${WwpnLease}
            "WwpnPool" = ${WwpnPool}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VnicFcIf<PSCustomObject>

.DESCRIPTION

Convert from JSON to VnicFcIf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VnicFcIf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToVnicFcIf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightVnicFcIf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightVnicFcIf
        $AllProperties = ("ClassId", "ObjectType", "AccountMoid", "CreateTime", "DomainGroupMoid", "ModTime", "Moid", "Owners", "SharedScope", "Tags", "VersionContext", "Ancestors", "Parent", "PermissionResources", "DisplayNames", "Name", "Order", "PersistentBindings", "Placement", "Type", "VifId", "Wwpn", "FcAdapterPolicy", "FcNetworkPolicy", "FcQosPolicy", "Profile", "SanConnectivityPolicy", "ScpVhba", "SpVhbas", "WwpnLease", "WwpnPool")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "AccountMoid"))) { #optional property not found
            $AccountMoid = $null
        } else {
            $AccountMoid = $JsonParameters.PSobject.Properties["AccountMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "CreateTime"))) { #optional property not found
            $CreateTime = $null
        } else {
            $CreateTime = $JsonParameters.PSobject.Properties["CreateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DomainGroupMoid"))) { #optional property not found
            $DomainGroupMoid = $null
        } else {
            $DomainGroupMoid = $JsonParameters.PSobject.Properties["DomainGroupMoid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ModTime"))) { #optional property not found
            $ModTime = $null
        } else {
            $ModTime = $JsonParameters.PSobject.Properties["ModTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Moid"))) { #optional property not found
            $Moid = $null
        } else {
            $Moid = $JsonParameters.PSobject.Properties["Moid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Owners"))) { #optional property not found
            $Owners = $null
        } else {
            $Owners = $JsonParameters.PSobject.Properties["Owners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SharedScope"))) { #optional property not found
            $SharedScope = $null
        } else {
            $SharedScope = $JsonParameters.PSobject.Properties["SharedScope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["Tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VersionContext"))) { #optional property not found
            $VersionContext = $null
        } else {
            $VersionContext = $JsonParameters.PSobject.Properties["VersionContext"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Ancestors"))) { #optional property not found
            $Ancestors = $null
        } else {
            $Ancestors = $JsonParameters.PSobject.Properties["Ancestors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["Parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PermissionResources"))) { #optional property not found
            $PermissionResources = $null
        } else {
            $PermissionResources = $JsonParameters.PSobject.Properties["PermissionResources"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DisplayNames"))) { #optional property not found
            $DisplayNames = $null
        } else {
            $DisplayNames = $JsonParameters.PSobject.Properties["DisplayNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Order"))) { #optional property not found
            $Order = $null
        } else {
            $Order = $JsonParameters.PSobject.Properties["Order"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PersistentBindings"))) { #optional property not found
            $PersistentBindings = $null
        } else {
            $PersistentBindings = $JsonParameters.PSobject.Properties["PersistentBindings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Placement"))) { #optional property not found
            $Placement = $null
        } else {
            $Placement = $JsonParameters.PSobject.Properties["Placement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["Type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VifId"))) { #optional property not found
            $VifId = $null
        } else {
            $VifId = $JsonParameters.PSobject.Properties["VifId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Wwpn"))) { #optional property not found
            $Wwpn = $null
        } else {
            $Wwpn = $JsonParameters.PSobject.Properties["Wwpn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FcAdapterPolicy"))) { #optional property not found
            $FcAdapterPolicy = $null
        } else {
            $FcAdapterPolicy = $JsonParameters.PSobject.Properties["FcAdapterPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FcNetworkPolicy"))) { #optional property not found
            $FcNetworkPolicy = $null
        } else {
            $FcNetworkPolicy = $JsonParameters.PSobject.Properties["FcNetworkPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "FcQosPolicy"))) { #optional property not found
            $FcQosPolicy = $null
        } else {
            $FcQosPolicy = $JsonParameters.PSobject.Properties["FcQosPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Profile"))) { #optional property not found
            $VarProfile = $null
        } else {
            $VarProfile = $JsonParameters.PSobject.Properties["Profile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SanConnectivityPolicy"))) { #optional property not found
            $SanConnectivityPolicy = $null
        } else {
            $SanConnectivityPolicy = $JsonParameters.PSobject.Properties["SanConnectivityPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ScpVhba"))) { #optional property not found
            $ScpVhba = $null
        } else {
            $ScpVhba = $JsonParameters.PSobject.Properties["ScpVhba"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SpVhbas"))) { #optional property not found
            $SpVhbas = $null
        } else {
            $SpVhbas = $JsonParameters.PSobject.Properties["SpVhbas"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "WwpnLease"))) { #optional property not found
            $WwpnLease = $null
        } else {
            $WwpnLease = $JsonParameters.PSobject.Properties["WwpnLease"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "WwpnPool"))) { #optional property not found
            $WwpnPool = $null
        } else {
            $WwpnPool = $JsonParameters.PSobject.Properties["WwpnPool"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "AccountMoid" = ${AccountMoid}
            "CreateTime" = ${CreateTime}
            "DomainGroupMoid" = ${DomainGroupMoid}
            "ModTime" = ${ModTime}
            "Moid" = ${Moid}
            "Owners" = ${Owners}
            "SharedScope" = ${SharedScope}
            "Tags" = ${Tags}
            "VersionContext" = ${VersionContext}
            "Ancestors" = ${Ancestors}
            "Parent" = ${Parent}
            "PermissionResources" = ${PermissionResources}
            "DisplayNames" = ${DisplayNames}
            "Name" = ${Name}
            "Order" = ${Order}
            "PersistentBindings" = ${PersistentBindings}
            "Placement" = ${Placement}
            "Type" = ${Type}
            "VifId" = ${VifId}
            "Wwpn" = ${Wwpn}
            "FcAdapterPolicy" = ${FcAdapterPolicy}
            "FcNetworkPolicy" = ${FcNetworkPolicy}
            "FcQosPolicy" = ${FcQosPolicy}
            "Profile" = ${VarProfile}
            "SanConnectivityPolicy" = ${SanConnectivityPolicy}
            "ScpVhba" = ${ScpVhba}
            "SpVhbas" = ${SpVhbas}
            "WwpnLease" = ${WwpnLease}
            "WwpnPool" = ${WwpnPool}
        }

        return $PSO
    }

}

