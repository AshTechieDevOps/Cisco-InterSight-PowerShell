#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'iam.ApiKey', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER HashAlgorithm
The cryptographic hash algorithm to calculate the message digest. * `SHA256` - The SHA-256 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA384` - The SHA-384 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512` - The SHA-512 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512_224` - The SHA-512/224 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512_256` - The SHA-512/256 cryptographic hash, as defined by NIST in FIPS 180-4.
.PARAMETER KeySpec
No description available.
.PARAMETER PrivateKey
Holds the private key for the API key.
.PARAMETER Purpose
The purpose of the API Key.
.PARAMETER SigningAlgorithm
The signing algorithm used by the client to authenticate API requests to Intersight. The signing algorithm must be compatible with the key generation specification. * `RSASSA-PKCS1-v1_5` - RSASSA-PKCS1-v1_5 is a RSA signature scheme specified in [RFC 8017](https://tools.ietf.org/html/rfc8017).RSASSA-PKCS1-v1_5 is included only for compatibility with existing applications. * `RSASSA-PSS` - RSASSA-PSS is a RSA signature scheme specified in [RFC 8017](https://tools.ietf.org/html/rfc8017).It combines the RSASP1 and RSAVP1 primitives with the EMSA-PSS encoding method.In the interest of increased robustness, RSASSA-PSS is required in new applications. * `Ed25519` - The Ed25519 signature algorithm, as specified in [RFC 8032](https://tools.ietf.org/html/rfc8032).Ed25519 is a public-key signature system with several attractive features, includingfast single-signature verification, very fast signing, fast key generation and high security level. * `Ecdsa` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by NIST in FIPS 186-4 and ANSI X9.62.The signature is encoded as a ASN.1 DER SEQUENCE with two INTEGERs (r and s), as defined in RFC3279.When using ECDSA signatures, configure the client to use the same signature encoding as specified on the server side. * `EcdsaP1363Format` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by NIST in FIPS 186-4 and ANSI X9.62.The signature is the raw concatenation of r and s, as defined in the ISO/IEC 7816-8 IEEE P.1363 standard.In that format, r and s are represented as unsigned, big endian numbers.Extra padding bytes (of value 0x00) is applied so that both r and s encodings have the same size.When using ECDSA signatures, configure the client to use the same signature encoding as specified on the server side.
.PARAMETER Permission
No description available.
.PARAMETER User
No description available.
.OUTPUTS

IamApiKeyAllOf<PSCustomObject>
#>

function Initialize-IntersightIamApiKeyAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("iam.ApiKey")]
        [String]
        ${ClassId} = "iam.ApiKey",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("iam.ApiKey")]
        [String]
        ${ObjectType} = "iam.ApiKey",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("SHA256", "SHA384", "SHA512", "SHA512_224", "SHA512_256")]
        [String]
        ${HashAlgorithm} = "SHA256",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${KeySpec},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrivateKey},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Purpose},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("RSASSA-PKCS1-v1_5", "RSASSA-PSS", "Ed25519", "Ecdsa", "EcdsaP1363Format")]
        [String]
        ${SigningAlgorithm} = "RSASSA-PKCS1-v1_5",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Permission},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${User}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightIamApiKeyAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "HashAlgorithm" = ${HashAlgorithm}
            "KeySpec" = ${KeySpec}
            "PrivateKey" = ${PrivateKey}
            "Purpose" = ${Purpose}
            "SigningAlgorithm" = ${SigningAlgorithm}
            "Permission" = ${Permission}
            "User" = ${User}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IamApiKeyAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to IamApiKeyAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IamApiKeyAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToIamApiKeyAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightIamApiKeyAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightIamApiKeyAllOf
        $AllProperties = ("ClassId", "ObjectType", "HashAlgorithm", "KeySpec", "PrivateKey", "Purpose", "SigningAlgorithm", "Permission", "User")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "HashAlgorithm"))) { #optional property not found
            $HashAlgorithm = $null
        } else {
            $HashAlgorithm = $JsonParameters.PSobject.Properties["HashAlgorithm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "KeySpec"))) { #optional property not found
            $KeySpec = $null
        } else {
            $KeySpec = $JsonParameters.PSobject.Properties["KeySpec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PrivateKey"))) { #optional property not found
            $PrivateKey = $null
        } else {
            $PrivateKey = $JsonParameters.PSobject.Properties["PrivateKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Purpose"))) { #optional property not found
            $Purpose = $null
        } else {
            $Purpose = $JsonParameters.PSobject.Properties["Purpose"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SigningAlgorithm"))) { #optional property not found
            $SigningAlgorithm = $null
        } else {
            $SigningAlgorithm = $JsonParameters.PSobject.Properties["SigningAlgorithm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Permission"))) { #optional property not found
            $Permission = $null
        } else {
            $Permission = $JsonParameters.PSobject.Properties["Permission"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "User"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["User"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "HashAlgorithm" = ${HashAlgorithm}
            "KeySpec" = ${KeySpec}
            "PrivateKey" = ${PrivateKey}
            "Purpose" = ${Purpose}
            "SigningAlgorithm" = ${SigningAlgorithm}
            "Permission" = ${Permission}
            "User" = ${User}
        }

        return $PSO
    }

}

