#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'connector.SshMessage', excluding properties defined in parent classes.

.PARAMETER ExpectPrompts
No description available.
.PARAMETER MsgType
The operation to execute on a new or existing session.
.PARAMETER SessionId
Unique id of session to route messages to.
.PARAMETER ShellPrompt
The regex of the secure shell prompt.
.PARAMETER Stream
Input to the SSH operation to be executed. e.g. file contents to write.
.PARAMETER Timeout
The timeout for the ssh command to complete and exit after starting or receiving input. If timeout is not set a default of 10 minutes will be used.
.OUTPUTS

ConnectorSshMessageAllOf<PSCustomObject>
#>

function Initialize-IntersightConnectorSshMessageAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ExpectPrompts},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MsgType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SessionId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShellPrompt},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Stream},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Timeout}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightConnectorSshMessageAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        
        $PSO = [PSCustomObject]@{
            "ExpectPrompts" = ${ExpectPrompts}
            "MsgType" = ${MsgType}
            "SessionId" = ${SessionId}
            "ShellPrompt" = ${ShellPrompt}
            "Stream" = ${Stream}
            "Timeout" = ${Timeout}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConnectorSshMessageAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConnectorSshMessageAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConnectorSshMessageAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToConnectorSshMessageAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightConnectorSshMessageAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightConnectorSshMessageAllOf
        $AllProperties = ("ExpectPrompts", "MsgType", "SessionId", "ShellPrompt", "Stream", "Timeout")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ExpectPrompts"))) { #optional property not found
            $ExpectPrompts = $null
        } else {
            $ExpectPrompts = $JsonParameters.PSobject.Properties["ExpectPrompts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MsgType"))) { #optional property not found
            $MsgType = $null
        } else {
            $MsgType = $JsonParameters.PSobject.Properties["MsgType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "SessionId"))) { #optional property not found
            $SessionId = $null
        } else {
            $SessionId = $JsonParameters.PSobject.Properties["SessionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ShellPrompt"))) { #optional property not found
            $ShellPrompt = $null
        } else {
            $ShellPrompt = $JsonParameters.PSobject.Properties["ShellPrompt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Stream"))) { #optional property not found
            $Stream = $null
        } else {
            $Stream = $JsonParameters.PSobject.Properties["Stream"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Timeout"))) { #optional property not found
            $Timeout = $null
        } else {
            $Timeout = $JsonParameters.PSobject.Properties["Timeout"].value
        }

        $PSO = [PSCustomObject]@{
            "ExpectPrompts" = ${ExpectPrompts}
            "MsgType" = ${MsgType}
            "SessionId" = ${SessionId}
            "ShellPrompt" = ${ShellPrompt}
            "Stream" = ${Stream}
            "Timeout" = ${Timeout}
        }

        return $PSO
    }

}

