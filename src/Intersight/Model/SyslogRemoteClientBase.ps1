#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-12-08T20:53:20Z.
# Version: 1.0.9-2908
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Lists properties that are common to all remote logging clients. It serves as a base class for all remote logging clients.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data. The enum values provides the list of concrete types that can be instantiated from this abstract type.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property. The enum values provides the list of concrete types that can be instantiated from this abstract type.
.PARAMETER Enabled
Enables/disables remote logging for the endpoint If enabled, log messages will be sent to the syslog server mentioned in the Hostname/IP Address field.
.PARAMETER Hostname
Hostname or IP Address of the syslog server where log should be stored.
.PARAMETER MinSeverity
Lowest level of messages to be included in the remote log. * `warning` - Use logging level warning for logs classified as warning. * `emergency` - Use logging level emergency for logs classified as emergency. * `alert` - Use logging level alert for logs classified as alert. * `critical` - Use logging level critical for logs classified as critical. * `error` - Use logging level error for logs classified as error. * `notice` - Use logging level notice for logs classified as notice. * `informational` - Use logging level informational for logs classified as informational. * `debug` - Use logging level debug for logs classified as debug.
.PARAMETER Port
Port number used for logging on syslog server.
.PARAMETER Protocol
Transport layer protocol for transmission of log messages to syslog server. * `udp` - Use User Datagram Protocol (UDP) for syslog remote server connection. * `tcp` - Use Transmission Control Protocol (TCP) for syslog remote server connection.
.OUTPUTS

SyslogRemoteClientBase<PSCustomObject>
#>

function Initialize-IntersightSyslogRemoteClientBase {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("syslog.RemoteLoggingClient")]
        [String]
        ${ClassId} = "syslog.RemoteLoggingClient",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("syslog.RemoteLoggingClient")]
        [String]
        ${ObjectType} = "syslog.RemoteLoggingClient",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled} = $true,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("warning", "emergency", "alert", "critical", "error", "notice", "informational", "debug")]
        [String]
        ${MinSeverity} = "warning",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Port} = 514,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("udp", "tcp")]
        [String]
        ${Protocol} = "udp"
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightSyslogRemoteClientBase' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        if ($Port -and $Port -gt 65535) {
          throw "invalid value for 'Port', must be smaller than or equal to 65535."
        }

        if ($Port -and $Port -lt 1) {
          throw "invalid value for 'Port', must be greater than or equal to 1."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Enabled" = ${Enabled}
            "Hostname" = ${Hostname}
            "MinSeverity" = ${MinSeverity}
            "Port" = ${Port}
            "Protocol" = ${Protocol}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SyslogRemoteClientBase<PSCustomObject>

.DESCRIPTION

Convert from JSON to SyslogRemoteClientBase<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SyslogRemoteClientBase<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToSyslogRemoteClientBase {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightSyslogRemoteClientBase' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightSyslogRemoteClientBase
        $AllProperties = ("ClassId", "ObjectType", "Enabled", "Hostname", "MinSeverity", "Port", "Protocol")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `ClassId` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property `ClassId` missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property `ObjectType` missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["Enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Hostname"))) { #optional property not found
            $Hostname = $null
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["Hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "MinSeverity"))) { #optional property not found
            $MinSeverity = $null
        } else {
            $MinSeverity = $JsonParameters.PSobject.Properties["MinSeverity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["Port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["Protocol"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Enabled" = ${Enabled}
            "Hostname" = ${Hostname}
            "MinSeverity" = ${MinSeverity}
            "Port" = ${Port}
            "Protocol" = ${Protocol}
        }

        return $PSO
    }

}

