#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2021-02-05T15:05:56Z.
# Version: 1.0.9-3562
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'vnic.FcErrorRecoverySettings', excluding properties defined in parent classes.

.PARAMETER ClassId
The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.
.PARAMETER ObjectType
The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
.PARAMETER Enabled
Enables Fibre Channel Error recovery.
.PARAMETER IoRetryCount
The number of times an I/O request to a port is retried because the port is busy before the system decides the port is unavailable.
.PARAMETER IoRetryTimeout
The number of seconds the adapter waits before aborting the pending command and resending the same IO request.
.PARAMETER LinkDownTimeout
The number of milliseconds the port should actually be down before it is marked down and fabric connectivity is lost.
.PARAMETER PortDownTimeout
The number of milliseconds a remote Fibre Channel port should be offline before informing the SCSI upper layer that the port is unavailable. For a server with a VIC adapter running ESXi, the recommended value is 10000. For a server with a port used to boot a Windows OS from the SAN, the recommended value is 5000 milliseconds.
.OUTPUTS

VnicFcErrorRecoverySettingsAllOf<PSCustomObject>
#>

function Initialize-IntersightVnicFcErrorRecoverySettingsAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("vnic.FcErrorRecoverySettings")]
        [String]
        ${ClassId} = "vnic.FcErrorRecoverySettings",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("vnic.FcErrorRecoverySettings")]
        [String]
        ${ObjectType} = "vnic.FcErrorRecoverySettings",
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IoRetryCount} = 8,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IoRetryTimeout} = 5,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LinkDownTimeout} = 30000,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PortDownTimeout} = 10000
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightVnicFcErrorRecoverySettingsAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClassId) {
            throw "invalid value for 'ClassId', 'ClassId' cannot be null."
        }

        if (!$ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        if ($IoRetryCount -and $IoRetryCount -gt 255) {
          throw "invalid value for 'IoRetryCount', must be smaller than or equal to 255."
        }

        if ($IoRetryCount -and $IoRetryCount -lt 0) {
          throw "invalid value for 'IoRetryCount', must be greater than or equal to 0."
        }

        if ($IoRetryTimeout -and $IoRetryTimeout -gt 59) {
          throw "invalid value for 'IoRetryTimeout', must be smaller than or equal to 59."
        }

        if ($IoRetryTimeout -and $IoRetryTimeout -lt 1) {
          throw "invalid value for 'IoRetryTimeout', must be greater than or equal to 1."
        }

        if ($LinkDownTimeout -and $LinkDownTimeout -gt 240000) {
          throw "invalid value for 'LinkDownTimeout', must be smaller than or equal to 240000."
        }

        if ($LinkDownTimeout -and $LinkDownTimeout -lt 0) {
          throw "invalid value for 'LinkDownTimeout', must be greater than or equal to 0."
        }

        if ($PortDownTimeout -and $PortDownTimeout -gt 240000) {
          throw "invalid value for 'PortDownTimeout', must be smaller than or equal to 240000."
        }

        if ($PortDownTimeout -and $PortDownTimeout -lt 0) {
          throw "invalid value for 'PortDownTimeout', must be greater than or equal to 0."
        }

        
        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Enabled" = ${Enabled}
            "IoRetryCount" = ${IoRetryCount}
            "IoRetryTimeout" = ${IoRetryTimeout}
            "LinkDownTimeout" = ${LinkDownTimeout}
            "PortDownTimeout" = ${PortDownTimeout}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VnicFcErrorRecoverySettingsAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to VnicFcErrorRecoverySettingsAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VnicFcErrorRecoverySettingsAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToVnicFcErrorRecoverySettingsAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightVnicFcErrorRecoverySettingsAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightVnicFcErrorRecoverySettingsAllOf
        $AllProperties = ("ClassId", "ObjectType", "Enabled", "IoRetryCount", "IoRetryTimeout", "LinkDownTimeout", "PortDownTimeout")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ClassId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ClassId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ClassId' missing."
        } else {
            $ClassId = $JsonParameters.PSobject.Properties["ClassId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ObjectType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ObjectType' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["ObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["Enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IoRetryCount"))) { #optional property not found
            $IoRetryCount = $null
        } else {
            $IoRetryCount = $JsonParameters.PSobject.Properties["IoRetryCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "IoRetryTimeout"))) { #optional property not found
            $IoRetryTimeout = $null
        } else {
            $IoRetryTimeout = $JsonParameters.PSobject.Properties["IoRetryTimeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LinkDownTimeout"))) { #optional property not found
            $LinkDownTimeout = $null
        } else {
            $LinkDownTimeout = $JsonParameters.PSobject.Properties["LinkDownTimeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PortDownTimeout"))) { #optional property not found
            $PortDownTimeout = $null
        } else {
            $PortDownTimeout = $JsonParameters.PSobject.Properties["PortDownTimeout"].value
        }

        $PSO = [PSCustomObject]@{
            "ClassId" = ${ClassId}
            "ObjectType" = ${ObjectType}
            "Enabled" = ${Enabled}
            "IoRetryCount" = ${IoRetryCount}
            "IoRetryTimeout" = ${IoRetryTimeout}
            "LinkDownTimeout" = ${LinkDownTimeout}
            "PortDownTimeout" = ${PortDownTimeout}
        }

        return $PSO
    }

}

