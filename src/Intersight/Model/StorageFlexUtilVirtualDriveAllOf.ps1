#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-16T08:45:19Z.
# Version: 1.0.9-2020
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Definition of the list of properties defined in 'storage.FlexUtilVirtualDrive', excluding properties defined in parent classes.

.PARAMETER DriveStatus
Status of the Flex Util virtual drive.
.PARAMETER DriveType
Type of virtual drive managed by flex util controller.
.PARAMETER PartitionId
Disk Partition Id of virtual drive managed by flex util controller.
.PARAMETER PartitionName
Partition name of the Flex Util virtual drive.
.PARAMETER ResidentImage
The resident image on the flex util virtual Drive.
.PARAMETER Size
Size of the Flex Util virtual drive.
.PARAMETER VirtualDrive
Virtual drive on the Flex Util controller.
.PARAMETER InventoryDeviceInfo
No description available.
.PARAMETER RegisteredDevice
No description available.
.PARAMETER StorageFlexUtilController
No description available.
.OUTPUTS

StorageFlexUtilVirtualDriveAllOf<PSCustomObject>
#>

function Initialize-IntersightStorageFlexUtilVirtualDriveAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DriveStatus},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DriveType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartitionId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartitionName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResidentImage},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Size},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VirtualDrive},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InventoryDeviceInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RegisteredDevice},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StorageFlexUtilController}
    )

    Process {
        'Creating PSCustomObject: Intersight => IntersightStorageFlexUtilVirtualDriveAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        
        $PSO = [PSCustomObject]@{
            "DriveStatus" = ${DriveStatus}
            "DriveType" = ${DriveType}
            "PartitionId" = ${PartitionId}
            "PartitionName" = ${PartitionName}
            "ResidentImage" = ${ResidentImage}
            "Size" = ${Size}
            "VirtualDrive" = ${VirtualDrive}
            "InventoryDeviceInfo" = ${InventoryDeviceInfo}
            "RegisteredDevice" = ${RegisteredDevice}
            "StorageFlexUtilController" = ${StorageFlexUtilController}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to StorageFlexUtilVirtualDriveAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to StorageFlexUtilVirtualDriveAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

StorageFlexUtilVirtualDriveAllOf<PSCustomObject>
#>
function ConvertFrom-IntersightJsonToStorageFlexUtilVirtualDriveAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Intersight => IntersightStorageFlexUtilVirtualDriveAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntersightStorageFlexUtilVirtualDriveAllOf
        $AllProperties = ("DriveStatus", "DriveType", "PartitionId", "PartitionName", "ResidentImage", "Size", "VirtualDrive", "InventoryDeviceInfo", "RegisteredDevice", "StorageFlexUtilController")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DriveStatus"))) { #optional property not found
            $DriveStatus = $null
        } else {
            $DriveStatus = $JsonParameters.PSobject.Properties["DriveStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "DriveType"))) { #optional property not found
            $DriveType = $null
        } else {
            $DriveType = $JsonParameters.PSobject.Properties["DriveType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PartitionId"))) { #optional property not found
            $PartitionId = $null
        } else {
            $PartitionId = $JsonParameters.PSobject.Properties["PartitionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "PartitionName"))) { #optional property not found
            $PartitionName = $null
        } else {
            $PartitionName = $JsonParameters.PSobject.Properties["PartitionName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ResidentImage"))) { #optional property not found
            $ResidentImage = $null
        } else {
            $ResidentImage = $JsonParameters.PSobject.Properties["ResidentImage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["Size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "VirtualDrive"))) { #optional property not found
            $VirtualDrive = $null
        } else {
            $VirtualDrive = $JsonParameters.PSobject.Properties["VirtualDrive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "InventoryDeviceInfo"))) { #optional property not found
            $InventoryDeviceInfo = $null
        } else {
            $InventoryDeviceInfo = $JsonParameters.PSobject.Properties["InventoryDeviceInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "RegisteredDevice"))) { #optional property not found
            $RegisteredDevice = $null
        } else {
            $RegisteredDevice = $JsonParameters.PSobject.Properties["RegisteredDevice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "StorageFlexUtilController"))) { #optional property not found
            $StorageFlexUtilController = $null
        } else {
            $StorageFlexUtilController = $JsonParameters.PSobject.Properties["StorageFlexUtilController"].value
        }

        $PSO = [PSCustomObject]@{
            "DriveStatus" = ${DriveStatus}
            "DriveType" = ${DriveType}
            "PartitionId" = ${PartitionId}
            "PartitionName" = ${PartitionName}
            "ResidentImage" = ${ResidentImage}
            "Size" = ${Size}
            "VirtualDrive" = ${VirtualDrive}
            "InventoryDeviceInfo" = ${InventoryDeviceInfo}
            "RegisteredDevice" = ${RegisteredDevice}
            "StorageFlexUtilController" = ${StorageFlexUtilController}
        }

        return $PSO
    }

}

