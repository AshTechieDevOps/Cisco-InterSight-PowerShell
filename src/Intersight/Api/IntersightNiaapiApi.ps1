#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-12-08T20:53:20Z.
# Version: 1.0.9-2908
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Read a 'niaapi.ApicCcoPost' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicCcoPost
#>
function Get-IntersightNiaapiApicCcoPostByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicCcoPostByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicCcoPosts/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiApicCcoPostByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicCcoPost" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicCcoPost' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicCcoPostResponse
#>
function Get-IntersightNiaapiApicCcoPostList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicCcoPostList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicCcoPosts'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicCcoPostResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiApicCcoPostResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicFieldNotice' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicFieldNotice
#>
function Get-IntersightNiaapiApicFieldNoticeByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicFieldNoticeByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicFieldNotices/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiApicFieldNoticeByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicFieldNotice" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicFieldNotice' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicFieldNoticeResponse
#>
function Get-IntersightNiaapiApicFieldNoticeList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicFieldNoticeList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicFieldNotices'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicFieldNoticeResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiApicFieldNoticeResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicHweol' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicHweol
#>
function Get-IntersightNiaapiApicHweolByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicHweolByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicHweols/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiApicHweolByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicHweol" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicHweol' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicHweolResponse
#>
function Get-IntersightNiaapiApicHweolList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicHweolList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicHweols'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicHweolResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiApicHweolResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicLatestMaintainedRelease' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicLatestMaintainedRelease
#>
function Get-IntersightNiaapiApicLatestMaintainedReleaseByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicLatestMaintainedReleaseByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicLatestMaintainedReleases/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiApicLatestMaintainedReleaseByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicLatestMaintainedRelease" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicLatestMaintainedRelease' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicLatestMaintainedReleaseResponse
#>
function Get-IntersightNiaapiApicLatestMaintainedReleaseList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicLatestMaintainedReleaseList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicLatestMaintainedReleases'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicLatestMaintainedReleaseResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiApicLatestMaintainedReleaseResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicReleaseRecommend' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicReleaseRecommend
#>
function Get-IntersightNiaapiApicReleaseRecommendByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicReleaseRecommendByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicReleaseRecommends/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiApicReleaseRecommendByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicReleaseRecommend" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicReleaseRecommend' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicReleaseRecommendResponse
#>
function Get-IntersightNiaapiApicReleaseRecommendList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicReleaseRecommendList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicReleaseRecommends'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicReleaseRecommendResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiApicReleaseRecommendResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicSweol' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicSweol
#>
function Get-IntersightNiaapiApicSweolByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicSweolByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicSweols/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiApicSweolByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicSweol" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.ApicSweol' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiApicSweolResponse
#>
function Get-IntersightNiaapiApicSweolList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiApicSweolList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/ApicSweols'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiApicSweolResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiApicSweolResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmCcoPost' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmCcoPost
#>
function Get-IntersightNiaapiDcnmCcoPostByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmCcoPostByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmCcoPosts/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiDcnmCcoPostByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmCcoPost" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmCcoPost' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmCcoPostResponse
#>
function Get-IntersightNiaapiDcnmCcoPostList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmCcoPostList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmCcoPosts'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmCcoPostResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiDcnmCcoPostResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmFieldNotice' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmFieldNotice
#>
function Get-IntersightNiaapiDcnmFieldNoticeByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmFieldNoticeByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmFieldNotices/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiDcnmFieldNoticeByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmFieldNotice" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmFieldNotice' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmFieldNoticeResponse
#>
function Get-IntersightNiaapiDcnmFieldNoticeList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmFieldNoticeList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmFieldNotices'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmFieldNoticeResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiDcnmFieldNoticeResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmHweol' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmHweol
#>
function Get-IntersightNiaapiDcnmHweolByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmHweolByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmHweols/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiDcnmHweolByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmHweol" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmHweol' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmHweolResponse
#>
function Get-IntersightNiaapiDcnmHweolList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmHweolList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmHweols'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmHweolResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiDcnmHweolResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmLatestMaintainedRelease' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmLatestMaintainedRelease
#>
function Get-IntersightNiaapiDcnmLatestMaintainedReleaseByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmLatestMaintainedReleaseByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmLatestMaintainedReleases/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiDcnmLatestMaintainedReleaseByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmLatestMaintainedRelease" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmLatestMaintainedRelease' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmLatestMaintainedReleaseResponse
#>
function Get-IntersightNiaapiDcnmLatestMaintainedReleaseList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmLatestMaintainedReleaseList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmLatestMaintainedReleases'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmLatestMaintainedReleaseResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiDcnmLatestMaintainedReleaseResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmReleaseRecommend' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmReleaseRecommend
#>
function Get-IntersightNiaapiDcnmReleaseRecommendByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmReleaseRecommendByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmReleaseRecommends/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiDcnmReleaseRecommendByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmReleaseRecommend" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmReleaseRecommend' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmReleaseRecommendResponse
#>
function Get-IntersightNiaapiDcnmReleaseRecommendList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmReleaseRecommendList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmReleaseRecommends'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmReleaseRecommendResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiDcnmReleaseRecommendResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmSweol' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmSweol
#>
function Get-IntersightNiaapiDcnmSweolByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmSweolByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmSweols/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiDcnmSweolByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmSweol" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.DcnmSweol' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiDcnmSweolResponse
#>
function Get-IntersightNiaapiDcnmSweolList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiDcnmSweolList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/DcnmSweols'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiDcnmSweolResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiDcnmSweolResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.FileDownloader' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiFileDownloader
#>
function Get-IntersightNiaapiFileDownloaderByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiFileDownloaderByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/FileDownloaders/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiFileDownloaderByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiFileDownloader" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.FileDownloader' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiFileDownloaderResponse
#>
function Get-IntersightNiaapiFileDownloaderList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiFileDownloaderList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/FileDownloaders'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiFileDownloaderResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiFileDownloaderResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.NiaMetadata' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiNiaMetadata
#>
function Get-IntersightNiaapiNiaMetadataByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiNiaMetadataByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/NiaMetadata/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiNiaMetadataByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiNiaMetadata" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.NiaMetadata' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiNiaMetadataResponse
#>
function Get-IntersightNiaapiNiaMetadataList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiNiaMetadataList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/NiaMetadata'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiNiaMetadataResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiNiaMetadataResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.VersionRegex' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiVersionRegex
#>
function Get-IntersightNiaapiVersionRegexByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiVersionRegexByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/VersionRegexes/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getNiaapiVersionRegexByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiVersionRegex" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'niaapi.VersionRegex' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

NiaapiVersionRegexResponse
#>
function Get-IntersightNiaapiVersionRegexList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightNiaapiVersionRegexList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/niaapi/VersionRegexes'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "NiaapiVersionRegexResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToNiaapiVersionRegexResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

