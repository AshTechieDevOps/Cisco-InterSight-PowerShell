#
# Cisco Intersight
# Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-12-08T20:53:20Z.
# Version: 1.0.9-2908
# Contact: intersight@cisco.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Create a 'virtualization.VirtualDisk' resource.

.DESCRIPTION

No description available.

.PARAMETER VirtualizationVirtualDisk
The 'virtualization.VirtualDisk' resource to create.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER IfNoneMatch
For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn't happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource's ETag doesn't match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don't have to be identical byte for byte.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVirtualDisk
#>
function New-IntersightVirtualizationVirtualDisk {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVirtualDisk},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfNoneMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: New-IntersightVirtualizationVirtualDisk' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json')

        $LocalVarUri = '/api/v1/virtualization/VirtualDisks'

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if ($IfNoneMatch) {
            $LocalVarHeaderParameters['If-None-Match'] = $IfNoneMatch
        }

        if (!$VirtualizationVirtualDisk) {
            throw "Error! The required parameter `VirtualizationVirtualDisk` missing when calling createVirtualizationVirtualDisk."
        }

        $LocalVarBodyParameter = $VirtualizationVirtualDisk | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVirtualDisk" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Create a 'virtualization.VirtualMachine' resource.

.DESCRIPTION

No description available.

.PARAMETER VirtualizationVirtualMachine
The 'virtualization.VirtualMachine' resource to create.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER IfNoneMatch
For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn't happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource's ETag doesn't match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don't have to be identical byte for byte.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVirtualMachine
#>
function New-IntersightVirtualizationVirtualMachine {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVirtualMachine},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfNoneMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: New-IntersightVirtualizationVirtualMachine' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json')

        $LocalVarUri = '/api/v1/virtualization/VirtualMachines'

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if ($IfNoneMatch) {
            $LocalVarHeaderParameters['If-None-Match'] = $IfNoneMatch
        }

        if (!$VirtualizationVirtualMachine) {
            throw "Error! The required parameter `VirtualizationVirtualMachine` missing when calling createVirtualizationVirtualMachine."
        }

        $LocalVarBodyParameter = $VirtualizationVirtualMachine | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVirtualMachine" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete a 'virtualization.VirtualDisk' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Remove-IntersightVirtualizationVirtualDisk {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Remove-IntersightVirtualizationVirtualDisk' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/v1/virtualization/VirtualDisks/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling deleteVirtualizationVirtualDisk."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete a 'virtualization.VirtualMachine' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Remove-IntersightVirtualizationVirtualMachine {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Remove-IntersightVirtualizationVirtualMachine' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/v1/virtualization/VirtualMachines/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling deleteVirtualizationVirtualMachine."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.Host' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationHost
#>
function Get-IntersightVirtualizationHostByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationHostByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/Hosts/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getVirtualizationHostByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationHost" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.Host' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationHostResponse
#>
function Get-IntersightVirtualizationHostList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationHostList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/Hosts'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationHostResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToVirtualizationHostResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VirtualDisk' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVirtualDisk
#>
function Get-IntersightVirtualizationVirtualDiskByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVirtualDiskByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VirtualDisks/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getVirtualizationVirtualDiskByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVirtualDisk" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VirtualDisk' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVirtualDiskResponse
#>
function Get-IntersightVirtualizationVirtualDiskList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVirtualDiskList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VirtualDisks'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVirtualDiskResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToVirtualizationVirtualDiskResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VirtualMachine' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVirtualMachine
#>
function Get-IntersightVirtualizationVirtualMachineByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVirtualMachineByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VirtualMachines/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getVirtualizationVirtualMachineByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVirtualMachine" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VirtualMachine' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVirtualMachineResponse
#>
function Get-IntersightVirtualizationVirtualMachineList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVirtualMachineList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VirtualMachines'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVirtualMachineResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToVirtualizationVirtualMachineResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareCluster' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareCluster
#>
function Get-IntersightVirtualizationVmwareClusterByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareClusterByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareClusters/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getVirtualizationVmwareClusterByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareCluster" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareCluster' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareClusterResponse
#>
function Get-IntersightVirtualizationVmwareClusterList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareClusterList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareClusters'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareClusterResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToVirtualizationVmwareClusterResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareDatacenter' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareDatacenter
#>
function Get-IntersightVirtualizationVmwareDatacenterByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareDatacenterByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareDatacenters/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getVirtualizationVmwareDatacenterByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareDatacenter" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareDatacenter' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareDatacenterResponse
#>
function Get-IntersightVirtualizationVmwareDatacenterList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareDatacenterList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareDatacenters'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareDatacenterResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToVirtualizationVmwareDatacenterResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareDatastore' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareDatastore
#>
function Get-IntersightVirtualizationVmwareDatastoreByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareDatastoreByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareDatastores/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getVirtualizationVmwareDatastoreByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareDatastore" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareDatastore' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareDatastoreResponse
#>
function Get-IntersightVirtualizationVmwareDatastoreList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareDatastoreList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareDatastores'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareDatastoreResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToVirtualizationVmwareDatastoreResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareHost' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareHost
#>
function Get-IntersightVirtualizationVmwareHostByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareHostByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareHosts/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getVirtualizationVmwareHostByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareHost" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareHost' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareHostResponse
#>
function Get-IntersightVirtualizationVmwareHostList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareHostList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareHosts'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareHostResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToVirtualizationVmwareHostResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareVcenter' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareVcenter
#>
function Get-IntersightVirtualizationVmwareVcenterByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareVcenterByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareVcenters/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getVirtualizationVmwareVcenterByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareVcenter" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareVcenter' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareVcenterResponse
#>
function Get-IntersightVirtualizationVmwareVcenterList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareVcenterList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareVcenters'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareVcenterResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToVirtualizationVmwareVcenterResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareVirtualMachine' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareVirtualMachine
#>
function Get-IntersightVirtualizationVmwareVirtualMachineByMoid {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareVirtualMachineByMoid' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareVirtualMachines/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling getVirtualizationVmwareVirtualMachineByMoid."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareVirtualMachine" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Read a 'virtualization.VmwareVirtualMachine' resource.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).

.PARAMETER Orderby
Determines what properties are used to sort the collection of resources.

.PARAMETER Top
Specifies the maximum number of resources to return in the response.

.PARAMETER Skip
Specifies the number of resources to skip in the response.

.PARAMETER Select
Specifies a subset of properties to return.

.PARAMETER Expand
Specify additional attributes or related resources to return in addition to the primary resources.

.PARAMETER Apply
Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The ""$apply"" query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are ""aggregate"" and ""groupby"". The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.

.PARAMETER Count
The $count query specifies the service should return the count of the matching resources, instead of returning the resources.

.PARAMETER Inlinecount
The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.

.PARAMETER At
Similar to ""$filter"", but ""at"" is specifically used to filter versioning information properties for resources to return. A URI with an ""at"" Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.

.PARAMETER Tags
The 'tags' parameter is used to request a summary of the Tag utilization for this resource. When the 'tags' parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareVirtualMachineResponse
#>
function Get-IntersightVirtualizationVmwareVirtualMachineList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Orderby},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Top},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Skip},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Select},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Expand},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Apply},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("allpages", "none")]
        [String]
        ${Inlinecount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${At},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Tags},
        [String]
        [ValidateSet("application/json", "text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-IntersightVirtualizationVmwareVirtualMachineList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/api/v1/virtualization/VmwareVirtualMachines'

        if ($VarFilter) {
            $LocalVarQueryParameters['$filter'] = $VarFilter
        }

        if ($Orderby) {
            $LocalVarQueryParameters['$orderby'] = $Orderby
        }

        if ($Top) {
            $LocalVarQueryParameters['$top'] = $Top
        }

        if ($Skip) {
            $LocalVarQueryParameters['$skip'] = $Skip
        }

        if ($Select) {
            $LocalVarQueryParameters['$select'] = $Select
        }

        if ($Expand) {
            $LocalVarQueryParameters['$expand'] = $Expand
        }

        if ($Apply) {
            $LocalVarQueryParameters['$apply'] = $Apply
        }

        if ($Count) {
            $LocalVarQueryParameters['$count'] = $Count
        }

        if ($Inlinecount) {
            $LocalVarQueryParameters['$inlinecount'] = $Inlinecount
        }

        if ($At) {
            $LocalVarQueryParameters['at'] = $At
        }

        if ($Tags) {
            $LocalVarQueryParameters['tags'] = $Tags
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareVirtualMachineResponse" `
                                -IsBodyNullable $false

        # process oneOf response
        $LocalVarResult["Response"] = ConvertFrom-IntersightJsonToVirtualizationVmwareVirtualMachineResponse (ConvertTo-Json $LocalVarResult["Response"] -Depth 100)

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.Host' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationHost
The 'virtualization.Host' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationHost
#>
function Set-IntersightVirtualizationHost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationHost},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Set-IntersightVirtualizationHost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/Hosts/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling patchVirtualizationHost."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationHost) {
            throw "Error! The required parameter `VirtualizationHost` missing when calling patchVirtualizationHost."
        }

        $LocalVarBodyParameter = $VirtualizationHost | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationHost" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VirtualDisk' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVirtualDisk
The 'virtualization.VirtualDisk' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVirtualDisk
#>
function Set-IntersightVirtualizationVirtualDisk {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVirtualDisk},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Set-IntersightVirtualizationVirtualDisk' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VirtualDisks/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling patchVirtualizationVirtualDisk."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVirtualDisk) {
            throw "Error! The required parameter `VirtualizationVirtualDisk` missing when calling patchVirtualizationVirtualDisk."
        }

        $LocalVarBodyParameter = $VirtualizationVirtualDisk | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVirtualDisk" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VirtualMachine' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVirtualMachine
The 'virtualization.VirtualMachine' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVirtualMachine
#>
function Set-IntersightVirtualizationVirtualMachine {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVirtualMachine},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Set-IntersightVirtualizationVirtualMachine' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VirtualMachines/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling patchVirtualizationVirtualMachine."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVirtualMachine) {
            throw "Error! The required parameter `VirtualizationVirtualMachine` missing when calling patchVirtualizationVirtualMachine."
        }

        $LocalVarBodyParameter = $VirtualizationVirtualMachine | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVirtualMachine" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VmwareCluster' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVmwareCluster
The 'virtualization.VmwareCluster' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareCluster
#>
function Set-IntersightVirtualizationVmwareCluster {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVmwareCluster},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Set-IntersightVirtualizationVmwareCluster' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VmwareClusters/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling patchVirtualizationVmwareCluster."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVmwareCluster) {
            throw "Error! The required parameter `VirtualizationVmwareCluster` missing when calling patchVirtualizationVmwareCluster."
        }

        $LocalVarBodyParameter = $VirtualizationVmwareCluster | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareCluster" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VmwareDatacenter' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVmwareDatacenter
The 'virtualization.VmwareDatacenter' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareDatacenter
#>
function Set-IntersightVirtualizationVmwareDatacenter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVmwareDatacenter},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Set-IntersightVirtualizationVmwareDatacenter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VmwareDatacenters/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling patchVirtualizationVmwareDatacenter."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVmwareDatacenter) {
            throw "Error! The required parameter `VirtualizationVmwareDatacenter` missing when calling patchVirtualizationVmwareDatacenter."
        }

        $LocalVarBodyParameter = $VirtualizationVmwareDatacenter | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareDatacenter" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VmwareDatastore' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVmwareDatastore
The 'virtualization.VmwareDatastore' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareDatastore
#>
function Set-IntersightVirtualizationVmwareDatastore {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVmwareDatastore},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Set-IntersightVirtualizationVmwareDatastore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VmwareDatastores/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling patchVirtualizationVmwareDatastore."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVmwareDatastore) {
            throw "Error! The required parameter `VirtualizationVmwareDatastore` missing when calling patchVirtualizationVmwareDatastore."
        }

        $LocalVarBodyParameter = $VirtualizationVmwareDatastore | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareDatastore" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VmwareHost' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVmwareHost
The 'virtualization.VmwareHost' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareHost
#>
function Set-IntersightVirtualizationVmwareHost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVmwareHost},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Set-IntersightVirtualizationVmwareHost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VmwareHosts/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling patchVirtualizationVmwareHost."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVmwareHost) {
            throw "Error! The required parameter `VirtualizationVmwareHost` missing when calling patchVirtualizationVmwareHost."
        }

        $LocalVarBodyParameter = $VirtualizationVmwareHost | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareHost" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VmwareVirtualMachine' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVmwareVirtualMachine
The 'virtualization.VmwareVirtualMachine' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareVirtualMachine
#>
function Set-IntersightVirtualizationVmwareVirtualMachine {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVmwareVirtualMachine},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Set-IntersightVirtualizationVmwareVirtualMachine' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VmwareVirtualMachines/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling patchVirtualizationVmwareVirtualMachine."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVmwareVirtualMachine) {
            throw "Error! The required parameter `VirtualizationVmwareVirtualMachine` missing when calling patchVirtualizationVmwareVirtualMachine."
        }

        $LocalVarBodyParameter = $VirtualizationVmwareVirtualMachine | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareVirtualMachine" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.Host' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationHost
The 'virtualization.Host' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationHost
#>
function Update-IntersightVirtualizationHost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationHost},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Update-IntersightVirtualizationHost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/Hosts/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling updateVirtualizationHost."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationHost) {
            throw "Error! The required parameter `VirtualizationHost` missing when calling updateVirtualizationHost."
        }

        $LocalVarBodyParameter = $VirtualizationHost | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationHost" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VirtualDisk' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVirtualDisk
The 'virtualization.VirtualDisk' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVirtualDisk
#>
function Update-IntersightVirtualizationVirtualDisk {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVirtualDisk},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Update-IntersightVirtualizationVirtualDisk' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VirtualDisks/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling updateVirtualizationVirtualDisk."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVirtualDisk) {
            throw "Error! The required parameter `VirtualizationVirtualDisk` missing when calling updateVirtualizationVirtualDisk."
        }

        $LocalVarBodyParameter = $VirtualizationVirtualDisk | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVirtualDisk" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VirtualMachine' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVirtualMachine
The 'virtualization.VirtualMachine' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVirtualMachine
#>
function Update-IntersightVirtualizationVirtualMachine {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVirtualMachine},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Update-IntersightVirtualizationVirtualMachine' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VirtualMachines/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling updateVirtualizationVirtualMachine."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVirtualMachine) {
            throw "Error! The required parameter `VirtualizationVirtualMachine` missing when calling updateVirtualizationVirtualMachine."
        }

        $LocalVarBodyParameter = $VirtualizationVirtualMachine | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVirtualMachine" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VmwareCluster' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVmwareCluster
The 'virtualization.VmwareCluster' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareCluster
#>
function Update-IntersightVirtualizationVmwareCluster {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVmwareCluster},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Update-IntersightVirtualizationVmwareCluster' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VmwareClusters/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling updateVirtualizationVmwareCluster."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVmwareCluster) {
            throw "Error! The required parameter `VirtualizationVmwareCluster` missing when calling updateVirtualizationVmwareCluster."
        }

        $LocalVarBodyParameter = $VirtualizationVmwareCluster | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareCluster" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VmwareDatacenter' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVmwareDatacenter
The 'virtualization.VmwareDatacenter' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareDatacenter
#>
function Update-IntersightVirtualizationVmwareDatacenter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVmwareDatacenter},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Update-IntersightVirtualizationVmwareDatacenter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VmwareDatacenters/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling updateVirtualizationVmwareDatacenter."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVmwareDatacenter) {
            throw "Error! The required parameter `VirtualizationVmwareDatacenter` missing when calling updateVirtualizationVmwareDatacenter."
        }

        $LocalVarBodyParameter = $VirtualizationVmwareDatacenter | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareDatacenter" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VmwareDatastore' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVmwareDatastore
The 'virtualization.VmwareDatastore' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareDatastore
#>
function Update-IntersightVirtualizationVmwareDatastore {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVmwareDatastore},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Update-IntersightVirtualizationVmwareDatastore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VmwareDatastores/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling updateVirtualizationVmwareDatastore."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVmwareDatastore) {
            throw "Error! The required parameter `VirtualizationVmwareDatastore` missing when calling updateVirtualizationVmwareDatastore."
        }

        $LocalVarBodyParameter = $VirtualizationVmwareDatastore | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareDatastore" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VmwareHost' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVmwareHost
The 'virtualization.VmwareHost' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareHost
#>
function Update-IntersightVirtualizationVmwareHost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVmwareHost},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Update-IntersightVirtualizationVmwareHost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VmwareHosts/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling updateVirtualizationVmwareHost."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVmwareHost) {
            throw "Error! The required parameter `VirtualizationVmwareHost` missing when calling updateVirtualizationVmwareHost."
        }

        $LocalVarBodyParameter = $VirtualizationVmwareHost | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareHost" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a 'virtualization.VmwareVirtualMachine' resource.

.DESCRIPTION

No description available.

.PARAMETER Moid
The unique Moid identifier of a resource instance.

.PARAMETER VirtualizationVmwareVirtualMachine
The 'virtualization.VmwareVirtualMachine' resource to update.

.PARAMETER IfMatch
For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualizationVmwareVirtualMachine
#>
function Update-IntersightVirtualizationVmwareVirtualMachine {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Moid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${VirtualizationVmwareVirtualMachine},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${IfMatch},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Update-IntersightVirtualizationVmwareVirtualMachine' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-IntersightConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'application/json-patch+json')

        $LocalVarUri = '/api/v1/virtualization/VmwareVirtualMachines/{Moid}'
        if (!$Moid) {
            throw "Error! The required parameter `Moid` missing when calling updateVirtualizationVmwareVirtualMachine."
        }
        $LocalVarUri = $LocalVarUri.replace('{Moid}', $Moid)

        if ($IfMatch) {
            $LocalVarHeaderParameters['If-Match'] = $IfMatch
        }

        if (!$VirtualizationVmwareVirtualMachine) {
            throw "Error! The required parameter `VirtualizationVmwareVirtualMachine` missing when calling updateVirtualizationVmwareVirtualMachine."
        }

        $LocalVarBodyParameter = $VirtualizationVmwareVirtualMachine | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }




        $LocalVarResult = Invoke-IntersightApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualizationVmwareVirtualMachine" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

